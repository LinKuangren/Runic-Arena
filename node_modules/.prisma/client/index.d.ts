
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model Card
 * 
 */
export type Card = {
  id: number
  name: string
  illustration: string
  typeId: number | null
  classId: number | null
  power: number
  color: string
  description: string
}

/**
 * Model Type
 * 
 */
export type Type = {
  id: number
  name: string
}

/**
 * Model Class
 * 
 */
export type Class = {
  id: number
  name: string
}

/**
 * Model Ability
 * 
 */
export type Ability = {
  id: number
  name: string
  cost: number
  cardId: number | null
}

/**
 * Model Competence
 * 
 */
export type Competence = {
  id: number
  name: string
  effect: number
  percent: boolean
  cardId: number | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Cards
 * const cards = await prisma.card.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Cards
   * const cards = await prisma.card.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.card`: Exposes CRUD operations for the **Card** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cards
    * const cards = await prisma.card.findMany()
    * ```
    */
  get card(): Prisma.CardDelegate<GlobalReject>;

  /**
   * `prisma.type`: Exposes CRUD operations for the **Type** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Types
    * const types = await prisma.type.findMany()
    * ```
    */
  get type(): Prisma.TypeDelegate<GlobalReject>;

  /**
   * `prisma.class`: Exposes CRUD operations for the **Class** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Classes
    * const classes = await prisma.class.findMany()
    * ```
    */
  get class(): Prisma.ClassDelegate<GlobalReject>;

  /**
   * `prisma.ability`: Exposes CRUD operations for the **Ability** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Abilities
    * const abilities = await prisma.ability.findMany()
    * ```
    */
  get ability(): Prisma.AbilityDelegate<GlobalReject>;

  /**
   * `prisma.competence`: Exposes CRUD operations for the **Competence** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Competences
    * const competences = await prisma.competence.findMany()
    * ```
    */
  get competence(): Prisma.CompetenceDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.13.0
   * Query Engine version: 1e7af066ee9cb95cf3a403c78d9aab3e6b04f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Card: 'Card',
    Type: 'Type',
    Class: 'Class',
    Ability: 'Ability',
    Competence: 'Competence'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CardCountOutputType
   */


  export type CardCountOutputType = {
    Ability: number
    Competence: number
  }

  export type CardCountOutputTypeSelect = {
    Ability?: boolean
    Competence?: boolean
  }

  export type CardCountOutputTypeGetPayload<S extends boolean | null | undefined | CardCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? CardCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (CardCountOutputTypeArgs)
    ? CardCountOutputType 
    : S extends { select: any } & (CardCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof CardCountOutputType ? CardCountOutputType[P] : never
  } 
      : CardCountOutputType




  // Custom InputTypes

  /**
   * CardCountOutputType without action
   */
  export type CardCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CardCountOutputType
     */
    select?: CardCountOutputTypeSelect | null
  }



  /**
   * Count Type TypeCountOutputType
   */


  export type TypeCountOutputType = {
    Card: number
  }

  export type TypeCountOutputTypeSelect = {
    Card?: boolean
  }

  export type TypeCountOutputTypeGetPayload<S extends boolean | null | undefined | TypeCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TypeCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TypeCountOutputTypeArgs)
    ? TypeCountOutputType 
    : S extends { select: any } & (TypeCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TypeCountOutputType ? TypeCountOutputType[P] : never
  } 
      : TypeCountOutputType




  // Custom InputTypes

  /**
   * TypeCountOutputType without action
   */
  export type TypeCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TypeCountOutputType
     */
    select?: TypeCountOutputTypeSelect | null
  }



  /**
   * Count Type ClassCountOutputType
   */


  export type ClassCountOutputType = {
    Card: number
  }

  export type ClassCountOutputTypeSelect = {
    Card?: boolean
  }

  export type ClassCountOutputTypeGetPayload<S extends boolean | null | undefined | ClassCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ClassCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ClassCountOutputTypeArgs)
    ? ClassCountOutputType 
    : S extends { select: any } & (ClassCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ClassCountOutputType ? ClassCountOutputType[P] : never
  } 
      : ClassCountOutputType




  // Custom InputTypes

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ClassCountOutputType
     */
    select?: ClassCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Card
   */


  export type AggregateCard = {
    _count: CardCountAggregateOutputType | null
    _avg: CardAvgAggregateOutputType | null
    _sum: CardSumAggregateOutputType | null
    _min: CardMinAggregateOutputType | null
    _max: CardMaxAggregateOutputType | null
  }

  export type CardAvgAggregateOutputType = {
    id: number | null
    typeId: number | null
    classId: number | null
    power: number | null
  }

  export type CardSumAggregateOutputType = {
    id: number | null
    typeId: number | null
    classId: number | null
    power: number | null
  }

  export type CardMinAggregateOutputType = {
    id: number | null
    name: string | null
    illustration: string | null
    typeId: number | null
    classId: number | null
    power: number | null
    color: string | null
    description: string | null
  }

  export type CardMaxAggregateOutputType = {
    id: number | null
    name: string | null
    illustration: string | null
    typeId: number | null
    classId: number | null
    power: number | null
    color: string | null
    description: string | null
  }

  export type CardCountAggregateOutputType = {
    id: number
    name: number
    illustration: number
    typeId: number
    classId: number
    power: number
    color: number
    description: number
    _all: number
  }


  export type CardAvgAggregateInputType = {
    id?: true
    typeId?: true
    classId?: true
    power?: true
  }

  export type CardSumAggregateInputType = {
    id?: true
    typeId?: true
    classId?: true
    power?: true
  }

  export type CardMinAggregateInputType = {
    id?: true
    name?: true
    illustration?: true
    typeId?: true
    classId?: true
    power?: true
    color?: true
    description?: true
  }

  export type CardMaxAggregateInputType = {
    id?: true
    name?: true
    illustration?: true
    typeId?: true
    classId?: true
    power?: true
    color?: true
    description?: true
  }

  export type CardCountAggregateInputType = {
    id?: true
    name?: true
    illustration?: true
    typeId?: true
    classId?: true
    power?: true
    color?: true
    description?: true
    _all?: true
  }

  export type CardAggregateArgs = {
    /**
     * Filter which Card to aggregate.
     */
    where?: CardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cards to fetch.
     */
    orderBy?: Enumerable<CardOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cards
    **/
    _count?: true | CardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CardAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CardSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CardMaxAggregateInputType
  }

  export type GetCardAggregateType<T extends CardAggregateArgs> = {
        [P in keyof T & keyof AggregateCard]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCard[P]>
      : GetScalarType<T[P], AggregateCard[P]>
  }




  export type CardGroupByArgs = {
    where?: CardWhereInput
    orderBy?: Enumerable<CardOrderByWithAggregationInput>
    by: CardScalarFieldEnum[]
    having?: CardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CardCountAggregateInputType | true
    _avg?: CardAvgAggregateInputType
    _sum?: CardSumAggregateInputType
    _min?: CardMinAggregateInputType
    _max?: CardMaxAggregateInputType
  }


  export type CardGroupByOutputType = {
    id: number
    name: string
    illustration: string
    typeId: number | null
    classId: number | null
    power: number
    color: string
    description: string
    _count: CardCountAggregateOutputType | null
    _avg: CardAvgAggregateOutputType | null
    _sum: CardSumAggregateOutputType | null
    _min: CardMinAggregateOutputType | null
    _max: CardMaxAggregateOutputType | null
  }

  type GetCardGroupByPayload<T extends CardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CardGroupByOutputType[P]>
            : GetScalarType<T[P], CardGroupByOutputType[P]>
        }
      >
    >


  export type CardSelect = {
    id?: boolean
    name?: boolean
    illustration?: boolean
    typeId?: boolean
    classId?: boolean
    power?: boolean
    color?: boolean
    description?: boolean
    type?: boolean | TypeArgs
    class?: boolean | ClassArgs
    Ability?: boolean | Card$AbilityArgs
    Competence?: boolean | Card$CompetenceArgs
    _count?: boolean | CardCountOutputTypeArgs
  }


  export type CardInclude = {
    type?: boolean | TypeArgs
    class?: boolean | ClassArgs
    Ability?: boolean | Card$AbilityArgs
    Competence?: boolean | Card$CompetenceArgs
    _count?: boolean | CardCountOutputTypeArgs
  }

  export type CardGetPayload<S extends boolean | null | undefined | CardArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Card :
    S extends undefined ? never :
    S extends { include: any } & (CardArgs | CardFindManyArgs)
    ? Card  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'type' ? TypeGetPayload<S['include'][P]> | null :
        P extends 'class' ? ClassGetPayload<S['include'][P]> | null :
        P extends 'Ability' ? Array < AbilityGetPayload<S['include'][P]>>  :
        P extends 'Competence' ? Array < CompetenceGetPayload<S['include'][P]>>  :
        P extends '_count' ? CardCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (CardArgs | CardFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'type' ? TypeGetPayload<S['select'][P]> | null :
        P extends 'class' ? ClassGetPayload<S['select'][P]> | null :
        P extends 'Ability' ? Array < AbilityGetPayload<S['select'][P]>>  :
        P extends 'Competence' ? Array < CompetenceGetPayload<S['select'][P]>>  :
        P extends '_count' ? CardCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Card ? Card[P] : never
  } 
      : Card


  type CardCountArgs = 
    Omit<CardFindManyArgs, 'select' | 'include'> & {
      select?: CardCountAggregateInputType | true
    }

  export interface CardDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Card that matches the filter.
     * @param {CardFindUniqueArgs} args - Arguments to find a Card
     * @example
     * // Get one Card
     * const card = await prisma.card.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CardFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CardFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Card'> extends True ? Prisma__CardClient<CardGetPayload<T>> : Prisma__CardClient<CardGetPayload<T> | null, null>

    /**
     * Find one Card that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CardFindUniqueOrThrowArgs} args - Arguments to find a Card
     * @example
     * // Get one Card
     * const card = await prisma.card.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CardFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CardFindUniqueOrThrowArgs>
    ): Prisma__CardClient<CardGetPayload<T>>

    /**
     * Find the first Card that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardFindFirstArgs} args - Arguments to find a Card
     * @example
     * // Get one Card
     * const card = await prisma.card.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CardFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CardFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Card'> extends True ? Prisma__CardClient<CardGetPayload<T>> : Prisma__CardClient<CardGetPayload<T> | null, null>

    /**
     * Find the first Card that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardFindFirstOrThrowArgs} args - Arguments to find a Card
     * @example
     * // Get one Card
     * const card = await prisma.card.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CardFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CardFindFirstOrThrowArgs>
    ): Prisma__CardClient<CardGetPayload<T>>

    /**
     * Find zero or more Cards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cards
     * const cards = await prisma.card.findMany()
     * 
     * // Get first 10 Cards
     * const cards = await prisma.card.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cardWithIdOnly = await prisma.card.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CardFindManyArgs>(
      args?: SelectSubset<T, CardFindManyArgs>
    ): Prisma.PrismaPromise<Array<CardGetPayload<T>>>

    /**
     * Create a Card.
     * @param {CardCreateArgs} args - Arguments to create a Card.
     * @example
     * // Create one Card
     * const Card = await prisma.card.create({
     *   data: {
     *     // ... data to create a Card
     *   }
     * })
     * 
    **/
    create<T extends CardCreateArgs>(
      args: SelectSubset<T, CardCreateArgs>
    ): Prisma__CardClient<CardGetPayload<T>>

    /**
     * Create many Cards.
     *     @param {CardCreateManyArgs} args - Arguments to create many Cards.
     *     @example
     *     // Create many Cards
     *     const card = await prisma.card.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CardCreateManyArgs>(
      args?: SelectSubset<T, CardCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Card.
     * @param {CardDeleteArgs} args - Arguments to delete one Card.
     * @example
     * // Delete one Card
     * const Card = await prisma.card.delete({
     *   where: {
     *     // ... filter to delete one Card
     *   }
     * })
     * 
    **/
    delete<T extends CardDeleteArgs>(
      args: SelectSubset<T, CardDeleteArgs>
    ): Prisma__CardClient<CardGetPayload<T>>

    /**
     * Update one Card.
     * @param {CardUpdateArgs} args - Arguments to update one Card.
     * @example
     * // Update one Card
     * const card = await prisma.card.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CardUpdateArgs>(
      args: SelectSubset<T, CardUpdateArgs>
    ): Prisma__CardClient<CardGetPayload<T>>

    /**
     * Delete zero or more Cards.
     * @param {CardDeleteManyArgs} args - Arguments to filter Cards to delete.
     * @example
     * // Delete a few Cards
     * const { count } = await prisma.card.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CardDeleteManyArgs>(
      args?: SelectSubset<T, CardDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cards
     * const card = await prisma.card.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CardUpdateManyArgs>(
      args: SelectSubset<T, CardUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Card.
     * @param {CardUpsertArgs} args - Arguments to update or create a Card.
     * @example
     * // Update or create a Card
     * const card = await prisma.card.upsert({
     *   create: {
     *     // ... data to create a Card
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Card we want to update
     *   }
     * })
    **/
    upsert<T extends CardUpsertArgs>(
      args: SelectSubset<T, CardUpsertArgs>
    ): Prisma__CardClient<CardGetPayload<T>>

    /**
     * Count the number of Cards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardCountArgs} args - Arguments to filter Cards to count.
     * @example
     * // Count the number of Cards
     * const count = await prisma.card.count({
     *   where: {
     *     // ... the filter for the Cards we want to count
     *   }
     * })
    **/
    count<T extends CardCountArgs>(
      args?: Subset<T, CardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Card.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CardAggregateArgs>(args: Subset<T, CardAggregateArgs>): Prisma.PrismaPromise<GetCardAggregateType<T>>

    /**
     * Group by Card.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CardGroupByArgs['orderBy'] }
        : { orderBy?: CardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Card.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CardClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    type<T extends TypeArgs= {}>(args?: Subset<T, TypeArgs>): Prisma__TypeClient<TypeGetPayload<T> | Null>;

    class<T extends ClassArgs= {}>(args?: Subset<T, ClassArgs>): Prisma__ClassClient<ClassGetPayload<T> | Null>;

    Ability<T extends Card$AbilityArgs= {}>(args?: Subset<T, Card$AbilityArgs>): Prisma.PrismaPromise<Array<AbilityGetPayload<T>>| Null>;

    Competence<T extends Card$CompetenceArgs= {}>(args?: Subset<T, Card$CompetenceArgs>): Prisma.PrismaPromise<Array<CompetenceGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Card base type for findUnique actions
   */
  export type CardFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CardInclude | null
    /**
     * Filter, which Card to fetch.
     */
    where: CardWhereUniqueInput
  }

  /**
   * Card findUnique
   */
  export interface CardFindUniqueArgs extends CardFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Card findUniqueOrThrow
   */
  export type CardFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CardInclude | null
    /**
     * Filter, which Card to fetch.
     */
    where: CardWhereUniqueInput
  }


  /**
   * Card base type for findFirst actions
   */
  export type CardFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CardInclude | null
    /**
     * Filter, which Card to fetch.
     */
    where?: CardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cards to fetch.
     */
    orderBy?: Enumerable<CardOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cards.
     */
    cursor?: CardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cards.
     */
    distinct?: Enumerable<CardScalarFieldEnum>
  }

  /**
   * Card findFirst
   */
  export interface CardFindFirstArgs extends CardFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Card findFirstOrThrow
   */
  export type CardFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CardInclude | null
    /**
     * Filter, which Card to fetch.
     */
    where?: CardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cards to fetch.
     */
    orderBy?: Enumerable<CardOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cards.
     */
    cursor?: CardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cards.
     */
    distinct?: Enumerable<CardScalarFieldEnum>
  }


  /**
   * Card findMany
   */
  export type CardFindManyArgs = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CardInclude | null
    /**
     * Filter, which Cards to fetch.
     */
    where?: CardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cards to fetch.
     */
    orderBy?: Enumerable<CardOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cards.
     */
    cursor?: CardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cards.
     */
    skip?: number
    distinct?: Enumerable<CardScalarFieldEnum>
  }


  /**
   * Card create
   */
  export type CardCreateArgs = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CardInclude | null
    /**
     * The data needed to create a Card.
     */
    data: XOR<CardCreateInput, CardUncheckedCreateInput>
  }


  /**
   * Card createMany
   */
  export type CardCreateManyArgs = {
    /**
     * The data used to create many Cards.
     */
    data: Enumerable<CardCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Card update
   */
  export type CardUpdateArgs = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CardInclude | null
    /**
     * The data needed to update a Card.
     */
    data: XOR<CardUpdateInput, CardUncheckedUpdateInput>
    /**
     * Choose, which Card to update.
     */
    where: CardWhereUniqueInput
  }


  /**
   * Card updateMany
   */
  export type CardUpdateManyArgs = {
    /**
     * The data used to update Cards.
     */
    data: XOR<CardUpdateManyMutationInput, CardUncheckedUpdateManyInput>
    /**
     * Filter which Cards to update
     */
    where?: CardWhereInput
  }


  /**
   * Card upsert
   */
  export type CardUpsertArgs = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CardInclude | null
    /**
     * The filter to search for the Card to update in case it exists.
     */
    where: CardWhereUniqueInput
    /**
     * In case the Card found by the `where` argument doesn't exist, create a new Card with this data.
     */
    create: XOR<CardCreateInput, CardUncheckedCreateInput>
    /**
     * In case the Card was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CardUpdateInput, CardUncheckedUpdateInput>
  }


  /**
   * Card delete
   */
  export type CardDeleteArgs = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CardInclude | null
    /**
     * Filter which Card to delete.
     */
    where: CardWhereUniqueInput
  }


  /**
   * Card deleteMany
   */
  export type CardDeleteManyArgs = {
    /**
     * Filter which Cards to delete
     */
    where?: CardWhereInput
  }


  /**
   * Card.Ability
   */
  export type Card$AbilityArgs = {
    /**
     * Select specific fields to fetch from the Ability
     */
    select?: AbilitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AbilityInclude | null
    where?: AbilityWhereInput
    orderBy?: Enumerable<AbilityOrderByWithRelationInput>
    cursor?: AbilityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AbilityScalarFieldEnum>
  }


  /**
   * Card.Competence
   */
  export type Card$CompetenceArgs = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompetenceInclude | null
    where?: CompetenceWhereInput
    orderBy?: Enumerable<CompetenceOrderByWithRelationInput>
    cursor?: CompetenceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CompetenceScalarFieldEnum>
  }


  /**
   * Card without action
   */
  export type CardArgs = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CardInclude | null
  }



  /**
   * Model Type
   */


  export type AggregateType = {
    _count: TypeCountAggregateOutputType | null
    _avg: TypeAvgAggregateOutputType | null
    _sum: TypeSumAggregateOutputType | null
    _min: TypeMinAggregateOutputType | null
    _max: TypeMaxAggregateOutputType | null
  }

  export type TypeAvgAggregateOutputType = {
    id: number | null
  }

  export type TypeSumAggregateOutputType = {
    id: number | null
  }

  export type TypeMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type TypeMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type TypeCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type TypeAvgAggregateInputType = {
    id?: true
  }

  export type TypeSumAggregateInputType = {
    id?: true
  }

  export type TypeMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type TypeMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type TypeCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type TypeAggregateArgs = {
    /**
     * Filter which Type to aggregate.
     */
    where?: TypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Types to fetch.
     */
    orderBy?: Enumerable<TypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Types
    **/
    _count?: true | TypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TypeMaxAggregateInputType
  }

  export type GetTypeAggregateType<T extends TypeAggregateArgs> = {
        [P in keyof T & keyof AggregateType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateType[P]>
      : GetScalarType<T[P], AggregateType[P]>
  }




  export type TypeGroupByArgs = {
    where?: TypeWhereInput
    orderBy?: Enumerable<TypeOrderByWithAggregationInput>
    by: TypeScalarFieldEnum[]
    having?: TypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TypeCountAggregateInputType | true
    _avg?: TypeAvgAggregateInputType
    _sum?: TypeSumAggregateInputType
    _min?: TypeMinAggregateInputType
    _max?: TypeMaxAggregateInputType
  }


  export type TypeGroupByOutputType = {
    id: number
    name: string
    _count: TypeCountAggregateOutputType | null
    _avg: TypeAvgAggregateOutputType | null
    _sum: TypeSumAggregateOutputType | null
    _min: TypeMinAggregateOutputType | null
    _max: TypeMaxAggregateOutputType | null
  }

  type GetTypeGroupByPayload<T extends TypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TypeGroupByOutputType[P]>
            : GetScalarType<T[P], TypeGroupByOutputType[P]>
        }
      >
    >


  export type TypeSelect = {
    id?: boolean
    name?: boolean
    Card?: boolean | Type$CardArgs
    _count?: boolean | TypeCountOutputTypeArgs
  }


  export type TypeInclude = {
    Card?: boolean | Type$CardArgs
    _count?: boolean | TypeCountOutputTypeArgs
  }

  export type TypeGetPayload<S extends boolean | null | undefined | TypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Type :
    S extends undefined ? never :
    S extends { include: any } & (TypeArgs | TypeFindManyArgs)
    ? Type  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Card' ? Array < CardGetPayload<S['include'][P]>>  :
        P extends '_count' ? TypeCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (TypeArgs | TypeFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Card' ? Array < CardGetPayload<S['select'][P]>>  :
        P extends '_count' ? TypeCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Type ? Type[P] : never
  } 
      : Type


  type TypeCountArgs = 
    Omit<TypeFindManyArgs, 'select' | 'include'> & {
      select?: TypeCountAggregateInputType | true
    }

  export interface TypeDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Type that matches the filter.
     * @param {TypeFindUniqueArgs} args - Arguments to find a Type
     * @example
     * // Get one Type
     * const type = await prisma.type.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TypeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TypeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Type'> extends True ? Prisma__TypeClient<TypeGetPayload<T>> : Prisma__TypeClient<TypeGetPayload<T> | null, null>

    /**
     * Find one Type that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TypeFindUniqueOrThrowArgs} args - Arguments to find a Type
     * @example
     * // Get one Type
     * const type = await prisma.type.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TypeFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TypeFindUniqueOrThrowArgs>
    ): Prisma__TypeClient<TypeGetPayload<T>>

    /**
     * Find the first Type that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeFindFirstArgs} args - Arguments to find a Type
     * @example
     * // Get one Type
     * const type = await prisma.type.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TypeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TypeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Type'> extends True ? Prisma__TypeClient<TypeGetPayload<T>> : Prisma__TypeClient<TypeGetPayload<T> | null, null>

    /**
     * Find the first Type that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeFindFirstOrThrowArgs} args - Arguments to find a Type
     * @example
     * // Get one Type
     * const type = await prisma.type.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TypeFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TypeFindFirstOrThrowArgs>
    ): Prisma__TypeClient<TypeGetPayload<T>>

    /**
     * Find zero or more Types that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Types
     * const types = await prisma.type.findMany()
     * 
     * // Get first 10 Types
     * const types = await prisma.type.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const typeWithIdOnly = await prisma.type.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TypeFindManyArgs>(
      args?: SelectSubset<T, TypeFindManyArgs>
    ): Prisma.PrismaPromise<Array<TypeGetPayload<T>>>

    /**
     * Create a Type.
     * @param {TypeCreateArgs} args - Arguments to create a Type.
     * @example
     * // Create one Type
     * const Type = await prisma.type.create({
     *   data: {
     *     // ... data to create a Type
     *   }
     * })
     * 
    **/
    create<T extends TypeCreateArgs>(
      args: SelectSubset<T, TypeCreateArgs>
    ): Prisma__TypeClient<TypeGetPayload<T>>

    /**
     * Create many Types.
     *     @param {TypeCreateManyArgs} args - Arguments to create many Types.
     *     @example
     *     // Create many Types
     *     const type = await prisma.type.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TypeCreateManyArgs>(
      args?: SelectSubset<T, TypeCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Type.
     * @param {TypeDeleteArgs} args - Arguments to delete one Type.
     * @example
     * // Delete one Type
     * const Type = await prisma.type.delete({
     *   where: {
     *     // ... filter to delete one Type
     *   }
     * })
     * 
    **/
    delete<T extends TypeDeleteArgs>(
      args: SelectSubset<T, TypeDeleteArgs>
    ): Prisma__TypeClient<TypeGetPayload<T>>

    /**
     * Update one Type.
     * @param {TypeUpdateArgs} args - Arguments to update one Type.
     * @example
     * // Update one Type
     * const type = await prisma.type.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TypeUpdateArgs>(
      args: SelectSubset<T, TypeUpdateArgs>
    ): Prisma__TypeClient<TypeGetPayload<T>>

    /**
     * Delete zero or more Types.
     * @param {TypeDeleteManyArgs} args - Arguments to filter Types to delete.
     * @example
     * // Delete a few Types
     * const { count } = await prisma.type.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TypeDeleteManyArgs>(
      args?: SelectSubset<T, TypeDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Types.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Types
     * const type = await prisma.type.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TypeUpdateManyArgs>(
      args: SelectSubset<T, TypeUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Type.
     * @param {TypeUpsertArgs} args - Arguments to update or create a Type.
     * @example
     * // Update or create a Type
     * const type = await prisma.type.upsert({
     *   create: {
     *     // ... data to create a Type
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Type we want to update
     *   }
     * })
    **/
    upsert<T extends TypeUpsertArgs>(
      args: SelectSubset<T, TypeUpsertArgs>
    ): Prisma__TypeClient<TypeGetPayload<T>>

    /**
     * Count the number of Types.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeCountArgs} args - Arguments to filter Types to count.
     * @example
     * // Count the number of Types
     * const count = await prisma.type.count({
     *   where: {
     *     // ... the filter for the Types we want to count
     *   }
     * })
    **/
    count<T extends TypeCountArgs>(
      args?: Subset<T, TypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Type.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TypeAggregateArgs>(args: Subset<T, TypeAggregateArgs>): Prisma.PrismaPromise<GetTypeAggregateType<T>>

    /**
     * Group by Type.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TypeGroupByArgs['orderBy'] }
        : { orderBy?: TypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Type.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TypeClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Card<T extends Type$CardArgs= {}>(args?: Subset<T, Type$CardArgs>): Prisma.PrismaPromise<Array<CardGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Type base type for findUnique actions
   */
  export type TypeFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude | null
    /**
     * Filter, which Type to fetch.
     */
    where: TypeWhereUniqueInput
  }

  /**
   * Type findUnique
   */
  export interface TypeFindUniqueArgs extends TypeFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Type findUniqueOrThrow
   */
  export type TypeFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude | null
    /**
     * Filter, which Type to fetch.
     */
    where: TypeWhereUniqueInput
  }


  /**
   * Type base type for findFirst actions
   */
  export type TypeFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude | null
    /**
     * Filter, which Type to fetch.
     */
    where?: TypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Types to fetch.
     */
    orderBy?: Enumerable<TypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Types.
     */
    cursor?: TypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Types.
     */
    distinct?: Enumerable<TypeScalarFieldEnum>
  }

  /**
   * Type findFirst
   */
  export interface TypeFindFirstArgs extends TypeFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Type findFirstOrThrow
   */
  export type TypeFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude | null
    /**
     * Filter, which Type to fetch.
     */
    where?: TypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Types to fetch.
     */
    orderBy?: Enumerable<TypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Types.
     */
    cursor?: TypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Types.
     */
    distinct?: Enumerable<TypeScalarFieldEnum>
  }


  /**
   * Type findMany
   */
  export type TypeFindManyArgs = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude | null
    /**
     * Filter, which Types to fetch.
     */
    where?: TypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Types to fetch.
     */
    orderBy?: Enumerable<TypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Types.
     */
    cursor?: TypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Types.
     */
    skip?: number
    distinct?: Enumerable<TypeScalarFieldEnum>
  }


  /**
   * Type create
   */
  export type TypeCreateArgs = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude | null
    /**
     * The data needed to create a Type.
     */
    data: XOR<TypeCreateInput, TypeUncheckedCreateInput>
  }


  /**
   * Type createMany
   */
  export type TypeCreateManyArgs = {
    /**
     * The data used to create many Types.
     */
    data: Enumerable<TypeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Type update
   */
  export type TypeUpdateArgs = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude | null
    /**
     * The data needed to update a Type.
     */
    data: XOR<TypeUpdateInput, TypeUncheckedUpdateInput>
    /**
     * Choose, which Type to update.
     */
    where: TypeWhereUniqueInput
  }


  /**
   * Type updateMany
   */
  export type TypeUpdateManyArgs = {
    /**
     * The data used to update Types.
     */
    data: XOR<TypeUpdateManyMutationInput, TypeUncheckedUpdateManyInput>
    /**
     * Filter which Types to update
     */
    where?: TypeWhereInput
  }


  /**
   * Type upsert
   */
  export type TypeUpsertArgs = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude | null
    /**
     * The filter to search for the Type to update in case it exists.
     */
    where: TypeWhereUniqueInput
    /**
     * In case the Type found by the `where` argument doesn't exist, create a new Type with this data.
     */
    create: XOR<TypeCreateInput, TypeUncheckedCreateInput>
    /**
     * In case the Type was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TypeUpdateInput, TypeUncheckedUpdateInput>
  }


  /**
   * Type delete
   */
  export type TypeDeleteArgs = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude | null
    /**
     * Filter which Type to delete.
     */
    where: TypeWhereUniqueInput
  }


  /**
   * Type deleteMany
   */
  export type TypeDeleteManyArgs = {
    /**
     * Filter which Types to delete
     */
    where?: TypeWhereInput
  }


  /**
   * Type.Card
   */
  export type Type$CardArgs = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CardInclude | null
    where?: CardWhereInput
    orderBy?: Enumerable<CardOrderByWithRelationInput>
    cursor?: CardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CardScalarFieldEnum>
  }


  /**
   * Type without action
   */
  export type TypeArgs = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude | null
  }



  /**
   * Model Class
   */


  export type AggregateClass = {
    _count: ClassCountAggregateOutputType | null
    _avg: ClassAvgAggregateOutputType | null
    _sum: ClassSumAggregateOutputType | null
    _min: ClassMinAggregateOutputType | null
    _max: ClassMaxAggregateOutputType | null
  }

  export type ClassAvgAggregateOutputType = {
    id: number | null
  }

  export type ClassSumAggregateOutputType = {
    id: number | null
  }

  export type ClassMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type ClassMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type ClassCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type ClassAvgAggregateInputType = {
    id?: true
  }

  export type ClassSumAggregateInputType = {
    id?: true
  }

  export type ClassMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type ClassMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type ClassCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type ClassAggregateArgs = {
    /**
     * Filter which Class to aggregate.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: Enumerable<ClassOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Classes
    **/
    _count?: true | ClassCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClassAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClassSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClassMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClassMaxAggregateInputType
  }

  export type GetClassAggregateType<T extends ClassAggregateArgs> = {
        [P in keyof T & keyof AggregateClass]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClass[P]>
      : GetScalarType<T[P], AggregateClass[P]>
  }




  export type ClassGroupByArgs = {
    where?: ClassWhereInput
    orderBy?: Enumerable<ClassOrderByWithAggregationInput>
    by: ClassScalarFieldEnum[]
    having?: ClassScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClassCountAggregateInputType | true
    _avg?: ClassAvgAggregateInputType
    _sum?: ClassSumAggregateInputType
    _min?: ClassMinAggregateInputType
    _max?: ClassMaxAggregateInputType
  }


  export type ClassGroupByOutputType = {
    id: number
    name: string
    _count: ClassCountAggregateOutputType | null
    _avg: ClassAvgAggregateOutputType | null
    _sum: ClassSumAggregateOutputType | null
    _min: ClassMinAggregateOutputType | null
    _max: ClassMaxAggregateOutputType | null
  }

  type GetClassGroupByPayload<T extends ClassGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ClassGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClassGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClassGroupByOutputType[P]>
            : GetScalarType<T[P], ClassGroupByOutputType[P]>
        }
      >
    >


  export type ClassSelect = {
    id?: boolean
    name?: boolean
    Card?: boolean | Class$CardArgs
    _count?: boolean | ClassCountOutputTypeArgs
  }


  export type ClassInclude = {
    Card?: boolean | Class$CardArgs
    _count?: boolean | ClassCountOutputTypeArgs
  }

  export type ClassGetPayload<S extends boolean | null | undefined | ClassArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Class :
    S extends undefined ? never :
    S extends { include: any } & (ClassArgs | ClassFindManyArgs)
    ? Class  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Card' ? Array < CardGetPayload<S['include'][P]>>  :
        P extends '_count' ? ClassCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ClassArgs | ClassFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Card' ? Array < CardGetPayload<S['select'][P]>>  :
        P extends '_count' ? ClassCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Class ? Class[P] : never
  } 
      : Class


  type ClassCountArgs = 
    Omit<ClassFindManyArgs, 'select' | 'include'> & {
      select?: ClassCountAggregateInputType | true
    }

  export interface ClassDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Class that matches the filter.
     * @param {ClassFindUniqueArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ClassFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ClassFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Class'> extends True ? Prisma__ClassClient<ClassGetPayload<T>> : Prisma__ClassClient<ClassGetPayload<T> | null, null>

    /**
     * Find one Class that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ClassFindUniqueOrThrowArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ClassFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ClassFindUniqueOrThrowArgs>
    ): Prisma__ClassClient<ClassGetPayload<T>>

    /**
     * Find the first Class that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindFirstArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ClassFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ClassFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Class'> extends True ? Prisma__ClassClient<ClassGetPayload<T>> : Prisma__ClassClient<ClassGetPayload<T> | null, null>

    /**
     * Find the first Class that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindFirstOrThrowArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ClassFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ClassFindFirstOrThrowArgs>
    ): Prisma__ClassClient<ClassGetPayload<T>>

    /**
     * Find zero or more Classes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Classes
     * const classes = await prisma.class.findMany()
     * 
     * // Get first 10 Classes
     * const classes = await prisma.class.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const classWithIdOnly = await prisma.class.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ClassFindManyArgs>(
      args?: SelectSubset<T, ClassFindManyArgs>
    ): Prisma.PrismaPromise<Array<ClassGetPayload<T>>>

    /**
     * Create a Class.
     * @param {ClassCreateArgs} args - Arguments to create a Class.
     * @example
     * // Create one Class
     * const Class = await prisma.class.create({
     *   data: {
     *     // ... data to create a Class
     *   }
     * })
     * 
    **/
    create<T extends ClassCreateArgs>(
      args: SelectSubset<T, ClassCreateArgs>
    ): Prisma__ClassClient<ClassGetPayload<T>>

    /**
     * Create many Classes.
     *     @param {ClassCreateManyArgs} args - Arguments to create many Classes.
     *     @example
     *     // Create many Classes
     *     const class = await prisma.class.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ClassCreateManyArgs>(
      args?: SelectSubset<T, ClassCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Class.
     * @param {ClassDeleteArgs} args - Arguments to delete one Class.
     * @example
     * // Delete one Class
     * const Class = await prisma.class.delete({
     *   where: {
     *     // ... filter to delete one Class
     *   }
     * })
     * 
    **/
    delete<T extends ClassDeleteArgs>(
      args: SelectSubset<T, ClassDeleteArgs>
    ): Prisma__ClassClient<ClassGetPayload<T>>

    /**
     * Update one Class.
     * @param {ClassUpdateArgs} args - Arguments to update one Class.
     * @example
     * // Update one Class
     * const class = await prisma.class.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ClassUpdateArgs>(
      args: SelectSubset<T, ClassUpdateArgs>
    ): Prisma__ClassClient<ClassGetPayload<T>>

    /**
     * Delete zero or more Classes.
     * @param {ClassDeleteManyArgs} args - Arguments to filter Classes to delete.
     * @example
     * // Delete a few Classes
     * const { count } = await prisma.class.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ClassDeleteManyArgs>(
      args?: SelectSubset<T, ClassDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Classes
     * const class = await prisma.class.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ClassUpdateManyArgs>(
      args: SelectSubset<T, ClassUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Class.
     * @param {ClassUpsertArgs} args - Arguments to update or create a Class.
     * @example
     * // Update or create a Class
     * const class = await prisma.class.upsert({
     *   create: {
     *     // ... data to create a Class
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Class we want to update
     *   }
     * })
    **/
    upsert<T extends ClassUpsertArgs>(
      args: SelectSubset<T, ClassUpsertArgs>
    ): Prisma__ClassClient<ClassGetPayload<T>>

    /**
     * Count the number of Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassCountArgs} args - Arguments to filter Classes to count.
     * @example
     * // Count the number of Classes
     * const count = await prisma.class.count({
     *   where: {
     *     // ... the filter for the Classes we want to count
     *   }
     * })
    **/
    count<T extends ClassCountArgs>(
      args?: Subset<T, ClassCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClassCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Class.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClassAggregateArgs>(args: Subset<T, ClassAggregateArgs>): Prisma.PrismaPromise<GetClassAggregateType<T>>

    /**
     * Group by Class.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClassGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClassGroupByArgs['orderBy'] }
        : { orderBy?: ClassGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClassGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClassGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Class.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ClassClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Card<T extends Class$CardArgs= {}>(args?: Subset<T, Class$CardArgs>): Prisma.PrismaPromise<Array<CardGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Class base type for findUnique actions
   */
  export type ClassFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClassInclude | null
    /**
     * Filter, which Class to fetch.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class findUnique
   */
  export interface ClassFindUniqueArgs extends ClassFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Class findUniqueOrThrow
   */
  export type ClassFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClassInclude | null
    /**
     * Filter, which Class to fetch.
     */
    where: ClassWhereUniqueInput
  }


  /**
   * Class base type for findFirst actions
   */
  export type ClassFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClassInclude | null
    /**
     * Filter, which Class to fetch.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: Enumerable<ClassOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Classes.
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Classes.
     */
    distinct?: Enumerable<ClassScalarFieldEnum>
  }

  /**
   * Class findFirst
   */
  export interface ClassFindFirstArgs extends ClassFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Class findFirstOrThrow
   */
  export type ClassFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClassInclude | null
    /**
     * Filter, which Class to fetch.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: Enumerable<ClassOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Classes.
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Classes.
     */
    distinct?: Enumerable<ClassScalarFieldEnum>
  }


  /**
   * Class findMany
   */
  export type ClassFindManyArgs = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClassInclude | null
    /**
     * Filter, which Classes to fetch.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: Enumerable<ClassOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Classes.
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    distinct?: Enumerable<ClassScalarFieldEnum>
  }


  /**
   * Class create
   */
  export type ClassCreateArgs = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClassInclude | null
    /**
     * The data needed to create a Class.
     */
    data: XOR<ClassCreateInput, ClassUncheckedCreateInput>
  }


  /**
   * Class createMany
   */
  export type ClassCreateManyArgs = {
    /**
     * The data used to create many Classes.
     */
    data: Enumerable<ClassCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Class update
   */
  export type ClassUpdateArgs = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClassInclude | null
    /**
     * The data needed to update a Class.
     */
    data: XOR<ClassUpdateInput, ClassUncheckedUpdateInput>
    /**
     * Choose, which Class to update.
     */
    where: ClassWhereUniqueInput
  }


  /**
   * Class updateMany
   */
  export type ClassUpdateManyArgs = {
    /**
     * The data used to update Classes.
     */
    data: XOR<ClassUpdateManyMutationInput, ClassUncheckedUpdateManyInput>
    /**
     * Filter which Classes to update
     */
    where?: ClassWhereInput
  }


  /**
   * Class upsert
   */
  export type ClassUpsertArgs = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClassInclude | null
    /**
     * The filter to search for the Class to update in case it exists.
     */
    where: ClassWhereUniqueInput
    /**
     * In case the Class found by the `where` argument doesn't exist, create a new Class with this data.
     */
    create: XOR<ClassCreateInput, ClassUncheckedCreateInput>
    /**
     * In case the Class was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClassUpdateInput, ClassUncheckedUpdateInput>
  }


  /**
   * Class delete
   */
  export type ClassDeleteArgs = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClassInclude | null
    /**
     * Filter which Class to delete.
     */
    where: ClassWhereUniqueInput
  }


  /**
   * Class deleteMany
   */
  export type ClassDeleteManyArgs = {
    /**
     * Filter which Classes to delete
     */
    where?: ClassWhereInput
  }


  /**
   * Class.Card
   */
  export type Class$CardArgs = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CardInclude | null
    where?: CardWhereInput
    orderBy?: Enumerable<CardOrderByWithRelationInput>
    cursor?: CardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CardScalarFieldEnum>
  }


  /**
   * Class without action
   */
  export type ClassArgs = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClassInclude | null
  }



  /**
   * Model Ability
   */


  export type AggregateAbility = {
    _count: AbilityCountAggregateOutputType | null
    _avg: AbilityAvgAggregateOutputType | null
    _sum: AbilitySumAggregateOutputType | null
    _min: AbilityMinAggregateOutputType | null
    _max: AbilityMaxAggregateOutputType | null
  }

  export type AbilityAvgAggregateOutputType = {
    id: number | null
    cost: number | null
    cardId: number | null
  }

  export type AbilitySumAggregateOutputType = {
    id: number | null
    cost: number | null
    cardId: number | null
  }

  export type AbilityMinAggregateOutputType = {
    id: number | null
    name: string | null
    cost: number | null
    cardId: number | null
  }

  export type AbilityMaxAggregateOutputType = {
    id: number | null
    name: string | null
    cost: number | null
    cardId: number | null
  }

  export type AbilityCountAggregateOutputType = {
    id: number
    name: number
    cost: number
    cardId: number
    _all: number
  }


  export type AbilityAvgAggregateInputType = {
    id?: true
    cost?: true
    cardId?: true
  }

  export type AbilitySumAggregateInputType = {
    id?: true
    cost?: true
    cardId?: true
  }

  export type AbilityMinAggregateInputType = {
    id?: true
    name?: true
    cost?: true
    cardId?: true
  }

  export type AbilityMaxAggregateInputType = {
    id?: true
    name?: true
    cost?: true
    cardId?: true
  }

  export type AbilityCountAggregateInputType = {
    id?: true
    name?: true
    cost?: true
    cardId?: true
    _all?: true
  }

  export type AbilityAggregateArgs = {
    /**
     * Filter which Ability to aggregate.
     */
    where?: AbilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Abilities to fetch.
     */
    orderBy?: Enumerable<AbilityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AbilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Abilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Abilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Abilities
    **/
    _count?: true | AbilityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AbilityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AbilitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AbilityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AbilityMaxAggregateInputType
  }

  export type GetAbilityAggregateType<T extends AbilityAggregateArgs> = {
        [P in keyof T & keyof AggregateAbility]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAbility[P]>
      : GetScalarType<T[P], AggregateAbility[P]>
  }




  export type AbilityGroupByArgs = {
    where?: AbilityWhereInput
    orderBy?: Enumerable<AbilityOrderByWithAggregationInput>
    by: AbilityScalarFieldEnum[]
    having?: AbilityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AbilityCountAggregateInputType | true
    _avg?: AbilityAvgAggregateInputType
    _sum?: AbilitySumAggregateInputType
    _min?: AbilityMinAggregateInputType
    _max?: AbilityMaxAggregateInputType
  }


  export type AbilityGroupByOutputType = {
    id: number
    name: string
    cost: number
    cardId: number | null
    _count: AbilityCountAggregateOutputType | null
    _avg: AbilityAvgAggregateOutputType | null
    _sum: AbilitySumAggregateOutputType | null
    _min: AbilityMinAggregateOutputType | null
    _max: AbilityMaxAggregateOutputType | null
  }

  type GetAbilityGroupByPayload<T extends AbilityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AbilityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AbilityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AbilityGroupByOutputType[P]>
            : GetScalarType<T[P], AbilityGroupByOutputType[P]>
        }
      >
    >


  export type AbilitySelect = {
    id?: boolean
    name?: boolean
    cost?: boolean
    cardId?: boolean
    card?: boolean | CardArgs
  }


  export type AbilityInclude = {
    card?: boolean | CardArgs
  }

  export type AbilityGetPayload<S extends boolean | null | undefined | AbilityArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Ability :
    S extends undefined ? never :
    S extends { include: any } & (AbilityArgs | AbilityFindManyArgs)
    ? Ability  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'card' ? CardGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (AbilityArgs | AbilityFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'card' ? CardGetPayload<S['select'][P]> | null :  P extends keyof Ability ? Ability[P] : never
  } 
      : Ability


  type AbilityCountArgs = 
    Omit<AbilityFindManyArgs, 'select' | 'include'> & {
      select?: AbilityCountAggregateInputType | true
    }

  export interface AbilityDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Ability that matches the filter.
     * @param {AbilityFindUniqueArgs} args - Arguments to find a Ability
     * @example
     * // Get one Ability
     * const ability = await prisma.ability.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AbilityFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AbilityFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Ability'> extends True ? Prisma__AbilityClient<AbilityGetPayload<T>> : Prisma__AbilityClient<AbilityGetPayload<T> | null, null>

    /**
     * Find one Ability that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AbilityFindUniqueOrThrowArgs} args - Arguments to find a Ability
     * @example
     * // Get one Ability
     * const ability = await prisma.ability.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AbilityFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, AbilityFindUniqueOrThrowArgs>
    ): Prisma__AbilityClient<AbilityGetPayload<T>>

    /**
     * Find the first Ability that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AbilityFindFirstArgs} args - Arguments to find a Ability
     * @example
     * // Get one Ability
     * const ability = await prisma.ability.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AbilityFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AbilityFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Ability'> extends True ? Prisma__AbilityClient<AbilityGetPayload<T>> : Prisma__AbilityClient<AbilityGetPayload<T> | null, null>

    /**
     * Find the first Ability that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AbilityFindFirstOrThrowArgs} args - Arguments to find a Ability
     * @example
     * // Get one Ability
     * const ability = await prisma.ability.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AbilityFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AbilityFindFirstOrThrowArgs>
    ): Prisma__AbilityClient<AbilityGetPayload<T>>

    /**
     * Find zero or more Abilities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AbilityFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Abilities
     * const abilities = await prisma.ability.findMany()
     * 
     * // Get first 10 Abilities
     * const abilities = await prisma.ability.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const abilityWithIdOnly = await prisma.ability.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AbilityFindManyArgs>(
      args?: SelectSubset<T, AbilityFindManyArgs>
    ): Prisma.PrismaPromise<Array<AbilityGetPayload<T>>>

    /**
     * Create a Ability.
     * @param {AbilityCreateArgs} args - Arguments to create a Ability.
     * @example
     * // Create one Ability
     * const Ability = await prisma.ability.create({
     *   data: {
     *     // ... data to create a Ability
     *   }
     * })
     * 
    **/
    create<T extends AbilityCreateArgs>(
      args: SelectSubset<T, AbilityCreateArgs>
    ): Prisma__AbilityClient<AbilityGetPayload<T>>

    /**
     * Create many Abilities.
     *     @param {AbilityCreateManyArgs} args - Arguments to create many Abilities.
     *     @example
     *     // Create many Abilities
     *     const ability = await prisma.ability.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AbilityCreateManyArgs>(
      args?: SelectSubset<T, AbilityCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Ability.
     * @param {AbilityDeleteArgs} args - Arguments to delete one Ability.
     * @example
     * // Delete one Ability
     * const Ability = await prisma.ability.delete({
     *   where: {
     *     // ... filter to delete one Ability
     *   }
     * })
     * 
    **/
    delete<T extends AbilityDeleteArgs>(
      args: SelectSubset<T, AbilityDeleteArgs>
    ): Prisma__AbilityClient<AbilityGetPayload<T>>

    /**
     * Update one Ability.
     * @param {AbilityUpdateArgs} args - Arguments to update one Ability.
     * @example
     * // Update one Ability
     * const ability = await prisma.ability.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AbilityUpdateArgs>(
      args: SelectSubset<T, AbilityUpdateArgs>
    ): Prisma__AbilityClient<AbilityGetPayload<T>>

    /**
     * Delete zero or more Abilities.
     * @param {AbilityDeleteManyArgs} args - Arguments to filter Abilities to delete.
     * @example
     * // Delete a few Abilities
     * const { count } = await prisma.ability.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AbilityDeleteManyArgs>(
      args?: SelectSubset<T, AbilityDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Abilities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AbilityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Abilities
     * const ability = await prisma.ability.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AbilityUpdateManyArgs>(
      args: SelectSubset<T, AbilityUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Ability.
     * @param {AbilityUpsertArgs} args - Arguments to update or create a Ability.
     * @example
     * // Update or create a Ability
     * const ability = await prisma.ability.upsert({
     *   create: {
     *     // ... data to create a Ability
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ability we want to update
     *   }
     * })
    **/
    upsert<T extends AbilityUpsertArgs>(
      args: SelectSubset<T, AbilityUpsertArgs>
    ): Prisma__AbilityClient<AbilityGetPayload<T>>

    /**
     * Count the number of Abilities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AbilityCountArgs} args - Arguments to filter Abilities to count.
     * @example
     * // Count the number of Abilities
     * const count = await prisma.ability.count({
     *   where: {
     *     // ... the filter for the Abilities we want to count
     *   }
     * })
    **/
    count<T extends AbilityCountArgs>(
      args?: Subset<T, AbilityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AbilityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ability.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AbilityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AbilityAggregateArgs>(args: Subset<T, AbilityAggregateArgs>): Prisma.PrismaPromise<GetAbilityAggregateType<T>>

    /**
     * Group by Ability.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AbilityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AbilityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AbilityGroupByArgs['orderBy'] }
        : { orderBy?: AbilityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AbilityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAbilityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Ability.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AbilityClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    card<T extends CardArgs= {}>(args?: Subset<T, CardArgs>): Prisma__CardClient<CardGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Ability base type for findUnique actions
   */
  export type AbilityFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Ability
     */
    select?: AbilitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AbilityInclude | null
    /**
     * Filter, which Ability to fetch.
     */
    where: AbilityWhereUniqueInput
  }

  /**
   * Ability findUnique
   */
  export interface AbilityFindUniqueArgs extends AbilityFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Ability findUniqueOrThrow
   */
  export type AbilityFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Ability
     */
    select?: AbilitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AbilityInclude | null
    /**
     * Filter, which Ability to fetch.
     */
    where: AbilityWhereUniqueInput
  }


  /**
   * Ability base type for findFirst actions
   */
  export type AbilityFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Ability
     */
    select?: AbilitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AbilityInclude | null
    /**
     * Filter, which Ability to fetch.
     */
    where?: AbilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Abilities to fetch.
     */
    orderBy?: Enumerable<AbilityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Abilities.
     */
    cursor?: AbilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Abilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Abilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Abilities.
     */
    distinct?: Enumerable<AbilityScalarFieldEnum>
  }

  /**
   * Ability findFirst
   */
  export interface AbilityFindFirstArgs extends AbilityFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Ability findFirstOrThrow
   */
  export type AbilityFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Ability
     */
    select?: AbilitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AbilityInclude | null
    /**
     * Filter, which Ability to fetch.
     */
    where?: AbilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Abilities to fetch.
     */
    orderBy?: Enumerable<AbilityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Abilities.
     */
    cursor?: AbilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Abilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Abilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Abilities.
     */
    distinct?: Enumerable<AbilityScalarFieldEnum>
  }


  /**
   * Ability findMany
   */
  export type AbilityFindManyArgs = {
    /**
     * Select specific fields to fetch from the Ability
     */
    select?: AbilitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AbilityInclude | null
    /**
     * Filter, which Abilities to fetch.
     */
    where?: AbilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Abilities to fetch.
     */
    orderBy?: Enumerable<AbilityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Abilities.
     */
    cursor?: AbilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Abilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Abilities.
     */
    skip?: number
    distinct?: Enumerable<AbilityScalarFieldEnum>
  }


  /**
   * Ability create
   */
  export type AbilityCreateArgs = {
    /**
     * Select specific fields to fetch from the Ability
     */
    select?: AbilitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AbilityInclude | null
    /**
     * The data needed to create a Ability.
     */
    data: XOR<AbilityCreateInput, AbilityUncheckedCreateInput>
  }


  /**
   * Ability createMany
   */
  export type AbilityCreateManyArgs = {
    /**
     * The data used to create many Abilities.
     */
    data: Enumerable<AbilityCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Ability update
   */
  export type AbilityUpdateArgs = {
    /**
     * Select specific fields to fetch from the Ability
     */
    select?: AbilitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AbilityInclude | null
    /**
     * The data needed to update a Ability.
     */
    data: XOR<AbilityUpdateInput, AbilityUncheckedUpdateInput>
    /**
     * Choose, which Ability to update.
     */
    where: AbilityWhereUniqueInput
  }


  /**
   * Ability updateMany
   */
  export type AbilityUpdateManyArgs = {
    /**
     * The data used to update Abilities.
     */
    data: XOR<AbilityUpdateManyMutationInput, AbilityUncheckedUpdateManyInput>
    /**
     * Filter which Abilities to update
     */
    where?: AbilityWhereInput
  }


  /**
   * Ability upsert
   */
  export type AbilityUpsertArgs = {
    /**
     * Select specific fields to fetch from the Ability
     */
    select?: AbilitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AbilityInclude | null
    /**
     * The filter to search for the Ability to update in case it exists.
     */
    where: AbilityWhereUniqueInput
    /**
     * In case the Ability found by the `where` argument doesn't exist, create a new Ability with this data.
     */
    create: XOR<AbilityCreateInput, AbilityUncheckedCreateInput>
    /**
     * In case the Ability was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AbilityUpdateInput, AbilityUncheckedUpdateInput>
  }


  /**
   * Ability delete
   */
  export type AbilityDeleteArgs = {
    /**
     * Select specific fields to fetch from the Ability
     */
    select?: AbilitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AbilityInclude | null
    /**
     * Filter which Ability to delete.
     */
    where: AbilityWhereUniqueInput
  }


  /**
   * Ability deleteMany
   */
  export type AbilityDeleteManyArgs = {
    /**
     * Filter which Abilities to delete
     */
    where?: AbilityWhereInput
  }


  /**
   * Ability without action
   */
  export type AbilityArgs = {
    /**
     * Select specific fields to fetch from the Ability
     */
    select?: AbilitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AbilityInclude | null
  }



  /**
   * Model Competence
   */


  export type AggregateCompetence = {
    _count: CompetenceCountAggregateOutputType | null
    _avg: CompetenceAvgAggregateOutputType | null
    _sum: CompetenceSumAggregateOutputType | null
    _min: CompetenceMinAggregateOutputType | null
    _max: CompetenceMaxAggregateOutputType | null
  }

  export type CompetenceAvgAggregateOutputType = {
    id: number | null
    effect: number | null
    cardId: number | null
  }

  export type CompetenceSumAggregateOutputType = {
    id: number | null
    effect: number | null
    cardId: number | null
  }

  export type CompetenceMinAggregateOutputType = {
    id: number | null
    name: string | null
    effect: number | null
    percent: boolean | null
    cardId: number | null
  }

  export type CompetenceMaxAggregateOutputType = {
    id: number | null
    name: string | null
    effect: number | null
    percent: boolean | null
    cardId: number | null
  }

  export type CompetenceCountAggregateOutputType = {
    id: number
    name: number
    effect: number
    percent: number
    cardId: number
    _all: number
  }


  export type CompetenceAvgAggregateInputType = {
    id?: true
    effect?: true
    cardId?: true
  }

  export type CompetenceSumAggregateInputType = {
    id?: true
    effect?: true
    cardId?: true
  }

  export type CompetenceMinAggregateInputType = {
    id?: true
    name?: true
    effect?: true
    percent?: true
    cardId?: true
  }

  export type CompetenceMaxAggregateInputType = {
    id?: true
    name?: true
    effect?: true
    percent?: true
    cardId?: true
  }

  export type CompetenceCountAggregateInputType = {
    id?: true
    name?: true
    effect?: true
    percent?: true
    cardId?: true
    _all?: true
  }

  export type CompetenceAggregateArgs = {
    /**
     * Filter which Competence to aggregate.
     */
    where?: CompetenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Competences to fetch.
     */
    orderBy?: Enumerable<CompetenceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompetenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Competences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Competences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Competences
    **/
    _count?: true | CompetenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompetenceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompetenceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompetenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompetenceMaxAggregateInputType
  }

  export type GetCompetenceAggregateType<T extends CompetenceAggregateArgs> = {
        [P in keyof T & keyof AggregateCompetence]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompetence[P]>
      : GetScalarType<T[P], AggregateCompetence[P]>
  }




  export type CompetenceGroupByArgs = {
    where?: CompetenceWhereInput
    orderBy?: Enumerable<CompetenceOrderByWithAggregationInput>
    by: CompetenceScalarFieldEnum[]
    having?: CompetenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompetenceCountAggregateInputType | true
    _avg?: CompetenceAvgAggregateInputType
    _sum?: CompetenceSumAggregateInputType
    _min?: CompetenceMinAggregateInputType
    _max?: CompetenceMaxAggregateInputType
  }


  export type CompetenceGroupByOutputType = {
    id: number
    name: string
    effect: number
    percent: boolean
    cardId: number | null
    _count: CompetenceCountAggregateOutputType | null
    _avg: CompetenceAvgAggregateOutputType | null
    _sum: CompetenceSumAggregateOutputType | null
    _min: CompetenceMinAggregateOutputType | null
    _max: CompetenceMaxAggregateOutputType | null
  }

  type GetCompetenceGroupByPayload<T extends CompetenceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CompetenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompetenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompetenceGroupByOutputType[P]>
            : GetScalarType<T[P], CompetenceGroupByOutputType[P]>
        }
      >
    >


  export type CompetenceSelect = {
    id?: boolean
    name?: boolean
    effect?: boolean
    percent?: boolean
    cardId?: boolean
    card?: boolean | CardArgs
  }


  export type CompetenceInclude = {
    card?: boolean | CardArgs
  }

  export type CompetenceGetPayload<S extends boolean | null | undefined | CompetenceArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Competence :
    S extends undefined ? never :
    S extends { include: any } & (CompetenceArgs | CompetenceFindManyArgs)
    ? Competence  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'card' ? CardGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (CompetenceArgs | CompetenceFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'card' ? CardGetPayload<S['select'][P]> | null :  P extends keyof Competence ? Competence[P] : never
  } 
      : Competence


  type CompetenceCountArgs = 
    Omit<CompetenceFindManyArgs, 'select' | 'include'> & {
      select?: CompetenceCountAggregateInputType | true
    }

  export interface CompetenceDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Competence that matches the filter.
     * @param {CompetenceFindUniqueArgs} args - Arguments to find a Competence
     * @example
     * // Get one Competence
     * const competence = await prisma.competence.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CompetenceFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CompetenceFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Competence'> extends True ? Prisma__CompetenceClient<CompetenceGetPayload<T>> : Prisma__CompetenceClient<CompetenceGetPayload<T> | null, null>

    /**
     * Find one Competence that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CompetenceFindUniqueOrThrowArgs} args - Arguments to find a Competence
     * @example
     * // Get one Competence
     * const competence = await prisma.competence.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CompetenceFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CompetenceFindUniqueOrThrowArgs>
    ): Prisma__CompetenceClient<CompetenceGetPayload<T>>

    /**
     * Find the first Competence that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetenceFindFirstArgs} args - Arguments to find a Competence
     * @example
     * // Get one Competence
     * const competence = await prisma.competence.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CompetenceFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CompetenceFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Competence'> extends True ? Prisma__CompetenceClient<CompetenceGetPayload<T>> : Prisma__CompetenceClient<CompetenceGetPayload<T> | null, null>

    /**
     * Find the first Competence that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetenceFindFirstOrThrowArgs} args - Arguments to find a Competence
     * @example
     * // Get one Competence
     * const competence = await prisma.competence.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CompetenceFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CompetenceFindFirstOrThrowArgs>
    ): Prisma__CompetenceClient<CompetenceGetPayload<T>>

    /**
     * Find zero or more Competences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetenceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Competences
     * const competences = await prisma.competence.findMany()
     * 
     * // Get first 10 Competences
     * const competences = await prisma.competence.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const competenceWithIdOnly = await prisma.competence.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CompetenceFindManyArgs>(
      args?: SelectSubset<T, CompetenceFindManyArgs>
    ): Prisma.PrismaPromise<Array<CompetenceGetPayload<T>>>

    /**
     * Create a Competence.
     * @param {CompetenceCreateArgs} args - Arguments to create a Competence.
     * @example
     * // Create one Competence
     * const Competence = await prisma.competence.create({
     *   data: {
     *     // ... data to create a Competence
     *   }
     * })
     * 
    **/
    create<T extends CompetenceCreateArgs>(
      args: SelectSubset<T, CompetenceCreateArgs>
    ): Prisma__CompetenceClient<CompetenceGetPayload<T>>

    /**
     * Create many Competences.
     *     @param {CompetenceCreateManyArgs} args - Arguments to create many Competences.
     *     @example
     *     // Create many Competences
     *     const competence = await prisma.competence.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CompetenceCreateManyArgs>(
      args?: SelectSubset<T, CompetenceCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Competence.
     * @param {CompetenceDeleteArgs} args - Arguments to delete one Competence.
     * @example
     * // Delete one Competence
     * const Competence = await prisma.competence.delete({
     *   where: {
     *     // ... filter to delete one Competence
     *   }
     * })
     * 
    **/
    delete<T extends CompetenceDeleteArgs>(
      args: SelectSubset<T, CompetenceDeleteArgs>
    ): Prisma__CompetenceClient<CompetenceGetPayload<T>>

    /**
     * Update one Competence.
     * @param {CompetenceUpdateArgs} args - Arguments to update one Competence.
     * @example
     * // Update one Competence
     * const competence = await prisma.competence.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CompetenceUpdateArgs>(
      args: SelectSubset<T, CompetenceUpdateArgs>
    ): Prisma__CompetenceClient<CompetenceGetPayload<T>>

    /**
     * Delete zero or more Competences.
     * @param {CompetenceDeleteManyArgs} args - Arguments to filter Competences to delete.
     * @example
     * // Delete a few Competences
     * const { count } = await prisma.competence.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CompetenceDeleteManyArgs>(
      args?: SelectSubset<T, CompetenceDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Competences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Competences
     * const competence = await prisma.competence.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CompetenceUpdateManyArgs>(
      args: SelectSubset<T, CompetenceUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Competence.
     * @param {CompetenceUpsertArgs} args - Arguments to update or create a Competence.
     * @example
     * // Update or create a Competence
     * const competence = await prisma.competence.upsert({
     *   create: {
     *     // ... data to create a Competence
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Competence we want to update
     *   }
     * })
    **/
    upsert<T extends CompetenceUpsertArgs>(
      args: SelectSubset<T, CompetenceUpsertArgs>
    ): Prisma__CompetenceClient<CompetenceGetPayload<T>>

    /**
     * Count the number of Competences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetenceCountArgs} args - Arguments to filter Competences to count.
     * @example
     * // Count the number of Competences
     * const count = await prisma.competence.count({
     *   where: {
     *     // ... the filter for the Competences we want to count
     *   }
     * })
    **/
    count<T extends CompetenceCountArgs>(
      args?: Subset<T, CompetenceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompetenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Competence.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompetenceAggregateArgs>(args: Subset<T, CompetenceAggregateArgs>): Prisma.PrismaPromise<GetCompetenceAggregateType<T>>

    /**
     * Group by Competence.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompetenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompetenceGroupByArgs['orderBy'] }
        : { orderBy?: CompetenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompetenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompetenceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Competence.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CompetenceClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    card<T extends CardArgs= {}>(args?: Subset<T, CardArgs>): Prisma__CardClient<CardGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Competence base type for findUnique actions
   */
  export type CompetenceFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompetenceInclude | null
    /**
     * Filter, which Competence to fetch.
     */
    where: CompetenceWhereUniqueInput
  }

  /**
   * Competence findUnique
   */
  export interface CompetenceFindUniqueArgs extends CompetenceFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Competence findUniqueOrThrow
   */
  export type CompetenceFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompetenceInclude | null
    /**
     * Filter, which Competence to fetch.
     */
    where: CompetenceWhereUniqueInput
  }


  /**
   * Competence base type for findFirst actions
   */
  export type CompetenceFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompetenceInclude | null
    /**
     * Filter, which Competence to fetch.
     */
    where?: CompetenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Competences to fetch.
     */
    orderBy?: Enumerable<CompetenceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Competences.
     */
    cursor?: CompetenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Competences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Competences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Competences.
     */
    distinct?: Enumerable<CompetenceScalarFieldEnum>
  }

  /**
   * Competence findFirst
   */
  export interface CompetenceFindFirstArgs extends CompetenceFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Competence findFirstOrThrow
   */
  export type CompetenceFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompetenceInclude | null
    /**
     * Filter, which Competence to fetch.
     */
    where?: CompetenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Competences to fetch.
     */
    orderBy?: Enumerable<CompetenceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Competences.
     */
    cursor?: CompetenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Competences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Competences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Competences.
     */
    distinct?: Enumerable<CompetenceScalarFieldEnum>
  }


  /**
   * Competence findMany
   */
  export type CompetenceFindManyArgs = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompetenceInclude | null
    /**
     * Filter, which Competences to fetch.
     */
    where?: CompetenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Competences to fetch.
     */
    orderBy?: Enumerable<CompetenceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Competences.
     */
    cursor?: CompetenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Competences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Competences.
     */
    skip?: number
    distinct?: Enumerable<CompetenceScalarFieldEnum>
  }


  /**
   * Competence create
   */
  export type CompetenceCreateArgs = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompetenceInclude | null
    /**
     * The data needed to create a Competence.
     */
    data: XOR<CompetenceCreateInput, CompetenceUncheckedCreateInput>
  }


  /**
   * Competence createMany
   */
  export type CompetenceCreateManyArgs = {
    /**
     * The data used to create many Competences.
     */
    data: Enumerable<CompetenceCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Competence update
   */
  export type CompetenceUpdateArgs = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompetenceInclude | null
    /**
     * The data needed to update a Competence.
     */
    data: XOR<CompetenceUpdateInput, CompetenceUncheckedUpdateInput>
    /**
     * Choose, which Competence to update.
     */
    where: CompetenceWhereUniqueInput
  }


  /**
   * Competence updateMany
   */
  export type CompetenceUpdateManyArgs = {
    /**
     * The data used to update Competences.
     */
    data: XOR<CompetenceUpdateManyMutationInput, CompetenceUncheckedUpdateManyInput>
    /**
     * Filter which Competences to update
     */
    where?: CompetenceWhereInput
  }


  /**
   * Competence upsert
   */
  export type CompetenceUpsertArgs = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompetenceInclude | null
    /**
     * The filter to search for the Competence to update in case it exists.
     */
    where: CompetenceWhereUniqueInput
    /**
     * In case the Competence found by the `where` argument doesn't exist, create a new Competence with this data.
     */
    create: XOR<CompetenceCreateInput, CompetenceUncheckedCreateInput>
    /**
     * In case the Competence was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompetenceUpdateInput, CompetenceUncheckedUpdateInput>
  }


  /**
   * Competence delete
   */
  export type CompetenceDeleteArgs = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompetenceInclude | null
    /**
     * Filter which Competence to delete.
     */
    where: CompetenceWhereUniqueInput
  }


  /**
   * Competence deleteMany
   */
  export type CompetenceDeleteManyArgs = {
    /**
     * Filter which Competences to delete
     */
    where?: CompetenceWhereInput
  }


  /**
   * Competence without action
   */
  export type CompetenceArgs = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompetenceInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const AbilityScalarFieldEnum: {
    id: 'id',
    name: 'name',
    cost: 'cost',
    cardId: 'cardId'
  };

  export type AbilityScalarFieldEnum = (typeof AbilityScalarFieldEnum)[keyof typeof AbilityScalarFieldEnum]


  export const CardScalarFieldEnum: {
    id: 'id',
    name: 'name',
    illustration: 'illustration',
    typeId: 'typeId',
    classId: 'classId',
    power: 'power',
    color: 'color',
    description: 'description'
  };

  export type CardScalarFieldEnum = (typeof CardScalarFieldEnum)[keyof typeof CardScalarFieldEnum]


  export const ClassScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type ClassScalarFieldEnum = (typeof ClassScalarFieldEnum)[keyof typeof ClassScalarFieldEnum]


  export const CompetenceScalarFieldEnum: {
    id: 'id',
    name: 'name',
    effect: 'effect',
    percent: 'percent',
    cardId: 'cardId'
  };

  export type CompetenceScalarFieldEnum = (typeof CompetenceScalarFieldEnum)[keyof typeof CompetenceScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const TypeScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type TypeScalarFieldEnum = (typeof TypeScalarFieldEnum)[keyof typeof TypeScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type CardWhereInput = {
    AND?: Enumerable<CardWhereInput>
    OR?: Enumerable<CardWhereInput>
    NOT?: Enumerable<CardWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    illustration?: StringFilter | string
    typeId?: IntNullableFilter | number | null
    classId?: IntNullableFilter | number | null
    power?: IntFilter | number
    color?: StringFilter | string
    description?: StringFilter | string
    type?: XOR<TypeRelationFilter, TypeWhereInput> | null
    class?: XOR<ClassRelationFilter, ClassWhereInput> | null
    Ability?: AbilityListRelationFilter
    Competence?: CompetenceListRelationFilter
  }

  export type CardOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    illustration?: SortOrder
    typeId?: SortOrder
    classId?: SortOrder
    power?: SortOrder
    color?: SortOrder
    description?: SortOrder
    type?: TypeOrderByWithRelationInput
    class?: ClassOrderByWithRelationInput
    Ability?: AbilityOrderByRelationAggregateInput
    Competence?: CompetenceOrderByRelationAggregateInput
  }

  export type CardWhereUniqueInput = {
    id?: number
  }

  export type CardOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    illustration?: SortOrder
    typeId?: SortOrder
    classId?: SortOrder
    power?: SortOrder
    color?: SortOrder
    description?: SortOrder
    _count?: CardCountOrderByAggregateInput
    _avg?: CardAvgOrderByAggregateInput
    _max?: CardMaxOrderByAggregateInput
    _min?: CardMinOrderByAggregateInput
    _sum?: CardSumOrderByAggregateInput
  }

  export type CardScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CardScalarWhereWithAggregatesInput>
    OR?: Enumerable<CardScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CardScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    illustration?: StringWithAggregatesFilter | string
    typeId?: IntNullableWithAggregatesFilter | number | null
    classId?: IntNullableWithAggregatesFilter | number | null
    power?: IntWithAggregatesFilter | number
    color?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
  }

  export type TypeWhereInput = {
    AND?: Enumerable<TypeWhereInput>
    OR?: Enumerable<TypeWhereInput>
    NOT?: Enumerable<TypeWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    Card?: CardListRelationFilter
  }

  export type TypeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    Card?: CardOrderByRelationAggregateInput
  }

  export type TypeWhereUniqueInput = {
    id?: number
  }

  export type TypeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: TypeCountOrderByAggregateInput
    _avg?: TypeAvgOrderByAggregateInput
    _max?: TypeMaxOrderByAggregateInput
    _min?: TypeMinOrderByAggregateInput
    _sum?: TypeSumOrderByAggregateInput
  }

  export type TypeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TypeScalarWhereWithAggregatesInput>
    OR?: Enumerable<TypeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TypeScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
  }

  export type ClassWhereInput = {
    AND?: Enumerable<ClassWhereInput>
    OR?: Enumerable<ClassWhereInput>
    NOT?: Enumerable<ClassWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    Card?: CardListRelationFilter
  }

  export type ClassOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    Card?: CardOrderByRelationAggregateInput
  }

  export type ClassWhereUniqueInput = {
    id?: number
  }

  export type ClassOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: ClassCountOrderByAggregateInput
    _avg?: ClassAvgOrderByAggregateInput
    _max?: ClassMaxOrderByAggregateInput
    _min?: ClassMinOrderByAggregateInput
    _sum?: ClassSumOrderByAggregateInput
  }

  export type ClassScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ClassScalarWhereWithAggregatesInput>
    OR?: Enumerable<ClassScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ClassScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
  }

  export type AbilityWhereInput = {
    AND?: Enumerable<AbilityWhereInput>
    OR?: Enumerable<AbilityWhereInput>
    NOT?: Enumerable<AbilityWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    cost?: IntFilter | number
    cardId?: IntNullableFilter | number | null
    card?: XOR<CardRelationFilter, CardWhereInput> | null
  }

  export type AbilityOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    cost?: SortOrder
    cardId?: SortOrder
    card?: CardOrderByWithRelationInput
  }

  export type AbilityWhereUniqueInput = {
    id?: number
  }

  export type AbilityOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    cost?: SortOrder
    cardId?: SortOrder
    _count?: AbilityCountOrderByAggregateInput
    _avg?: AbilityAvgOrderByAggregateInput
    _max?: AbilityMaxOrderByAggregateInput
    _min?: AbilityMinOrderByAggregateInput
    _sum?: AbilitySumOrderByAggregateInput
  }

  export type AbilityScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AbilityScalarWhereWithAggregatesInput>
    OR?: Enumerable<AbilityScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AbilityScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    cost?: IntWithAggregatesFilter | number
    cardId?: IntNullableWithAggregatesFilter | number | null
  }

  export type CompetenceWhereInput = {
    AND?: Enumerable<CompetenceWhereInput>
    OR?: Enumerable<CompetenceWhereInput>
    NOT?: Enumerable<CompetenceWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    effect?: IntFilter | number
    percent?: BoolFilter | boolean
    cardId?: IntNullableFilter | number | null
    card?: XOR<CardRelationFilter, CardWhereInput> | null
  }

  export type CompetenceOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    effect?: SortOrder
    percent?: SortOrder
    cardId?: SortOrder
    card?: CardOrderByWithRelationInput
  }

  export type CompetenceWhereUniqueInput = {
    id?: number
  }

  export type CompetenceOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    effect?: SortOrder
    percent?: SortOrder
    cardId?: SortOrder
    _count?: CompetenceCountOrderByAggregateInput
    _avg?: CompetenceAvgOrderByAggregateInput
    _max?: CompetenceMaxOrderByAggregateInput
    _min?: CompetenceMinOrderByAggregateInput
    _sum?: CompetenceSumOrderByAggregateInput
  }

  export type CompetenceScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CompetenceScalarWhereWithAggregatesInput>
    OR?: Enumerable<CompetenceScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CompetenceScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    effect?: IntWithAggregatesFilter | number
    percent?: BoolWithAggregatesFilter | boolean
    cardId?: IntNullableWithAggregatesFilter | number | null
  }

  export type CardCreateInput = {
    name: string
    illustration: string
    power: number
    color: string
    description: string
    type?: TypeCreateNestedOneWithoutCardInput
    class?: ClassCreateNestedOneWithoutCardInput
    Ability?: AbilityCreateNestedManyWithoutCardInput
    Competence?: CompetenceCreateNestedManyWithoutCardInput
  }

  export type CardUncheckedCreateInput = {
    id?: number
    name: string
    illustration: string
    typeId?: number | null
    classId?: number | null
    power: number
    color: string
    description: string
    Ability?: AbilityUncheckedCreateNestedManyWithoutCardInput
    Competence?: CompetenceUncheckedCreateNestedManyWithoutCardInput
  }

  export type CardUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    illustration?: StringFieldUpdateOperationsInput | string
    power?: IntFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: TypeUpdateOneWithoutCardNestedInput
    class?: ClassUpdateOneWithoutCardNestedInput
    Ability?: AbilityUpdateManyWithoutCardNestedInput
    Competence?: CompetenceUpdateManyWithoutCardNestedInput
  }

  export type CardUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    illustration?: StringFieldUpdateOperationsInput | string
    typeId?: NullableIntFieldUpdateOperationsInput | number | null
    classId?: NullableIntFieldUpdateOperationsInput | number | null
    power?: IntFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    Ability?: AbilityUncheckedUpdateManyWithoutCardNestedInput
    Competence?: CompetenceUncheckedUpdateManyWithoutCardNestedInput
  }

  export type CardCreateManyInput = {
    id?: number
    name: string
    illustration: string
    typeId?: number | null
    classId?: number | null
    power: number
    color: string
    description: string
  }

  export type CardUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    illustration?: StringFieldUpdateOperationsInput | string
    power?: IntFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type CardUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    illustration?: StringFieldUpdateOperationsInput | string
    typeId?: NullableIntFieldUpdateOperationsInput | number | null
    classId?: NullableIntFieldUpdateOperationsInput | number | null
    power?: IntFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type TypeCreateInput = {
    name: string
    Card?: CardCreateNestedManyWithoutTypeInput
  }

  export type TypeUncheckedCreateInput = {
    id?: number
    name: string
    Card?: CardUncheckedCreateNestedManyWithoutTypeInput
  }

  export type TypeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    Card?: CardUpdateManyWithoutTypeNestedInput
  }

  export type TypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    Card?: CardUncheckedUpdateManyWithoutTypeNestedInput
  }

  export type TypeCreateManyInput = {
    id?: number
    name: string
  }

  export type TypeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ClassCreateInput = {
    name: string
    Card?: CardCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateInput = {
    id?: number
    name: string
    Card?: CardUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    Card?: CardUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    Card?: CardUncheckedUpdateManyWithoutClassNestedInput
  }

  export type ClassCreateManyInput = {
    id?: number
    name: string
  }

  export type ClassUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ClassUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type AbilityCreateInput = {
    name: string
    cost: number
    card?: CardCreateNestedOneWithoutAbilityInput
  }

  export type AbilityUncheckedCreateInput = {
    id?: number
    name: string
    cost: number
    cardId?: number | null
  }

  export type AbilityUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    cost?: IntFieldUpdateOperationsInput | number
    card?: CardUpdateOneWithoutAbilityNestedInput
  }

  export type AbilityUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cost?: IntFieldUpdateOperationsInput | number
    cardId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AbilityCreateManyInput = {
    id?: number
    name: string
    cost: number
    cardId?: number | null
  }

  export type AbilityUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    cost?: IntFieldUpdateOperationsInput | number
  }

  export type AbilityUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cost?: IntFieldUpdateOperationsInput | number
    cardId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CompetenceCreateInput = {
    name: string
    effect: number
    percent: boolean
    card?: CardCreateNestedOneWithoutCompetenceInput
  }

  export type CompetenceUncheckedCreateInput = {
    id?: number
    name: string
    effect: number
    percent: boolean
    cardId?: number | null
  }

  export type CompetenceUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    effect?: IntFieldUpdateOperationsInput | number
    percent?: BoolFieldUpdateOperationsInput | boolean
    card?: CardUpdateOneWithoutCompetenceNestedInput
  }

  export type CompetenceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    effect?: IntFieldUpdateOperationsInput | number
    percent?: BoolFieldUpdateOperationsInput | boolean
    cardId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CompetenceCreateManyInput = {
    id?: number
    name: string
    effect: number
    percent: boolean
    cardId?: number | null
  }

  export type CompetenceUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    effect?: IntFieldUpdateOperationsInput | number
    percent?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CompetenceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    effect?: IntFieldUpdateOperationsInput | number
    percent?: BoolFieldUpdateOperationsInput | boolean
    cardId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type TypeRelationFilter = {
    is?: TypeWhereInput | null
    isNot?: TypeWhereInput | null
  }

  export type ClassRelationFilter = {
    is?: ClassWhereInput | null
    isNot?: ClassWhereInput | null
  }

  export type AbilityListRelationFilter = {
    every?: AbilityWhereInput
    some?: AbilityWhereInput
    none?: AbilityWhereInput
  }

  export type CompetenceListRelationFilter = {
    every?: CompetenceWhereInput
    some?: CompetenceWhereInput
    none?: CompetenceWhereInput
  }

  export type AbilityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompetenceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CardCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    illustration?: SortOrder
    typeId?: SortOrder
    classId?: SortOrder
    power?: SortOrder
    color?: SortOrder
    description?: SortOrder
  }

  export type CardAvgOrderByAggregateInput = {
    id?: SortOrder
    typeId?: SortOrder
    classId?: SortOrder
    power?: SortOrder
  }

  export type CardMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    illustration?: SortOrder
    typeId?: SortOrder
    classId?: SortOrder
    power?: SortOrder
    color?: SortOrder
    description?: SortOrder
  }

  export type CardMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    illustration?: SortOrder
    typeId?: SortOrder
    classId?: SortOrder
    power?: SortOrder
    color?: SortOrder
    description?: SortOrder
  }

  export type CardSumOrderByAggregateInput = {
    id?: SortOrder
    typeId?: SortOrder
    classId?: SortOrder
    power?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type CardListRelationFilter = {
    every?: CardWhereInput
    some?: CardWhereInput
    none?: CardWhereInput
  }

  export type CardOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TypeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TypeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TypeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TypeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TypeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ClassCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ClassAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ClassMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ClassMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ClassSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CardRelationFilter = {
    is?: CardWhereInput | null
    isNot?: CardWhereInput | null
  }

  export type AbilityCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    cost?: SortOrder
    cardId?: SortOrder
  }

  export type AbilityAvgOrderByAggregateInput = {
    id?: SortOrder
    cost?: SortOrder
    cardId?: SortOrder
  }

  export type AbilityMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    cost?: SortOrder
    cardId?: SortOrder
  }

  export type AbilityMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    cost?: SortOrder
    cardId?: SortOrder
  }

  export type AbilitySumOrderByAggregateInput = {
    id?: SortOrder
    cost?: SortOrder
    cardId?: SortOrder
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type CompetenceCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    effect?: SortOrder
    percent?: SortOrder
    cardId?: SortOrder
  }

  export type CompetenceAvgOrderByAggregateInput = {
    id?: SortOrder
    effect?: SortOrder
    cardId?: SortOrder
  }

  export type CompetenceMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    effect?: SortOrder
    percent?: SortOrder
    cardId?: SortOrder
  }

  export type CompetenceMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    effect?: SortOrder
    percent?: SortOrder
    cardId?: SortOrder
  }

  export type CompetenceSumOrderByAggregateInput = {
    id?: SortOrder
    effect?: SortOrder
    cardId?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type TypeCreateNestedOneWithoutCardInput = {
    create?: XOR<TypeCreateWithoutCardInput, TypeUncheckedCreateWithoutCardInput>
    connectOrCreate?: TypeCreateOrConnectWithoutCardInput
    connect?: TypeWhereUniqueInput
  }

  export type ClassCreateNestedOneWithoutCardInput = {
    create?: XOR<ClassCreateWithoutCardInput, ClassUncheckedCreateWithoutCardInput>
    connectOrCreate?: ClassCreateOrConnectWithoutCardInput
    connect?: ClassWhereUniqueInput
  }

  export type AbilityCreateNestedManyWithoutCardInput = {
    create?: XOR<Enumerable<AbilityCreateWithoutCardInput>, Enumerable<AbilityUncheckedCreateWithoutCardInput>>
    connectOrCreate?: Enumerable<AbilityCreateOrConnectWithoutCardInput>
    createMany?: AbilityCreateManyCardInputEnvelope
    connect?: Enumerable<AbilityWhereUniqueInput>
  }

  export type CompetenceCreateNestedManyWithoutCardInput = {
    create?: XOR<Enumerable<CompetenceCreateWithoutCardInput>, Enumerable<CompetenceUncheckedCreateWithoutCardInput>>
    connectOrCreate?: Enumerable<CompetenceCreateOrConnectWithoutCardInput>
    createMany?: CompetenceCreateManyCardInputEnvelope
    connect?: Enumerable<CompetenceWhereUniqueInput>
  }

  export type AbilityUncheckedCreateNestedManyWithoutCardInput = {
    create?: XOR<Enumerable<AbilityCreateWithoutCardInput>, Enumerable<AbilityUncheckedCreateWithoutCardInput>>
    connectOrCreate?: Enumerable<AbilityCreateOrConnectWithoutCardInput>
    createMany?: AbilityCreateManyCardInputEnvelope
    connect?: Enumerable<AbilityWhereUniqueInput>
  }

  export type CompetenceUncheckedCreateNestedManyWithoutCardInput = {
    create?: XOR<Enumerable<CompetenceCreateWithoutCardInput>, Enumerable<CompetenceUncheckedCreateWithoutCardInput>>
    connectOrCreate?: Enumerable<CompetenceCreateOrConnectWithoutCardInput>
    createMany?: CompetenceCreateManyCardInputEnvelope
    connect?: Enumerable<CompetenceWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TypeUpdateOneWithoutCardNestedInput = {
    create?: XOR<TypeCreateWithoutCardInput, TypeUncheckedCreateWithoutCardInput>
    connectOrCreate?: TypeCreateOrConnectWithoutCardInput
    upsert?: TypeUpsertWithoutCardInput
    disconnect?: boolean
    delete?: boolean
    connect?: TypeWhereUniqueInput
    update?: XOR<TypeUpdateWithoutCardInput, TypeUncheckedUpdateWithoutCardInput>
  }

  export type ClassUpdateOneWithoutCardNestedInput = {
    create?: XOR<ClassCreateWithoutCardInput, ClassUncheckedCreateWithoutCardInput>
    connectOrCreate?: ClassCreateOrConnectWithoutCardInput
    upsert?: ClassUpsertWithoutCardInput
    disconnect?: boolean
    delete?: boolean
    connect?: ClassWhereUniqueInput
    update?: XOR<ClassUpdateWithoutCardInput, ClassUncheckedUpdateWithoutCardInput>
  }

  export type AbilityUpdateManyWithoutCardNestedInput = {
    create?: XOR<Enumerable<AbilityCreateWithoutCardInput>, Enumerable<AbilityUncheckedCreateWithoutCardInput>>
    connectOrCreate?: Enumerable<AbilityCreateOrConnectWithoutCardInput>
    upsert?: Enumerable<AbilityUpsertWithWhereUniqueWithoutCardInput>
    createMany?: AbilityCreateManyCardInputEnvelope
    set?: Enumerable<AbilityWhereUniqueInput>
    disconnect?: Enumerable<AbilityWhereUniqueInput>
    delete?: Enumerable<AbilityWhereUniqueInput>
    connect?: Enumerable<AbilityWhereUniqueInput>
    update?: Enumerable<AbilityUpdateWithWhereUniqueWithoutCardInput>
    updateMany?: Enumerable<AbilityUpdateManyWithWhereWithoutCardInput>
    deleteMany?: Enumerable<AbilityScalarWhereInput>
  }

  export type CompetenceUpdateManyWithoutCardNestedInput = {
    create?: XOR<Enumerable<CompetenceCreateWithoutCardInput>, Enumerable<CompetenceUncheckedCreateWithoutCardInput>>
    connectOrCreate?: Enumerable<CompetenceCreateOrConnectWithoutCardInput>
    upsert?: Enumerable<CompetenceUpsertWithWhereUniqueWithoutCardInput>
    createMany?: CompetenceCreateManyCardInputEnvelope
    set?: Enumerable<CompetenceWhereUniqueInput>
    disconnect?: Enumerable<CompetenceWhereUniqueInput>
    delete?: Enumerable<CompetenceWhereUniqueInput>
    connect?: Enumerable<CompetenceWhereUniqueInput>
    update?: Enumerable<CompetenceUpdateWithWhereUniqueWithoutCardInput>
    updateMany?: Enumerable<CompetenceUpdateManyWithWhereWithoutCardInput>
    deleteMany?: Enumerable<CompetenceScalarWhereInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AbilityUncheckedUpdateManyWithoutCardNestedInput = {
    create?: XOR<Enumerable<AbilityCreateWithoutCardInput>, Enumerable<AbilityUncheckedCreateWithoutCardInput>>
    connectOrCreate?: Enumerable<AbilityCreateOrConnectWithoutCardInput>
    upsert?: Enumerable<AbilityUpsertWithWhereUniqueWithoutCardInput>
    createMany?: AbilityCreateManyCardInputEnvelope
    set?: Enumerable<AbilityWhereUniqueInput>
    disconnect?: Enumerable<AbilityWhereUniqueInput>
    delete?: Enumerable<AbilityWhereUniqueInput>
    connect?: Enumerable<AbilityWhereUniqueInput>
    update?: Enumerable<AbilityUpdateWithWhereUniqueWithoutCardInput>
    updateMany?: Enumerable<AbilityUpdateManyWithWhereWithoutCardInput>
    deleteMany?: Enumerable<AbilityScalarWhereInput>
  }

  export type CompetenceUncheckedUpdateManyWithoutCardNestedInput = {
    create?: XOR<Enumerable<CompetenceCreateWithoutCardInput>, Enumerable<CompetenceUncheckedCreateWithoutCardInput>>
    connectOrCreate?: Enumerable<CompetenceCreateOrConnectWithoutCardInput>
    upsert?: Enumerable<CompetenceUpsertWithWhereUniqueWithoutCardInput>
    createMany?: CompetenceCreateManyCardInputEnvelope
    set?: Enumerable<CompetenceWhereUniqueInput>
    disconnect?: Enumerable<CompetenceWhereUniqueInput>
    delete?: Enumerable<CompetenceWhereUniqueInput>
    connect?: Enumerable<CompetenceWhereUniqueInput>
    update?: Enumerable<CompetenceUpdateWithWhereUniqueWithoutCardInput>
    updateMany?: Enumerable<CompetenceUpdateManyWithWhereWithoutCardInput>
    deleteMany?: Enumerable<CompetenceScalarWhereInput>
  }

  export type CardCreateNestedManyWithoutTypeInput = {
    create?: XOR<Enumerable<CardCreateWithoutTypeInput>, Enumerable<CardUncheckedCreateWithoutTypeInput>>
    connectOrCreate?: Enumerable<CardCreateOrConnectWithoutTypeInput>
    createMany?: CardCreateManyTypeInputEnvelope
    connect?: Enumerable<CardWhereUniqueInput>
  }

  export type CardUncheckedCreateNestedManyWithoutTypeInput = {
    create?: XOR<Enumerable<CardCreateWithoutTypeInput>, Enumerable<CardUncheckedCreateWithoutTypeInput>>
    connectOrCreate?: Enumerable<CardCreateOrConnectWithoutTypeInput>
    createMany?: CardCreateManyTypeInputEnvelope
    connect?: Enumerable<CardWhereUniqueInput>
  }

  export type CardUpdateManyWithoutTypeNestedInput = {
    create?: XOR<Enumerable<CardCreateWithoutTypeInput>, Enumerable<CardUncheckedCreateWithoutTypeInput>>
    connectOrCreate?: Enumerable<CardCreateOrConnectWithoutTypeInput>
    upsert?: Enumerable<CardUpsertWithWhereUniqueWithoutTypeInput>
    createMany?: CardCreateManyTypeInputEnvelope
    set?: Enumerable<CardWhereUniqueInput>
    disconnect?: Enumerable<CardWhereUniqueInput>
    delete?: Enumerable<CardWhereUniqueInput>
    connect?: Enumerable<CardWhereUniqueInput>
    update?: Enumerable<CardUpdateWithWhereUniqueWithoutTypeInput>
    updateMany?: Enumerable<CardUpdateManyWithWhereWithoutTypeInput>
    deleteMany?: Enumerable<CardScalarWhereInput>
  }

  export type CardUncheckedUpdateManyWithoutTypeNestedInput = {
    create?: XOR<Enumerable<CardCreateWithoutTypeInput>, Enumerable<CardUncheckedCreateWithoutTypeInput>>
    connectOrCreate?: Enumerable<CardCreateOrConnectWithoutTypeInput>
    upsert?: Enumerable<CardUpsertWithWhereUniqueWithoutTypeInput>
    createMany?: CardCreateManyTypeInputEnvelope
    set?: Enumerable<CardWhereUniqueInput>
    disconnect?: Enumerable<CardWhereUniqueInput>
    delete?: Enumerable<CardWhereUniqueInput>
    connect?: Enumerable<CardWhereUniqueInput>
    update?: Enumerable<CardUpdateWithWhereUniqueWithoutTypeInput>
    updateMany?: Enumerable<CardUpdateManyWithWhereWithoutTypeInput>
    deleteMany?: Enumerable<CardScalarWhereInput>
  }

  export type CardCreateNestedManyWithoutClassInput = {
    create?: XOR<Enumerable<CardCreateWithoutClassInput>, Enumerable<CardUncheckedCreateWithoutClassInput>>
    connectOrCreate?: Enumerable<CardCreateOrConnectWithoutClassInput>
    createMany?: CardCreateManyClassInputEnvelope
    connect?: Enumerable<CardWhereUniqueInput>
  }

  export type CardUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<Enumerable<CardCreateWithoutClassInput>, Enumerable<CardUncheckedCreateWithoutClassInput>>
    connectOrCreate?: Enumerable<CardCreateOrConnectWithoutClassInput>
    createMany?: CardCreateManyClassInputEnvelope
    connect?: Enumerable<CardWhereUniqueInput>
  }

  export type CardUpdateManyWithoutClassNestedInput = {
    create?: XOR<Enumerable<CardCreateWithoutClassInput>, Enumerable<CardUncheckedCreateWithoutClassInput>>
    connectOrCreate?: Enumerable<CardCreateOrConnectWithoutClassInput>
    upsert?: Enumerable<CardUpsertWithWhereUniqueWithoutClassInput>
    createMany?: CardCreateManyClassInputEnvelope
    set?: Enumerable<CardWhereUniqueInput>
    disconnect?: Enumerable<CardWhereUniqueInput>
    delete?: Enumerable<CardWhereUniqueInput>
    connect?: Enumerable<CardWhereUniqueInput>
    update?: Enumerable<CardUpdateWithWhereUniqueWithoutClassInput>
    updateMany?: Enumerable<CardUpdateManyWithWhereWithoutClassInput>
    deleteMany?: Enumerable<CardScalarWhereInput>
  }

  export type CardUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<Enumerable<CardCreateWithoutClassInput>, Enumerable<CardUncheckedCreateWithoutClassInput>>
    connectOrCreate?: Enumerable<CardCreateOrConnectWithoutClassInput>
    upsert?: Enumerable<CardUpsertWithWhereUniqueWithoutClassInput>
    createMany?: CardCreateManyClassInputEnvelope
    set?: Enumerable<CardWhereUniqueInput>
    disconnect?: Enumerable<CardWhereUniqueInput>
    delete?: Enumerable<CardWhereUniqueInput>
    connect?: Enumerable<CardWhereUniqueInput>
    update?: Enumerable<CardUpdateWithWhereUniqueWithoutClassInput>
    updateMany?: Enumerable<CardUpdateManyWithWhereWithoutClassInput>
    deleteMany?: Enumerable<CardScalarWhereInput>
  }

  export type CardCreateNestedOneWithoutAbilityInput = {
    create?: XOR<CardCreateWithoutAbilityInput, CardUncheckedCreateWithoutAbilityInput>
    connectOrCreate?: CardCreateOrConnectWithoutAbilityInput
    connect?: CardWhereUniqueInput
  }

  export type CardUpdateOneWithoutAbilityNestedInput = {
    create?: XOR<CardCreateWithoutAbilityInput, CardUncheckedCreateWithoutAbilityInput>
    connectOrCreate?: CardCreateOrConnectWithoutAbilityInput
    upsert?: CardUpsertWithoutAbilityInput
    disconnect?: boolean
    delete?: boolean
    connect?: CardWhereUniqueInput
    update?: XOR<CardUpdateWithoutAbilityInput, CardUncheckedUpdateWithoutAbilityInput>
  }

  export type CardCreateNestedOneWithoutCompetenceInput = {
    create?: XOR<CardCreateWithoutCompetenceInput, CardUncheckedCreateWithoutCompetenceInput>
    connectOrCreate?: CardCreateOrConnectWithoutCompetenceInput
    connect?: CardWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type CardUpdateOneWithoutCompetenceNestedInput = {
    create?: XOR<CardCreateWithoutCompetenceInput, CardUncheckedCreateWithoutCompetenceInput>
    connectOrCreate?: CardCreateOrConnectWithoutCompetenceInput
    upsert?: CardUpsertWithoutCompetenceInput
    disconnect?: boolean
    delete?: boolean
    connect?: CardWhereUniqueInput
    update?: XOR<CardUpdateWithoutCompetenceInput, CardUncheckedUpdateWithoutCompetenceInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type TypeCreateWithoutCardInput = {
    name: string
  }

  export type TypeUncheckedCreateWithoutCardInput = {
    id?: number
    name: string
  }

  export type TypeCreateOrConnectWithoutCardInput = {
    where: TypeWhereUniqueInput
    create: XOR<TypeCreateWithoutCardInput, TypeUncheckedCreateWithoutCardInput>
  }

  export type ClassCreateWithoutCardInput = {
    name: string
  }

  export type ClassUncheckedCreateWithoutCardInput = {
    id?: number
    name: string
  }

  export type ClassCreateOrConnectWithoutCardInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutCardInput, ClassUncheckedCreateWithoutCardInput>
  }

  export type AbilityCreateWithoutCardInput = {
    name: string
    cost: number
  }

  export type AbilityUncheckedCreateWithoutCardInput = {
    id?: number
    name: string
    cost: number
  }

  export type AbilityCreateOrConnectWithoutCardInput = {
    where: AbilityWhereUniqueInput
    create: XOR<AbilityCreateWithoutCardInput, AbilityUncheckedCreateWithoutCardInput>
  }

  export type AbilityCreateManyCardInputEnvelope = {
    data: Enumerable<AbilityCreateManyCardInput>
    skipDuplicates?: boolean
  }

  export type CompetenceCreateWithoutCardInput = {
    name: string
    effect: number
    percent: boolean
  }

  export type CompetenceUncheckedCreateWithoutCardInput = {
    id?: number
    name: string
    effect: number
    percent: boolean
  }

  export type CompetenceCreateOrConnectWithoutCardInput = {
    where: CompetenceWhereUniqueInput
    create: XOR<CompetenceCreateWithoutCardInput, CompetenceUncheckedCreateWithoutCardInput>
  }

  export type CompetenceCreateManyCardInputEnvelope = {
    data: Enumerable<CompetenceCreateManyCardInput>
    skipDuplicates?: boolean
  }

  export type TypeUpsertWithoutCardInput = {
    update: XOR<TypeUpdateWithoutCardInput, TypeUncheckedUpdateWithoutCardInput>
    create: XOR<TypeCreateWithoutCardInput, TypeUncheckedCreateWithoutCardInput>
  }

  export type TypeUpdateWithoutCardInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TypeUncheckedUpdateWithoutCardInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ClassUpsertWithoutCardInput = {
    update: XOR<ClassUpdateWithoutCardInput, ClassUncheckedUpdateWithoutCardInput>
    create: XOR<ClassCreateWithoutCardInput, ClassUncheckedCreateWithoutCardInput>
  }

  export type ClassUpdateWithoutCardInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ClassUncheckedUpdateWithoutCardInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type AbilityUpsertWithWhereUniqueWithoutCardInput = {
    where: AbilityWhereUniqueInput
    update: XOR<AbilityUpdateWithoutCardInput, AbilityUncheckedUpdateWithoutCardInput>
    create: XOR<AbilityCreateWithoutCardInput, AbilityUncheckedCreateWithoutCardInput>
  }

  export type AbilityUpdateWithWhereUniqueWithoutCardInput = {
    where: AbilityWhereUniqueInput
    data: XOR<AbilityUpdateWithoutCardInput, AbilityUncheckedUpdateWithoutCardInput>
  }

  export type AbilityUpdateManyWithWhereWithoutCardInput = {
    where: AbilityScalarWhereInput
    data: XOR<AbilityUpdateManyMutationInput, AbilityUncheckedUpdateManyWithoutAbilityInput>
  }

  export type AbilityScalarWhereInput = {
    AND?: Enumerable<AbilityScalarWhereInput>
    OR?: Enumerable<AbilityScalarWhereInput>
    NOT?: Enumerable<AbilityScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    cost?: IntFilter | number
    cardId?: IntNullableFilter | number | null
  }

  export type CompetenceUpsertWithWhereUniqueWithoutCardInput = {
    where: CompetenceWhereUniqueInput
    update: XOR<CompetenceUpdateWithoutCardInput, CompetenceUncheckedUpdateWithoutCardInput>
    create: XOR<CompetenceCreateWithoutCardInput, CompetenceUncheckedCreateWithoutCardInput>
  }

  export type CompetenceUpdateWithWhereUniqueWithoutCardInput = {
    where: CompetenceWhereUniqueInput
    data: XOR<CompetenceUpdateWithoutCardInput, CompetenceUncheckedUpdateWithoutCardInput>
  }

  export type CompetenceUpdateManyWithWhereWithoutCardInput = {
    where: CompetenceScalarWhereInput
    data: XOR<CompetenceUpdateManyMutationInput, CompetenceUncheckedUpdateManyWithoutCompetenceInput>
  }

  export type CompetenceScalarWhereInput = {
    AND?: Enumerable<CompetenceScalarWhereInput>
    OR?: Enumerable<CompetenceScalarWhereInput>
    NOT?: Enumerable<CompetenceScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    effect?: IntFilter | number
    percent?: BoolFilter | boolean
    cardId?: IntNullableFilter | number | null
  }

  export type CardCreateWithoutTypeInput = {
    name: string
    illustration: string
    power: number
    color: string
    description: string
    class?: ClassCreateNestedOneWithoutCardInput
    Ability?: AbilityCreateNestedManyWithoutCardInput
    Competence?: CompetenceCreateNestedManyWithoutCardInput
  }

  export type CardUncheckedCreateWithoutTypeInput = {
    id?: number
    name: string
    illustration: string
    classId?: number | null
    power: number
    color: string
    description: string
    Ability?: AbilityUncheckedCreateNestedManyWithoutCardInput
    Competence?: CompetenceUncheckedCreateNestedManyWithoutCardInput
  }

  export type CardCreateOrConnectWithoutTypeInput = {
    where: CardWhereUniqueInput
    create: XOR<CardCreateWithoutTypeInput, CardUncheckedCreateWithoutTypeInput>
  }

  export type CardCreateManyTypeInputEnvelope = {
    data: Enumerable<CardCreateManyTypeInput>
    skipDuplicates?: boolean
  }

  export type CardUpsertWithWhereUniqueWithoutTypeInput = {
    where: CardWhereUniqueInput
    update: XOR<CardUpdateWithoutTypeInput, CardUncheckedUpdateWithoutTypeInput>
    create: XOR<CardCreateWithoutTypeInput, CardUncheckedCreateWithoutTypeInput>
  }

  export type CardUpdateWithWhereUniqueWithoutTypeInput = {
    where: CardWhereUniqueInput
    data: XOR<CardUpdateWithoutTypeInput, CardUncheckedUpdateWithoutTypeInput>
  }

  export type CardUpdateManyWithWhereWithoutTypeInput = {
    where: CardScalarWhereInput
    data: XOR<CardUpdateManyMutationInput, CardUncheckedUpdateManyWithoutCardInput>
  }

  export type CardScalarWhereInput = {
    AND?: Enumerable<CardScalarWhereInput>
    OR?: Enumerable<CardScalarWhereInput>
    NOT?: Enumerable<CardScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    illustration?: StringFilter | string
    typeId?: IntNullableFilter | number | null
    classId?: IntNullableFilter | number | null
    power?: IntFilter | number
    color?: StringFilter | string
    description?: StringFilter | string
  }

  export type CardCreateWithoutClassInput = {
    name: string
    illustration: string
    power: number
    color: string
    description: string
    type?: TypeCreateNestedOneWithoutCardInput
    Ability?: AbilityCreateNestedManyWithoutCardInput
    Competence?: CompetenceCreateNestedManyWithoutCardInput
  }

  export type CardUncheckedCreateWithoutClassInput = {
    id?: number
    name: string
    illustration: string
    typeId?: number | null
    power: number
    color: string
    description: string
    Ability?: AbilityUncheckedCreateNestedManyWithoutCardInput
    Competence?: CompetenceUncheckedCreateNestedManyWithoutCardInput
  }

  export type CardCreateOrConnectWithoutClassInput = {
    where: CardWhereUniqueInput
    create: XOR<CardCreateWithoutClassInput, CardUncheckedCreateWithoutClassInput>
  }

  export type CardCreateManyClassInputEnvelope = {
    data: Enumerable<CardCreateManyClassInput>
    skipDuplicates?: boolean
  }

  export type CardUpsertWithWhereUniqueWithoutClassInput = {
    where: CardWhereUniqueInput
    update: XOR<CardUpdateWithoutClassInput, CardUncheckedUpdateWithoutClassInput>
    create: XOR<CardCreateWithoutClassInput, CardUncheckedCreateWithoutClassInput>
  }

  export type CardUpdateWithWhereUniqueWithoutClassInput = {
    where: CardWhereUniqueInput
    data: XOR<CardUpdateWithoutClassInput, CardUncheckedUpdateWithoutClassInput>
  }

  export type CardUpdateManyWithWhereWithoutClassInput = {
    where: CardScalarWhereInput
    data: XOR<CardUpdateManyMutationInput, CardUncheckedUpdateManyWithoutCardInput>
  }

  export type CardCreateWithoutAbilityInput = {
    name: string
    illustration: string
    power: number
    color: string
    description: string
    type?: TypeCreateNestedOneWithoutCardInput
    class?: ClassCreateNestedOneWithoutCardInput
    Competence?: CompetenceCreateNestedManyWithoutCardInput
  }

  export type CardUncheckedCreateWithoutAbilityInput = {
    id?: number
    name: string
    illustration: string
    typeId?: number | null
    classId?: number | null
    power: number
    color: string
    description: string
    Competence?: CompetenceUncheckedCreateNestedManyWithoutCardInput
  }

  export type CardCreateOrConnectWithoutAbilityInput = {
    where: CardWhereUniqueInput
    create: XOR<CardCreateWithoutAbilityInput, CardUncheckedCreateWithoutAbilityInput>
  }

  export type CardUpsertWithoutAbilityInput = {
    update: XOR<CardUpdateWithoutAbilityInput, CardUncheckedUpdateWithoutAbilityInput>
    create: XOR<CardCreateWithoutAbilityInput, CardUncheckedCreateWithoutAbilityInput>
  }

  export type CardUpdateWithoutAbilityInput = {
    name?: StringFieldUpdateOperationsInput | string
    illustration?: StringFieldUpdateOperationsInput | string
    power?: IntFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: TypeUpdateOneWithoutCardNestedInput
    class?: ClassUpdateOneWithoutCardNestedInput
    Competence?: CompetenceUpdateManyWithoutCardNestedInput
  }

  export type CardUncheckedUpdateWithoutAbilityInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    illustration?: StringFieldUpdateOperationsInput | string
    typeId?: NullableIntFieldUpdateOperationsInput | number | null
    classId?: NullableIntFieldUpdateOperationsInput | number | null
    power?: IntFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    Competence?: CompetenceUncheckedUpdateManyWithoutCardNestedInput
  }

  export type CardCreateWithoutCompetenceInput = {
    name: string
    illustration: string
    power: number
    color: string
    description: string
    type?: TypeCreateNestedOneWithoutCardInput
    class?: ClassCreateNestedOneWithoutCardInput
    Ability?: AbilityCreateNestedManyWithoutCardInput
  }

  export type CardUncheckedCreateWithoutCompetenceInput = {
    id?: number
    name: string
    illustration: string
    typeId?: number | null
    classId?: number | null
    power: number
    color: string
    description: string
    Ability?: AbilityUncheckedCreateNestedManyWithoutCardInput
  }

  export type CardCreateOrConnectWithoutCompetenceInput = {
    where: CardWhereUniqueInput
    create: XOR<CardCreateWithoutCompetenceInput, CardUncheckedCreateWithoutCompetenceInput>
  }

  export type CardUpsertWithoutCompetenceInput = {
    update: XOR<CardUpdateWithoutCompetenceInput, CardUncheckedUpdateWithoutCompetenceInput>
    create: XOR<CardCreateWithoutCompetenceInput, CardUncheckedCreateWithoutCompetenceInput>
  }

  export type CardUpdateWithoutCompetenceInput = {
    name?: StringFieldUpdateOperationsInput | string
    illustration?: StringFieldUpdateOperationsInput | string
    power?: IntFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: TypeUpdateOneWithoutCardNestedInput
    class?: ClassUpdateOneWithoutCardNestedInput
    Ability?: AbilityUpdateManyWithoutCardNestedInput
  }

  export type CardUncheckedUpdateWithoutCompetenceInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    illustration?: StringFieldUpdateOperationsInput | string
    typeId?: NullableIntFieldUpdateOperationsInput | number | null
    classId?: NullableIntFieldUpdateOperationsInput | number | null
    power?: IntFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    Ability?: AbilityUncheckedUpdateManyWithoutCardNestedInput
  }

  export type AbilityCreateManyCardInput = {
    id?: number
    name: string
    cost: number
  }

  export type CompetenceCreateManyCardInput = {
    id?: number
    name: string
    effect: number
    percent: boolean
  }

  export type AbilityUpdateWithoutCardInput = {
    name?: StringFieldUpdateOperationsInput | string
    cost?: IntFieldUpdateOperationsInput | number
  }

  export type AbilityUncheckedUpdateWithoutCardInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cost?: IntFieldUpdateOperationsInput | number
  }

  export type AbilityUncheckedUpdateManyWithoutAbilityInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cost?: IntFieldUpdateOperationsInput | number
  }

  export type CompetenceUpdateWithoutCardInput = {
    name?: StringFieldUpdateOperationsInput | string
    effect?: IntFieldUpdateOperationsInput | number
    percent?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CompetenceUncheckedUpdateWithoutCardInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    effect?: IntFieldUpdateOperationsInput | number
    percent?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CompetenceUncheckedUpdateManyWithoutCompetenceInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    effect?: IntFieldUpdateOperationsInput | number
    percent?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CardCreateManyTypeInput = {
    id?: number
    name: string
    illustration: string
    classId?: number | null
    power: number
    color: string
    description: string
  }

  export type CardUpdateWithoutTypeInput = {
    name?: StringFieldUpdateOperationsInput | string
    illustration?: StringFieldUpdateOperationsInput | string
    power?: IntFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    class?: ClassUpdateOneWithoutCardNestedInput
    Ability?: AbilityUpdateManyWithoutCardNestedInput
    Competence?: CompetenceUpdateManyWithoutCardNestedInput
  }

  export type CardUncheckedUpdateWithoutTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    illustration?: StringFieldUpdateOperationsInput | string
    classId?: NullableIntFieldUpdateOperationsInput | number | null
    power?: IntFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    Ability?: AbilityUncheckedUpdateManyWithoutCardNestedInput
    Competence?: CompetenceUncheckedUpdateManyWithoutCardNestedInput
  }

  export type CardUncheckedUpdateManyWithoutCardInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    illustration?: StringFieldUpdateOperationsInput | string
    classId?: NullableIntFieldUpdateOperationsInput | number | null
    power?: IntFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type CardCreateManyClassInput = {
    id?: number
    name: string
    illustration: string
    typeId?: number | null
    power: number
    color: string
    description: string
  }

  export type CardUpdateWithoutClassInput = {
    name?: StringFieldUpdateOperationsInput | string
    illustration?: StringFieldUpdateOperationsInput | string
    power?: IntFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: TypeUpdateOneWithoutCardNestedInput
    Ability?: AbilityUpdateManyWithoutCardNestedInput
    Competence?: CompetenceUpdateManyWithoutCardNestedInput
  }

  export type CardUncheckedUpdateWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    illustration?: StringFieldUpdateOperationsInput | string
    typeId?: NullableIntFieldUpdateOperationsInput | number | null
    power?: IntFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    Ability?: AbilityUncheckedUpdateManyWithoutCardNestedInput
    Competence?: CompetenceUncheckedUpdateManyWithoutCardNestedInput
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}