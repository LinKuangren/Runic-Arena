
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model Carte
 * 
 */
export type Carte = {
  id: number
  name: string
  illustration: string
  typeId: number | null
  classeId: number | null
  power: number
  competenceId: number
  cost: string
  color: string
  description: string
}

/**
 * Model Type
 * 
 */
export type Type = {
  id: number
  name: string
}

/**
 * Model Classe
 * 
 */
export type Classe = {
  id: number
  name: string
}

/**
 * Model Capacite
 * 
 */
export type Capacite = {
  id: number
  name: string
  description: string
  carteId: number | null
}

/**
 * Model Competence
 * 
 */
export type Competence = {
  id: number
  name: string
  type: string
  description: string
}

/**
 * Model CartesCapacictesActive
 * 
 */
export type CartesCapacictesActive = {
  competenceId: number
  carteId: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Cartes
 * const cartes = await prisma.carte.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Cartes
   * const cartes = await prisma.carte.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.carte`: Exposes CRUD operations for the **Carte** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cartes
    * const cartes = await prisma.carte.findMany()
    * ```
    */
  get carte(): Prisma.CarteDelegate<GlobalReject>;

  /**
   * `prisma.type`: Exposes CRUD operations for the **Type** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Types
    * const types = await prisma.type.findMany()
    * ```
    */
  get type(): Prisma.TypeDelegate<GlobalReject>;

  /**
   * `prisma.classe`: Exposes CRUD operations for the **Classe** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Classes
    * const classes = await prisma.classe.findMany()
    * ```
    */
  get classe(): Prisma.ClasseDelegate<GlobalReject>;

  /**
   * `prisma.capacite`: Exposes CRUD operations for the **Capacite** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Capacites
    * const capacites = await prisma.capacite.findMany()
    * ```
    */
  get capacite(): Prisma.CapaciteDelegate<GlobalReject>;

  /**
   * `prisma.competence`: Exposes CRUD operations for the **Competence** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Competences
    * const competences = await prisma.competence.findMany()
    * ```
    */
  get competence(): Prisma.CompetenceDelegate<GlobalReject>;

  /**
   * `prisma.cartesCapacictesActive`: Exposes CRUD operations for the **CartesCapacictesActive** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CartesCapacictesActives
    * const cartesCapacictesActives = await prisma.cartesCapacictesActive.findMany()
    * ```
    */
  get cartesCapacictesActive(): Prisma.CartesCapacictesActiveDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.13.0
   * Query Engine version: 1e7af066ee9cb95cf3a403c78d9aab3e6b04f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Carte: 'Carte',
    Type: 'Type',
    Classe: 'Classe',
    Capacite: 'Capacite',
    Competence: 'Competence',
    CartesCapacictesActive: 'CartesCapacictesActive'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CarteCountOutputType
   */


  export type CarteCountOutputType = {
    Capacite: number
    competences_active: number
  }

  export type CarteCountOutputTypeSelect = {
    Capacite?: boolean
    competences_active?: boolean
  }

  export type CarteCountOutputTypeGetPayload<S extends boolean | null | undefined | CarteCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? CarteCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (CarteCountOutputTypeArgs)
    ? CarteCountOutputType 
    : S extends { select: any } & (CarteCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof CarteCountOutputType ? CarteCountOutputType[P] : never
  } 
      : CarteCountOutputType




  // Custom InputTypes

  /**
   * CarteCountOutputType without action
   */
  export type CarteCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CarteCountOutputType
     */
    select?: CarteCountOutputTypeSelect | null
  }



  /**
   * Count Type TypeCountOutputType
   */


  export type TypeCountOutputType = {
    Carte: number
  }

  export type TypeCountOutputTypeSelect = {
    Carte?: boolean
  }

  export type TypeCountOutputTypeGetPayload<S extends boolean | null | undefined | TypeCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TypeCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TypeCountOutputTypeArgs)
    ? TypeCountOutputType 
    : S extends { select: any } & (TypeCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TypeCountOutputType ? TypeCountOutputType[P] : never
  } 
      : TypeCountOutputType




  // Custom InputTypes

  /**
   * TypeCountOutputType without action
   */
  export type TypeCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TypeCountOutputType
     */
    select?: TypeCountOutputTypeSelect | null
  }



  /**
   * Count Type ClasseCountOutputType
   */


  export type ClasseCountOutputType = {
    Carte: number
  }

  export type ClasseCountOutputTypeSelect = {
    Carte?: boolean
  }

  export type ClasseCountOutputTypeGetPayload<S extends boolean | null | undefined | ClasseCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ClasseCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ClasseCountOutputTypeArgs)
    ? ClasseCountOutputType 
    : S extends { select: any } & (ClasseCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ClasseCountOutputType ? ClasseCountOutputType[P] : never
  } 
      : ClasseCountOutputType




  // Custom InputTypes

  /**
   * ClasseCountOutputType without action
   */
  export type ClasseCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ClasseCountOutputType
     */
    select?: ClasseCountOutputTypeSelect | null
  }



  /**
   * Count Type CompetenceCountOutputType
   */


  export type CompetenceCountOutputType = {
    carte_passvie: number
    carte_active: number
  }

  export type CompetenceCountOutputTypeSelect = {
    carte_passvie?: boolean
    carte_active?: boolean
  }

  export type CompetenceCountOutputTypeGetPayload<S extends boolean | null | undefined | CompetenceCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? CompetenceCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (CompetenceCountOutputTypeArgs)
    ? CompetenceCountOutputType 
    : S extends { select: any } & (CompetenceCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof CompetenceCountOutputType ? CompetenceCountOutputType[P] : never
  } 
      : CompetenceCountOutputType




  // Custom InputTypes

  /**
   * CompetenceCountOutputType without action
   */
  export type CompetenceCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CompetenceCountOutputType
     */
    select?: CompetenceCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Carte
   */


  export type AggregateCarte = {
    _count: CarteCountAggregateOutputType | null
    _avg: CarteAvgAggregateOutputType | null
    _sum: CarteSumAggregateOutputType | null
    _min: CarteMinAggregateOutputType | null
    _max: CarteMaxAggregateOutputType | null
  }

  export type CarteAvgAggregateOutputType = {
    id: number | null
    typeId: number | null
    classeId: number | null
    power: number | null
    competenceId: number | null
  }

  export type CarteSumAggregateOutputType = {
    id: number | null
    typeId: number | null
    classeId: number | null
    power: number | null
    competenceId: number | null
  }

  export type CarteMinAggregateOutputType = {
    id: number | null
    name: string | null
    illustration: string | null
    typeId: number | null
    classeId: number | null
    power: number | null
    competenceId: number | null
    cost: string | null
    color: string | null
    description: string | null
  }

  export type CarteMaxAggregateOutputType = {
    id: number | null
    name: string | null
    illustration: string | null
    typeId: number | null
    classeId: number | null
    power: number | null
    competenceId: number | null
    cost: string | null
    color: string | null
    description: string | null
  }

  export type CarteCountAggregateOutputType = {
    id: number
    name: number
    illustration: number
    typeId: number
    classeId: number
    power: number
    competenceId: number
    cost: number
    color: number
    description: number
    _all: number
  }


  export type CarteAvgAggregateInputType = {
    id?: true
    typeId?: true
    classeId?: true
    power?: true
    competenceId?: true
  }

  export type CarteSumAggregateInputType = {
    id?: true
    typeId?: true
    classeId?: true
    power?: true
    competenceId?: true
  }

  export type CarteMinAggregateInputType = {
    id?: true
    name?: true
    illustration?: true
    typeId?: true
    classeId?: true
    power?: true
    competenceId?: true
    cost?: true
    color?: true
    description?: true
  }

  export type CarteMaxAggregateInputType = {
    id?: true
    name?: true
    illustration?: true
    typeId?: true
    classeId?: true
    power?: true
    competenceId?: true
    cost?: true
    color?: true
    description?: true
  }

  export type CarteCountAggregateInputType = {
    id?: true
    name?: true
    illustration?: true
    typeId?: true
    classeId?: true
    power?: true
    competenceId?: true
    cost?: true
    color?: true
    description?: true
    _all?: true
  }

  export type CarteAggregateArgs = {
    /**
     * Filter which Carte to aggregate.
     */
    where?: CarteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cartes to fetch.
     */
    orderBy?: Enumerable<CarteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CarteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cartes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cartes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cartes
    **/
    _count?: true | CarteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CarteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CarteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CarteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CarteMaxAggregateInputType
  }

  export type GetCarteAggregateType<T extends CarteAggregateArgs> = {
        [P in keyof T & keyof AggregateCarte]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCarte[P]>
      : GetScalarType<T[P], AggregateCarte[P]>
  }




  export type CarteGroupByArgs = {
    where?: CarteWhereInput
    orderBy?: Enumerable<CarteOrderByWithAggregationInput>
    by: CarteScalarFieldEnum[]
    having?: CarteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CarteCountAggregateInputType | true
    _avg?: CarteAvgAggregateInputType
    _sum?: CarteSumAggregateInputType
    _min?: CarteMinAggregateInputType
    _max?: CarteMaxAggregateInputType
  }


  export type CarteGroupByOutputType = {
    id: number
    name: string
    illustration: string
    typeId: number | null
    classeId: number | null
    power: number
    competenceId: number
    cost: string
    color: string
    description: string
    _count: CarteCountAggregateOutputType | null
    _avg: CarteAvgAggregateOutputType | null
    _sum: CarteSumAggregateOutputType | null
    _min: CarteMinAggregateOutputType | null
    _max: CarteMaxAggregateOutputType | null
  }

  type GetCarteGroupByPayload<T extends CarteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CarteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CarteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CarteGroupByOutputType[P]>
            : GetScalarType<T[P], CarteGroupByOutputType[P]>
        }
      >
    >


  export type CarteSelect = {
    id?: boolean
    name?: boolean
    illustration?: boolean
    typeId?: boolean
    classeId?: boolean
    power?: boolean
    competenceId?: boolean
    cost?: boolean
    color?: boolean
    description?: boolean
    type?: boolean | TypeArgs
    classe?: boolean | ClasseArgs
    Capacite?: boolean | Carte$CapaciteArgs
    competence_passive?: boolean | CompetenceArgs
    competences_active?: boolean | Carte$competences_activeArgs
    _count?: boolean | CarteCountOutputTypeArgs
  }


  export type CarteInclude = {
    type?: boolean | TypeArgs
    classe?: boolean | ClasseArgs
    Capacite?: boolean | Carte$CapaciteArgs
    competence_passive?: boolean | CompetenceArgs
    competences_active?: boolean | Carte$competences_activeArgs
    _count?: boolean | CarteCountOutputTypeArgs
  }

  export type CarteGetPayload<S extends boolean | null | undefined | CarteArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Carte :
    S extends undefined ? never :
    S extends { include: any } & (CarteArgs | CarteFindManyArgs)
    ? Carte  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'type' ? TypeGetPayload<S['include'][P]> | null :
        P extends 'classe' ? ClasseGetPayload<S['include'][P]> | null :
        P extends 'Capacite' ? Array < CapaciteGetPayload<S['include'][P]>>  :
        P extends 'competence_passive' ? CompetenceGetPayload<S['include'][P]> | null :
        P extends 'competences_active' ? Array < CartesCapacictesActiveGetPayload<S['include'][P]>>  :
        P extends '_count' ? CarteCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (CarteArgs | CarteFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'type' ? TypeGetPayload<S['select'][P]> | null :
        P extends 'classe' ? ClasseGetPayload<S['select'][P]> | null :
        P extends 'Capacite' ? Array < CapaciteGetPayload<S['select'][P]>>  :
        P extends 'competence_passive' ? CompetenceGetPayload<S['select'][P]> | null :
        P extends 'competences_active' ? Array < CartesCapacictesActiveGetPayload<S['select'][P]>>  :
        P extends '_count' ? CarteCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Carte ? Carte[P] : never
  } 
      : Carte


  type CarteCountArgs = 
    Omit<CarteFindManyArgs, 'select' | 'include'> & {
      select?: CarteCountAggregateInputType | true
    }

  export interface CarteDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Carte that matches the filter.
     * @param {CarteFindUniqueArgs} args - Arguments to find a Carte
     * @example
     * // Get one Carte
     * const carte = await prisma.carte.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CarteFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CarteFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Carte'> extends True ? Prisma__CarteClient<CarteGetPayload<T>> : Prisma__CarteClient<CarteGetPayload<T> | null, null>

    /**
     * Find one Carte that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CarteFindUniqueOrThrowArgs} args - Arguments to find a Carte
     * @example
     * // Get one Carte
     * const carte = await prisma.carte.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CarteFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CarteFindUniqueOrThrowArgs>
    ): Prisma__CarteClient<CarteGetPayload<T>>

    /**
     * Find the first Carte that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarteFindFirstArgs} args - Arguments to find a Carte
     * @example
     * // Get one Carte
     * const carte = await prisma.carte.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CarteFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CarteFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Carte'> extends True ? Prisma__CarteClient<CarteGetPayload<T>> : Prisma__CarteClient<CarteGetPayload<T> | null, null>

    /**
     * Find the first Carte that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarteFindFirstOrThrowArgs} args - Arguments to find a Carte
     * @example
     * // Get one Carte
     * const carte = await prisma.carte.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CarteFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CarteFindFirstOrThrowArgs>
    ): Prisma__CarteClient<CarteGetPayload<T>>

    /**
     * Find zero or more Cartes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cartes
     * const cartes = await prisma.carte.findMany()
     * 
     * // Get first 10 Cartes
     * const cartes = await prisma.carte.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const carteWithIdOnly = await prisma.carte.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CarteFindManyArgs>(
      args?: SelectSubset<T, CarteFindManyArgs>
    ): Prisma.PrismaPromise<Array<CarteGetPayload<T>>>

    /**
     * Create a Carte.
     * @param {CarteCreateArgs} args - Arguments to create a Carte.
     * @example
     * // Create one Carte
     * const Carte = await prisma.carte.create({
     *   data: {
     *     // ... data to create a Carte
     *   }
     * })
     * 
    **/
    create<T extends CarteCreateArgs>(
      args: SelectSubset<T, CarteCreateArgs>
    ): Prisma__CarteClient<CarteGetPayload<T>>

    /**
     * Create many Cartes.
     *     @param {CarteCreateManyArgs} args - Arguments to create many Cartes.
     *     @example
     *     // Create many Cartes
     *     const carte = await prisma.carte.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CarteCreateManyArgs>(
      args?: SelectSubset<T, CarteCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Carte.
     * @param {CarteDeleteArgs} args - Arguments to delete one Carte.
     * @example
     * // Delete one Carte
     * const Carte = await prisma.carte.delete({
     *   where: {
     *     // ... filter to delete one Carte
     *   }
     * })
     * 
    **/
    delete<T extends CarteDeleteArgs>(
      args: SelectSubset<T, CarteDeleteArgs>
    ): Prisma__CarteClient<CarteGetPayload<T>>

    /**
     * Update one Carte.
     * @param {CarteUpdateArgs} args - Arguments to update one Carte.
     * @example
     * // Update one Carte
     * const carte = await prisma.carte.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CarteUpdateArgs>(
      args: SelectSubset<T, CarteUpdateArgs>
    ): Prisma__CarteClient<CarteGetPayload<T>>

    /**
     * Delete zero or more Cartes.
     * @param {CarteDeleteManyArgs} args - Arguments to filter Cartes to delete.
     * @example
     * // Delete a few Cartes
     * const { count } = await prisma.carte.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CarteDeleteManyArgs>(
      args?: SelectSubset<T, CarteDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cartes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cartes
     * const carte = await prisma.carte.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CarteUpdateManyArgs>(
      args: SelectSubset<T, CarteUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Carte.
     * @param {CarteUpsertArgs} args - Arguments to update or create a Carte.
     * @example
     * // Update or create a Carte
     * const carte = await prisma.carte.upsert({
     *   create: {
     *     // ... data to create a Carte
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Carte we want to update
     *   }
     * })
    **/
    upsert<T extends CarteUpsertArgs>(
      args: SelectSubset<T, CarteUpsertArgs>
    ): Prisma__CarteClient<CarteGetPayload<T>>

    /**
     * Count the number of Cartes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarteCountArgs} args - Arguments to filter Cartes to count.
     * @example
     * // Count the number of Cartes
     * const count = await prisma.carte.count({
     *   where: {
     *     // ... the filter for the Cartes we want to count
     *   }
     * })
    **/
    count<T extends CarteCountArgs>(
      args?: Subset<T, CarteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CarteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Carte.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CarteAggregateArgs>(args: Subset<T, CarteAggregateArgs>): Prisma.PrismaPromise<GetCarteAggregateType<T>>

    /**
     * Group by Carte.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CarteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CarteGroupByArgs['orderBy'] }
        : { orderBy?: CarteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CarteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCarteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Carte.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CarteClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    type<T extends TypeArgs= {}>(args?: Subset<T, TypeArgs>): Prisma__TypeClient<TypeGetPayload<T> | Null>;

    classe<T extends ClasseArgs= {}>(args?: Subset<T, ClasseArgs>): Prisma__ClasseClient<ClasseGetPayload<T> | Null>;

    Capacite<T extends Carte$CapaciteArgs= {}>(args?: Subset<T, Carte$CapaciteArgs>): Prisma.PrismaPromise<Array<CapaciteGetPayload<T>>| Null>;

    competence_passive<T extends CompetenceArgs= {}>(args?: Subset<T, CompetenceArgs>): Prisma__CompetenceClient<CompetenceGetPayload<T> | Null>;

    competences_active<T extends Carte$competences_activeArgs= {}>(args?: Subset<T, Carte$competences_activeArgs>): Prisma.PrismaPromise<Array<CartesCapacictesActiveGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Carte base type for findUnique actions
   */
  export type CarteFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Carte
     */
    select?: CarteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarteInclude | null
    /**
     * Filter, which Carte to fetch.
     */
    where: CarteWhereUniqueInput
  }

  /**
   * Carte findUnique
   */
  export interface CarteFindUniqueArgs extends CarteFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Carte findUniqueOrThrow
   */
  export type CarteFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Carte
     */
    select?: CarteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarteInclude | null
    /**
     * Filter, which Carte to fetch.
     */
    where: CarteWhereUniqueInput
  }


  /**
   * Carte base type for findFirst actions
   */
  export type CarteFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Carte
     */
    select?: CarteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarteInclude | null
    /**
     * Filter, which Carte to fetch.
     */
    where?: CarteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cartes to fetch.
     */
    orderBy?: Enumerable<CarteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cartes.
     */
    cursor?: CarteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cartes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cartes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cartes.
     */
    distinct?: Enumerable<CarteScalarFieldEnum>
  }

  /**
   * Carte findFirst
   */
  export interface CarteFindFirstArgs extends CarteFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Carte findFirstOrThrow
   */
  export type CarteFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Carte
     */
    select?: CarteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarteInclude | null
    /**
     * Filter, which Carte to fetch.
     */
    where?: CarteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cartes to fetch.
     */
    orderBy?: Enumerable<CarteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cartes.
     */
    cursor?: CarteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cartes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cartes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cartes.
     */
    distinct?: Enumerable<CarteScalarFieldEnum>
  }


  /**
   * Carte findMany
   */
  export type CarteFindManyArgs = {
    /**
     * Select specific fields to fetch from the Carte
     */
    select?: CarteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarteInclude | null
    /**
     * Filter, which Cartes to fetch.
     */
    where?: CarteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cartes to fetch.
     */
    orderBy?: Enumerable<CarteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cartes.
     */
    cursor?: CarteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cartes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cartes.
     */
    skip?: number
    distinct?: Enumerable<CarteScalarFieldEnum>
  }


  /**
   * Carte create
   */
  export type CarteCreateArgs = {
    /**
     * Select specific fields to fetch from the Carte
     */
    select?: CarteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarteInclude | null
    /**
     * The data needed to create a Carte.
     */
    data: XOR<CarteCreateInput, CarteUncheckedCreateInput>
  }


  /**
   * Carte createMany
   */
  export type CarteCreateManyArgs = {
    /**
     * The data used to create many Cartes.
     */
    data: Enumerable<CarteCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Carte update
   */
  export type CarteUpdateArgs = {
    /**
     * Select specific fields to fetch from the Carte
     */
    select?: CarteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarteInclude | null
    /**
     * The data needed to update a Carte.
     */
    data: XOR<CarteUpdateInput, CarteUncheckedUpdateInput>
    /**
     * Choose, which Carte to update.
     */
    where: CarteWhereUniqueInput
  }


  /**
   * Carte updateMany
   */
  export type CarteUpdateManyArgs = {
    /**
     * The data used to update Cartes.
     */
    data: XOR<CarteUpdateManyMutationInput, CarteUncheckedUpdateManyInput>
    /**
     * Filter which Cartes to update
     */
    where?: CarteWhereInput
  }


  /**
   * Carte upsert
   */
  export type CarteUpsertArgs = {
    /**
     * Select specific fields to fetch from the Carte
     */
    select?: CarteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarteInclude | null
    /**
     * The filter to search for the Carte to update in case it exists.
     */
    where: CarteWhereUniqueInput
    /**
     * In case the Carte found by the `where` argument doesn't exist, create a new Carte with this data.
     */
    create: XOR<CarteCreateInput, CarteUncheckedCreateInput>
    /**
     * In case the Carte was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CarteUpdateInput, CarteUncheckedUpdateInput>
  }


  /**
   * Carte delete
   */
  export type CarteDeleteArgs = {
    /**
     * Select specific fields to fetch from the Carte
     */
    select?: CarteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarteInclude | null
    /**
     * Filter which Carte to delete.
     */
    where: CarteWhereUniqueInput
  }


  /**
   * Carte deleteMany
   */
  export type CarteDeleteManyArgs = {
    /**
     * Filter which Cartes to delete
     */
    where?: CarteWhereInput
  }


  /**
   * Carte.Capacite
   */
  export type Carte$CapaciteArgs = {
    /**
     * Select specific fields to fetch from the Capacite
     */
    select?: CapaciteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CapaciteInclude | null
    where?: CapaciteWhereInput
    orderBy?: Enumerable<CapaciteOrderByWithRelationInput>
    cursor?: CapaciteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CapaciteScalarFieldEnum>
  }


  /**
   * Carte.competences_active
   */
  export type Carte$competences_activeArgs = {
    /**
     * Select specific fields to fetch from the CartesCapacictesActive
     */
    select?: CartesCapacictesActiveSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CartesCapacictesActiveInclude | null
    where?: CartesCapacictesActiveWhereInput
    orderBy?: Enumerable<CartesCapacictesActiveOrderByWithRelationInput>
    cursor?: CartesCapacictesActiveWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CartesCapacictesActiveScalarFieldEnum>
  }


  /**
   * Carte without action
   */
  export type CarteArgs = {
    /**
     * Select specific fields to fetch from the Carte
     */
    select?: CarteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarteInclude | null
  }



  /**
   * Model Type
   */


  export type AggregateType = {
    _count: TypeCountAggregateOutputType | null
    _avg: TypeAvgAggregateOutputType | null
    _sum: TypeSumAggregateOutputType | null
    _min: TypeMinAggregateOutputType | null
    _max: TypeMaxAggregateOutputType | null
  }

  export type TypeAvgAggregateOutputType = {
    id: number | null
  }

  export type TypeSumAggregateOutputType = {
    id: number | null
  }

  export type TypeMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type TypeMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type TypeCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type TypeAvgAggregateInputType = {
    id?: true
  }

  export type TypeSumAggregateInputType = {
    id?: true
  }

  export type TypeMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type TypeMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type TypeCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type TypeAggregateArgs = {
    /**
     * Filter which Type to aggregate.
     */
    where?: TypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Types to fetch.
     */
    orderBy?: Enumerable<TypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Types
    **/
    _count?: true | TypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TypeMaxAggregateInputType
  }

  export type GetTypeAggregateType<T extends TypeAggregateArgs> = {
        [P in keyof T & keyof AggregateType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateType[P]>
      : GetScalarType<T[P], AggregateType[P]>
  }




  export type TypeGroupByArgs = {
    where?: TypeWhereInput
    orderBy?: Enumerable<TypeOrderByWithAggregationInput>
    by: TypeScalarFieldEnum[]
    having?: TypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TypeCountAggregateInputType | true
    _avg?: TypeAvgAggregateInputType
    _sum?: TypeSumAggregateInputType
    _min?: TypeMinAggregateInputType
    _max?: TypeMaxAggregateInputType
  }


  export type TypeGroupByOutputType = {
    id: number
    name: string
    _count: TypeCountAggregateOutputType | null
    _avg: TypeAvgAggregateOutputType | null
    _sum: TypeSumAggregateOutputType | null
    _min: TypeMinAggregateOutputType | null
    _max: TypeMaxAggregateOutputType | null
  }

  type GetTypeGroupByPayload<T extends TypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TypeGroupByOutputType[P]>
            : GetScalarType<T[P], TypeGroupByOutputType[P]>
        }
      >
    >


  export type TypeSelect = {
    id?: boolean
    name?: boolean
    Carte?: boolean | Type$CarteArgs
    _count?: boolean | TypeCountOutputTypeArgs
  }


  export type TypeInclude = {
    Carte?: boolean | Type$CarteArgs
    _count?: boolean | TypeCountOutputTypeArgs
  }

  export type TypeGetPayload<S extends boolean | null | undefined | TypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Type :
    S extends undefined ? never :
    S extends { include: any } & (TypeArgs | TypeFindManyArgs)
    ? Type  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Carte' ? Array < CarteGetPayload<S['include'][P]>>  :
        P extends '_count' ? TypeCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (TypeArgs | TypeFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Carte' ? Array < CarteGetPayload<S['select'][P]>>  :
        P extends '_count' ? TypeCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Type ? Type[P] : never
  } 
      : Type


  type TypeCountArgs = 
    Omit<TypeFindManyArgs, 'select' | 'include'> & {
      select?: TypeCountAggregateInputType | true
    }

  export interface TypeDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Type that matches the filter.
     * @param {TypeFindUniqueArgs} args - Arguments to find a Type
     * @example
     * // Get one Type
     * const type = await prisma.type.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TypeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TypeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Type'> extends True ? Prisma__TypeClient<TypeGetPayload<T>> : Prisma__TypeClient<TypeGetPayload<T> | null, null>

    /**
     * Find one Type that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TypeFindUniqueOrThrowArgs} args - Arguments to find a Type
     * @example
     * // Get one Type
     * const type = await prisma.type.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TypeFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TypeFindUniqueOrThrowArgs>
    ): Prisma__TypeClient<TypeGetPayload<T>>

    /**
     * Find the first Type that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeFindFirstArgs} args - Arguments to find a Type
     * @example
     * // Get one Type
     * const type = await prisma.type.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TypeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TypeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Type'> extends True ? Prisma__TypeClient<TypeGetPayload<T>> : Prisma__TypeClient<TypeGetPayload<T> | null, null>

    /**
     * Find the first Type that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeFindFirstOrThrowArgs} args - Arguments to find a Type
     * @example
     * // Get one Type
     * const type = await prisma.type.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TypeFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TypeFindFirstOrThrowArgs>
    ): Prisma__TypeClient<TypeGetPayload<T>>

    /**
     * Find zero or more Types that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Types
     * const types = await prisma.type.findMany()
     * 
     * // Get first 10 Types
     * const types = await prisma.type.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const typeWithIdOnly = await prisma.type.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TypeFindManyArgs>(
      args?: SelectSubset<T, TypeFindManyArgs>
    ): Prisma.PrismaPromise<Array<TypeGetPayload<T>>>

    /**
     * Create a Type.
     * @param {TypeCreateArgs} args - Arguments to create a Type.
     * @example
     * // Create one Type
     * const Type = await prisma.type.create({
     *   data: {
     *     // ... data to create a Type
     *   }
     * })
     * 
    **/
    create<T extends TypeCreateArgs>(
      args: SelectSubset<T, TypeCreateArgs>
    ): Prisma__TypeClient<TypeGetPayload<T>>

    /**
     * Create many Types.
     *     @param {TypeCreateManyArgs} args - Arguments to create many Types.
     *     @example
     *     // Create many Types
     *     const type = await prisma.type.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TypeCreateManyArgs>(
      args?: SelectSubset<T, TypeCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Type.
     * @param {TypeDeleteArgs} args - Arguments to delete one Type.
     * @example
     * // Delete one Type
     * const Type = await prisma.type.delete({
     *   where: {
     *     // ... filter to delete one Type
     *   }
     * })
     * 
    **/
    delete<T extends TypeDeleteArgs>(
      args: SelectSubset<T, TypeDeleteArgs>
    ): Prisma__TypeClient<TypeGetPayload<T>>

    /**
     * Update one Type.
     * @param {TypeUpdateArgs} args - Arguments to update one Type.
     * @example
     * // Update one Type
     * const type = await prisma.type.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TypeUpdateArgs>(
      args: SelectSubset<T, TypeUpdateArgs>
    ): Prisma__TypeClient<TypeGetPayload<T>>

    /**
     * Delete zero or more Types.
     * @param {TypeDeleteManyArgs} args - Arguments to filter Types to delete.
     * @example
     * // Delete a few Types
     * const { count } = await prisma.type.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TypeDeleteManyArgs>(
      args?: SelectSubset<T, TypeDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Types.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Types
     * const type = await prisma.type.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TypeUpdateManyArgs>(
      args: SelectSubset<T, TypeUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Type.
     * @param {TypeUpsertArgs} args - Arguments to update or create a Type.
     * @example
     * // Update or create a Type
     * const type = await prisma.type.upsert({
     *   create: {
     *     // ... data to create a Type
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Type we want to update
     *   }
     * })
    **/
    upsert<T extends TypeUpsertArgs>(
      args: SelectSubset<T, TypeUpsertArgs>
    ): Prisma__TypeClient<TypeGetPayload<T>>

    /**
     * Count the number of Types.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeCountArgs} args - Arguments to filter Types to count.
     * @example
     * // Count the number of Types
     * const count = await prisma.type.count({
     *   where: {
     *     // ... the filter for the Types we want to count
     *   }
     * })
    **/
    count<T extends TypeCountArgs>(
      args?: Subset<T, TypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Type.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TypeAggregateArgs>(args: Subset<T, TypeAggregateArgs>): Prisma.PrismaPromise<GetTypeAggregateType<T>>

    /**
     * Group by Type.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TypeGroupByArgs['orderBy'] }
        : { orderBy?: TypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Type.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TypeClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Carte<T extends Type$CarteArgs= {}>(args?: Subset<T, Type$CarteArgs>): Prisma.PrismaPromise<Array<CarteGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Type base type for findUnique actions
   */
  export type TypeFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude | null
    /**
     * Filter, which Type to fetch.
     */
    where: TypeWhereUniqueInput
  }

  /**
   * Type findUnique
   */
  export interface TypeFindUniqueArgs extends TypeFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Type findUniqueOrThrow
   */
  export type TypeFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude | null
    /**
     * Filter, which Type to fetch.
     */
    where: TypeWhereUniqueInput
  }


  /**
   * Type base type for findFirst actions
   */
  export type TypeFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude | null
    /**
     * Filter, which Type to fetch.
     */
    where?: TypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Types to fetch.
     */
    orderBy?: Enumerable<TypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Types.
     */
    cursor?: TypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Types.
     */
    distinct?: Enumerable<TypeScalarFieldEnum>
  }

  /**
   * Type findFirst
   */
  export interface TypeFindFirstArgs extends TypeFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Type findFirstOrThrow
   */
  export type TypeFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude | null
    /**
     * Filter, which Type to fetch.
     */
    where?: TypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Types to fetch.
     */
    orderBy?: Enumerable<TypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Types.
     */
    cursor?: TypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Types.
     */
    distinct?: Enumerable<TypeScalarFieldEnum>
  }


  /**
   * Type findMany
   */
  export type TypeFindManyArgs = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude | null
    /**
     * Filter, which Types to fetch.
     */
    where?: TypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Types to fetch.
     */
    orderBy?: Enumerable<TypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Types.
     */
    cursor?: TypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Types.
     */
    skip?: number
    distinct?: Enumerable<TypeScalarFieldEnum>
  }


  /**
   * Type create
   */
  export type TypeCreateArgs = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude | null
    /**
     * The data needed to create a Type.
     */
    data: XOR<TypeCreateInput, TypeUncheckedCreateInput>
  }


  /**
   * Type createMany
   */
  export type TypeCreateManyArgs = {
    /**
     * The data used to create many Types.
     */
    data: Enumerable<TypeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Type update
   */
  export type TypeUpdateArgs = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude | null
    /**
     * The data needed to update a Type.
     */
    data: XOR<TypeUpdateInput, TypeUncheckedUpdateInput>
    /**
     * Choose, which Type to update.
     */
    where: TypeWhereUniqueInput
  }


  /**
   * Type updateMany
   */
  export type TypeUpdateManyArgs = {
    /**
     * The data used to update Types.
     */
    data: XOR<TypeUpdateManyMutationInput, TypeUncheckedUpdateManyInput>
    /**
     * Filter which Types to update
     */
    where?: TypeWhereInput
  }


  /**
   * Type upsert
   */
  export type TypeUpsertArgs = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude | null
    /**
     * The filter to search for the Type to update in case it exists.
     */
    where: TypeWhereUniqueInput
    /**
     * In case the Type found by the `where` argument doesn't exist, create a new Type with this data.
     */
    create: XOR<TypeCreateInput, TypeUncheckedCreateInput>
    /**
     * In case the Type was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TypeUpdateInput, TypeUncheckedUpdateInput>
  }


  /**
   * Type delete
   */
  export type TypeDeleteArgs = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude | null
    /**
     * Filter which Type to delete.
     */
    where: TypeWhereUniqueInput
  }


  /**
   * Type deleteMany
   */
  export type TypeDeleteManyArgs = {
    /**
     * Filter which Types to delete
     */
    where?: TypeWhereInput
  }


  /**
   * Type.Carte
   */
  export type Type$CarteArgs = {
    /**
     * Select specific fields to fetch from the Carte
     */
    select?: CarteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarteInclude | null
    where?: CarteWhereInput
    orderBy?: Enumerable<CarteOrderByWithRelationInput>
    cursor?: CarteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CarteScalarFieldEnum>
  }


  /**
   * Type without action
   */
  export type TypeArgs = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude | null
  }



  /**
   * Model Classe
   */


  export type AggregateClasse = {
    _count: ClasseCountAggregateOutputType | null
    _avg: ClasseAvgAggregateOutputType | null
    _sum: ClasseSumAggregateOutputType | null
    _min: ClasseMinAggregateOutputType | null
    _max: ClasseMaxAggregateOutputType | null
  }

  export type ClasseAvgAggregateOutputType = {
    id: number | null
  }

  export type ClasseSumAggregateOutputType = {
    id: number | null
  }

  export type ClasseMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type ClasseMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type ClasseCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type ClasseAvgAggregateInputType = {
    id?: true
  }

  export type ClasseSumAggregateInputType = {
    id?: true
  }

  export type ClasseMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type ClasseMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type ClasseCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type ClasseAggregateArgs = {
    /**
     * Filter which Classe to aggregate.
     */
    where?: ClasseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: Enumerable<ClasseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClasseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Classes
    **/
    _count?: true | ClasseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClasseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClasseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClasseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClasseMaxAggregateInputType
  }

  export type GetClasseAggregateType<T extends ClasseAggregateArgs> = {
        [P in keyof T & keyof AggregateClasse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClasse[P]>
      : GetScalarType<T[P], AggregateClasse[P]>
  }




  export type ClasseGroupByArgs = {
    where?: ClasseWhereInput
    orderBy?: Enumerable<ClasseOrderByWithAggregationInput>
    by: ClasseScalarFieldEnum[]
    having?: ClasseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClasseCountAggregateInputType | true
    _avg?: ClasseAvgAggregateInputType
    _sum?: ClasseSumAggregateInputType
    _min?: ClasseMinAggregateInputType
    _max?: ClasseMaxAggregateInputType
  }


  export type ClasseGroupByOutputType = {
    id: number
    name: string
    _count: ClasseCountAggregateOutputType | null
    _avg: ClasseAvgAggregateOutputType | null
    _sum: ClasseSumAggregateOutputType | null
    _min: ClasseMinAggregateOutputType | null
    _max: ClasseMaxAggregateOutputType | null
  }

  type GetClasseGroupByPayload<T extends ClasseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ClasseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClasseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClasseGroupByOutputType[P]>
            : GetScalarType<T[P], ClasseGroupByOutputType[P]>
        }
      >
    >


  export type ClasseSelect = {
    id?: boolean
    name?: boolean
    Carte?: boolean | Classe$CarteArgs
    _count?: boolean | ClasseCountOutputTypeArgs
  }


  export type ClasseInclude = {
    Carte?: boolean | Classe$CarteArgs
    _count?: boolean | ClasseCountOutputTypeArgs
  }

  export type ClasseGetPayload<S extends boolean | null | undefined | ClasseArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Classe :
    S extends undefined ? never :
    S extends { include: any } & (ClasseArgs | ClasseFindManyArgs)
    ? Classe  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Carte' ? Array < CarteGetPayload<S['include'][P]>>  :
        P extends '_count' ? ClasseCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ClasseArgs | ClasseFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Carte' ? Array < CarteGetPayload<S['select'][P]>>  :
        P extends '_count' ? ClasseCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Classe ? Classe[P] : never
  } 
      : Classe


  type ClasseCountArgs = 
    Omit<ClasseFindManyArgs, 'select' | 'include'> & {
      select?: ClasseCountAggregateInputType | true
    }

  export interface ClasseDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Classe that matches the filter.
     * @param {ClasseFindUniqueArgs} args - Arguments to find a Classe
     * @example
     * // Get one Classe
     * const classe = await prisma.classe.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ClasseFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ClasseFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Classe'> extends True ? Prisma__ClasseClient<ClasseGetPayload<T>> : Prisma__ClasseClient<ClasseGetPayload<T> | null, null>

    /**
     * Find one Classe that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ClasseFindUniqueOrThrowArgs} args - Arguments to find a Classe
     * @example
     * // Get one Classe
     * const classe = await prisma.classe.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ClasseFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ClasseFindUniqueOrThrowArgs>
    ): Prisma__ClasseClient<ClasseGetPayload<T>>

    /**
     * Find the first Classe that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClasseFindFirstArgs} args - Arguments to find a Classe
     * @example
     * // Get one Classe
     * const classe = await prisma.classe.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ClasseFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ClasseFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Classe'> extends True ? Prisma__ClasseClient<ClasseGetPayload<T>> : Prisma__ClasseClient<ClasseGetPayload<T> | null, null>

    /**
     * Find the first Classe that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClasseFindFirstOrThrowArgs} args - Arguments to find a Classe
     * @example
     * // Get one Classe
     * const classe = await prisma.classe.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ClasseFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ClasseFindFirstOrThrowArgs>
    ): Prisma__ClasseClient<ClasseGetPayload<T>>

    /**
     * Find zero or more Classes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClasseFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Classes
     * const classes = await prisma.classe.findMany()
     * 
     * // Get first 10 Classes
     * const classes = await prisma.classe.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const classeWithIdOnly = await prisma.classe.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ClasseFindManyArgs>(
      args?: SelectSubset<T, ClasseFindManyArgs>
    ): Prisma.PrismaPromise<Array<ClasseGetPayload<T>>>

    /**
     * Create a Classe.
     * @param {ClasseCreateArgs} args - Arguments to create a Classe.
     * @example
     * // Create one Classe
     * const Classe = await prisma.classe.create({
     *   data: {
     *     // ... data to create a Classe
     *   }
     * })
     * 
    **/
    create<T extends ClasseCreateArgs>(
      args: SelectSubset<T, ClasseCreateArgs>
    ): Prisma__ClasseClient<ClasseGetPayload<T>>

    /**
     * Create many Classes.
     *     @param {ClasseCreateManyArgs} args - Arguments to create many Classes.
     *     @example
     *     // Create many Classes
     *     const classe = await prisma.classe.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ClasseCreateManyArgs>(
      args?: SelectSubset<T, ClasseCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Classe.
     * @param {ClasseDeleteArgs} args - Arguments to delete one Classe.
     * @example
     * // Delete one Classe
     * const Classe = await prisma.classe.delete({
     *   where: {
     *     // ... filter to delete one Classe
     *   }
     * })
     * 
    **/
    delete<T extends ClasseDeleteArgs>(
      args: SelectSubset<T, ClasseDeleteArgs>
    ): Prisma__ClasseClient<ClasseGetPayload<T>>

    /**
     * Update one Classe.
     * @param {ClasseUpdateArgs} args - Arguments to update one Classe.
     * @example
     * // Update one Classe
     * const classe = await prisma.classe.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ClasseUpdateArgs>(
      args: SelectSubset<T, ClasseUpdateArgs>
    ): Prisma__ClasseClient<ClasseGetPayload<T>>

    /**
     * Delete zero or more Classes.
     * @param {ClasseDeleteManyArgs} args - Arguments to filter Classes to delete.
     * @example
     * // Delete a few Classes
     * const { count } = await prisma.classe.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ClasseDeleteManyArgs>(
      args?: SelectSubset<T, ClasseDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClasseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Classes
     * const classe = await prisma.classe.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ClasseUpdateManyArgs>(
      args: SelectSubset<T, ClasseUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Classe.
     * @param {ClasseUpsertArgs} args - Arguments to update or create a Classe.
     * @example
     * // Update or create a Classe
     * const classe = await prisma.classe.upsert({
     *   create: {
     *     // ... data to create a Classe
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Classe we want to update
     *   }
     * })
    **/
    upsert<T extends ClasseUpsertArgs>(
      args: SelectSubset<T, ClasseUpsertArgs>
    ): Prisma__ClasseClient<ClasseGetPayload<T>>

    /**
     * Count the number of Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClasseCountArgs} args - Arguments to filter Classes to count.
     * @example
     * // Count the number of Classes
     * const count = await prisma.classe.count({
     *   where: {
     *     // ... the filter for the Classes we want to count
     *   }
     * })
    **/
    count<T extends ClasseCountArgs>(
      args?: Subset<T, ClasseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClasseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Classe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClasseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClasseAggregateArgs>(args: Subset<T, ClasseAggregateArgs>): Prisma.PrismaPromise<GetClasseAggregateType<T>>

    /**
     * Group by Classe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClasseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClasseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClasseGroupByArgs['orderBy'] }
        : { orderBy?: ClasseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClasseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClasseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Classe.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ClasseClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Carte<T extends Classe$CarteArgs= {}>(args?: Subset<T, Classe$CarteArgs>): Prisma.PrismaPromise<Array<CarteGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Classe base type for findUnique actions
   */
  export type ClasseFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Classe
     */
    select?: ClasseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClasseInclude | null
    /**
     * Filter, which Classe to fetch.
     */
    where: ClasseWhereUniqueInput
  }

  /**
   * Classe findUnique
   */
  export interface ClasseFindUniqueArgs extends ClasseFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Classe findUniqueOrThrow
   */
  export type ClasseFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Classe
     */
    select?: ClasseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClasseInclude | null
    /**
     * Filter, which Classe to fetch.
     */
    where: ClasseWhereUniqueInput
  }


  /**
   * Classe base type for findFirst actions
   */
  export type ClasseFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Classe
     */
    select?: ClasseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClasseInclude | null
    /**
     * Filter, which Classe to fetch.
     */
    where?: ClasseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: Enumerable<ClasseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Classes.
     */
    cursor?: ClasseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Classes.
     */
    distinct?: Enumerable<ClasseScalarFieldEnum>
  }

  /**
   * Classe findFirst
   */
  export interface ClasseFindFirstArgs extends ClasseFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Classe findFirstOrThrow
   */
  export type ClasseFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Classe
     */
    select?: ClasseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClasseInclude | null
    /**
     * Filter, which Classe to fetch.
     */
    where?: ClasseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: Enumerable<ClasseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Classes.
     */
    cursor?: ClasseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Classes.
     */
    distinct?: Enumerable<ClasseScalarFieldEnum>
  }


  /**
   * Classe findMany
   */
  export type ClasseFindManyArgs = {
    /**
     * Select specific fields to fetch from the Classe
     */
    select?: ClasseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClasseInclude | null
    /**
     * Filter, which Classes to fetch.
     */
    where?: ClasseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: Enumerable<ClasseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Classes.
     */
    cursor?: ClasseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    distinct?: Enumerable<ClasseScalarFieldEnum>
  }


  /**
   * Classe create
   */
  export type ClasseCreateArgs = {
    /**
     * Select specific fields to fetch from the Classe
     */
    select?: ClasseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClasseInclude | null
    /**
     * The data needed to create a Classe.
     */
    data: XOR<ClasseCreateInput, ClasseUncheckedCreateInput>
  }


  /**
   * Classe createMany
   */
  export type ClasseCreateManyArgs = {
    /**
     * The data used to create many Classes.
     */
    data: Enumerable<ClasseCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Classe update
   */
  export type ClasseUpdateArgs = {
    /**
     * Select specific fields to fetch from the Classe
     */
    select?: ClasseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClasseInclude | null
    /**
     * The data needed to update a Classe.
     */
    data: XOR<ClasseUpdateInput, ClasseUncheckedUpdateInput>
    /**
     * Choose, which Classe to update.
     */
    where: ClasseWhereUniqueInput
  }


  /**
   * Classe updateMany
   */
  export type ClasseUpdateManyArgs = {
    /**
     * The data used to update Classes.
     */
    data: XOR<ClasseUpdateManyMutationInput, ClasseUncheckedUpdateManyInput>
    /**
     * Filter which Classes to update
     */
    where?: ClasseWhereInput
  }


  /**
   * Classe upsert
   */
  export type ClasseUpsertArgs = {
    /**
     * Select specific fields to fetch from the Classe
     */
    select?: ClasseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClasseInclude | null
    /**
     * The filter to search for the Classe to update in case it exists.
     */
    where: ClasseWhereUniqueInput
    /**
     * In case the Classe found by the `where` argument doesn't exist, create a new Classe with this data.
     */
    create: XOR<ClasseCreateInput, ClasseUncheckedCreateInput>
    /**
     * In case the Classe was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClasseUpdateInput, ClasseUncheckedUpdateInput>
  }


  /**
   * Classe delete
   */
  export type ClasseDeleteArgs = {
    /**
     * Select specific fields to fetch from the Classe
     */
    select?: ClasseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClasseInclude | null
    /**
     * Filter which Classe to delete.
     */
    where: ClasseWhereUniqueInput
  }


  /**
   * Classe deleteMany
   */
  export type ClasseDeleteManyArgs = {
    /**
     * Filter which Classes to delete
     */
    where?: ClasseWhereInput
  }


  /**
   * Classe.Carte
   */
  export type Classe$CarteArgs = {
    /**
     * Select specific fields to fetch from the Carte
     */
    select?: CarteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarteInclude | null
    where?: CarteWhereInput
    orderBy?: Enumerable<CarteOrderByWithRelationInput>
    cursor?: CarteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CarteScalarFieldEnum>
  }


  /**
   * Classe without action
   */
  export type ClasseArgs = {
    /**
     * Select specific fields to fetch from the Classe
     */
    select?: ClasseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClasseInclude | null
  }



  /**
   * Model Capacite
   */


  export type AggregateCapacite = {
    _count: CapaciteCountAggregateOutputType | null
    _avg: CapaciteAvgAggregateOutputType | null
    _sum: CapaciteSumAggregateOutputType | null
    _min: CapaciteMinAggregateOutputType | null
    _max: CapaciteMaxAggregateOutputType | null
  }

  export type CapaciteAvgAggregateOutputType = {
    id: number | null
    carteId: number | null
  }

  export type CapaciteSumAggregateOutputType = {
    id: number | null
    carteId: number | null
  }

  export type CapaciteMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    carteId: number | null
  }

  export type CapaciteMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    carteId: number | null
  }

  export type CapaciteCountAggregateOutputType = {
    id: number
    name: number
    description: number
    carteId: number
    _all: number
  }


  export type CapaciteAvgAggregateInputType = {
    id?: true
    carteId?: true
  }

  export type CapaciteSumAggregateInputType = {
    id?: true
    carteId?: true
  }

  export type CapaciteMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    carteId?: true
  }

  export type CapaciteMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    carteId?: true
  }

  export type CapaciteCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    carteId?: true
    _all?: true
  }

  export type CapaciteAggregateArgs = {
    /**
     * Filter which Capacite to aggregate.
     */
    where?: CapaciteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Capacites to fetch.
     */
    orderBy?: Enumerable<CapaciteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CapaciteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Capacites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Capacites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Capacites
    **/
    _count?: true | CapaciteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CapaciteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CapaciteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CapaciteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CapaciteMaxAggregateInputType
  }

  export type GetCapaciteAggregateType<T extends CapaciteAggregateArgs> = {
        [P in keyof T & keyof AggregateCapacite]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCapacite[P]>
      : GetScalarType<T[P], AggregateCapacite[P]>
  }




  export type CapaciteGroupByArgs = {
    where?: CapaciteWhereInput
    orderBy?: Enumerable<CapaciteOrderByWithAggregationInput>
    by: CapaciteScalarFieldEnum[]
    having?: CapaciteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CapaciteCountAggregateInputType | true
    _avg?: CapaciteAvgAggregateInputType
    _sum?: CapaciteSumAggregateInputType
    _min?: CapaciteMinAggregateInputType
    _max?: CapaciteMaxAggregateInputType
  }


  export type CapaciteGroupByOutputType = {
    id: number
    name: string
    description: string
    carteId: number | null
    _count: CapaciteCountAggregateOutputType | null
    _avg: CapaciteAvgAggregateOutputType | null
    _sum: CapaciteSumAggregateOutputType | null
    _min: CapaciteMinAggregateOutputType | null
    _max: CapaciteMaxAggregateOutputType | null
  }

  type GetCapaciteGroupByPayload<T extends CapaciteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CapaciteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CapaciteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CapaciteGroupByOutputType[P]>
            : GetScalarType<T[P], CapaciteGroupByOutputType[P]>
        }
      >
    >


  export type CapaciteSelect = {
    id?: boolean
    name?: boolean
    description?: boolean
    carteId?: boolean
    Carte?: boolean | CarteArgs
  }


  export type CapaciteInclude = {
    Carte?: boolean | CarteArgs
  }

  export type CapaciteGetPayload<S extends boolean | null | undefined | CapaciteArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Capacite :
    S extends undefined ? never :
    S extends { include: any } & (CapaciteArgs | CapaciteFindManyArgs)
    ? Capacite  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Carte' ? CarteGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (CapaciteArgs | CapaciteFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Carte' ? CarteGetPayload<S['select'][P]> | null :  P extends keyof Capacite ? Capacite[P] : never
  } 
      : Capacite


  type CapaciteCountArgs = 
    Omit<CapaciteFindManyArgs, 'select' | 'include'> & {
      select?: CapaciteCountAggregateInputType | true
    }

  export interface CapaciteDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Capacite that matches the filter.
     * @param {CapaciteFindUniqueArgs} args - Arguments to find a Capacite
     * @example
     * // Get one Capacite
     * const capacite = await prisma.capacite.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CapaciteFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CapaciteFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Capacite'> extends True ? Prisma__CapaciteClient<CapaciteGetPayload<T>> : Prisma__CapaciteClient<CapaciteGetPayload<T> | null, null>

    /**
     * Find one Capacite that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CapaciteFindUniqueOrThrowArgs} args - Arguments to find a Capacite
     * @example
     * // Get one Capacite
     * const capacite = await prisma.capacite.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CapaciteFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CapaciteFindUniqueOrThrowArgs>
    ): Prisma__CapaciteClient<CapaciteGetPayload<T>>

    /**
     * Find the first Capacite that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CapaciteFindFirstArgs} args - Arguments to find a Capacite
     * @example
     * // Get one Capacite
     * const capacite = await prisma.capacite.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CapaciteFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CapaciteFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Capacite'> extends True ? Prisma__CapaciteClient<CapaciteGetPayload<T>> : Prisma__CapaciteClient<CapaciteGetPayload<T> | null, null>

    /**
     * Find the first Capacite that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CapaciteFindFirstOrThrowArgs} args - Arguments to find a Capacite
     * @example
     * // Get one Capacite
     * const capacite = await prisma.capacite.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CapaciteFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CapaciteFindFirstOrThrowArgs>
    ): Prisma__CapaciteClient<CapaciteGetPayload<T>>

    /**
     * Find zero or more Capacites that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CapaciteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Capacites
     * const capacites = await prisma.capacite.findMany()
     * 
     * // Get first 10 Capacites
     * const capacites = await prisma.capacite.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const capaciteWithIdOnly = await prisma.capacite.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CapaciteFindManyArgs>(
      args?: SelectSubset<T, CapaciteFindManyArgs>
    ): Prisma.PrismaPromise<Array<CapaciteGetPayload<T>>>

    /**
     * Create a Capacite.
     * @param {CapaciteCreateArgs} args - Arguments to create a Capacite.
     * @example
     * // Create one Capacite
     * const Capacite = await prisma.capacite.create({
     *   data: {
     *     // ... data to create a Capacite
     *   }
     * })
     * 
    **/
    create<T extends CapaciteCreateArgs>(
      args: SelectSubset<T, CapaciteCreateArgs>
    ): Prisma__CapaciteClient<CapaciteGetPayload<T>>

    /**
     * Create many Capacites.
     *     @param {CapaciteCreateManyArgs} args - Arguments to create many Capacites.
     *     @example
     *     // Create many Capacites
     *     const capacite = await prisma.capacite.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CapaciteCreateManyArgs>(
      args?: SelectSubset<T, CapaciteCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Capacite.
     * @param {CapaciteDeleteArgs} args - Arguments to delete one Capacite.
     * @example
     * // Delete one Capacite
     * const Capacite = await prisma.capacite.delete({
     *   where: {
     *     // ... filter to delete one Capacite
     *   }
     * })
     * 
    **/
    delete<T extends CapaciteDeleteArgs>(
      args: SelectSubset<T, CapaciteDeleteArgs>
    ): Prisma__CapaciteClient<CapaciteGetPayload<T>>

    /**
     * Update one Capacite.
     * @param {CapaciteUpdateArgs} args - Arguments to update one Capacite.
     * @example
     * // Update one Capacite
     * const capacite = await prisma.capacite.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CapaciteUpdateArgs>(
      args: SelectSubset<T, CapaciteUpdateArgs>
    ): Prisma__CapaciteClient<CapaciteGetPayload<T>>

    /**
     * Delete zero or more Capacites.
     * @param {CapaciteDeleteManyArgs} args - Arguments to filter Capacites to delete.
     * @example
     * // Delete a few Capacites
     * const { count } = await prisma.capacite.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CapaciteDeleteManyArgs>(
      args?: SelectSubset<T, CapaciteDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Capacites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CapaciteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Capacites
     * const capacite = await prisma.capacite.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CapaciteUpdateManyArgs>(
      args: SelectSubset<T, CapaciteUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Capacite.
     * @param {CapaciteUpsertArgs} args - Arguments to update or create a Capacite.
     * @example
     * // Update or create a Capacite
     * const capacite = await prisma.capacite.upsert({
     *   create: {
     *     // ... data to create a Capacite
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Capacite we want to update
     *   }
     * })
    **/
    upsert<T extends CapaciteUpsertArgs>(
      args: SelectSubset<T, CapaciteUpsertArgs>
    ): Prisma__CapaciteClient<CapaciteGetPayload<T>>

    /**
     * Count the number of Capacites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CapaciteCountArgs} args - Arguments to filter Capacites to count.
     * @example
     * // Count the number of Capacites
     * const count = await prisma.capacite.count({
     *   where: {
     *     // ... the filter for the Capacites we want to count
     *   }
     * })
    **/
    count<T extends CapaciteCountArgs>(
      args?: Subset<T, CapaciteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CapaciteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Capacite.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CapaciteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CapaciteAggregateArgs>(args: Subset<T, CapaciteAggregateArgs>): Prisma.PrismaPromise<GetCapaciteAggregateType<T>>

    /**
     * Group by Capacite.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CapaciteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CapaciteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CapaciteGroupByArgs['orderBy'] }
        : { orderBy?: CapaciteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CapaciteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCapaciteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Capacite.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CapaciteClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Carte<T extends CarteArgs= {}>(args?: Subset<T, CarteArgs>): Prisma__CarteClient<CarteGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Capacite base type for findUnique actions
   */
  export type CapaciteFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Capacite
     */
    select?: CapaciteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CapaciteInclude | null
    /**
     * Filter, which Capacite to fetch.
     */
    where: CapaciteWhereUniqueInput
  }

  /**
   * Capacite findUnique
   */
  export interface CapaciteFindUniqueArgs extends CapaciteFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Capacite findUniqueOrThrow
   */
  export type CapaciteFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Capacite
     */
    select?: CapaciteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CapaciteInclude | null
    /**
     * Filter, which Capacite to fetch.
     */
    where: CapaciteWhereUniqueInput
  }


  /**
   * Capacite base type for findFirst actions
   */
  export type CapaciteFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Capacite
     */
    select?: CapaciteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CapaciteInclude | null
    /**
     * Filter, which Capacite to fetch.
     */
    where?: CapaciteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Capacites to fetch.
     */
    orderBy?: Enumerable<CapaciteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Capacites.
     */
    cursor?: CapaciteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Capacites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Capacites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Capacites.
     */
    distinct?: Enumerable<CapaciteScalarFieldEnum>
  }

  /**
   * Capacite findFirst
   */
  export interface CapaciteFindFirstArgs extends CapaciteFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Capacite findFirstOrThrow
   */
  export type CapaciteFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Capacite
     */
    select?: CapaciteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CapaciteInclude | null
    /**
     * Filter, which Capacite to fetch.
     */
    where?: CapaciteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Capacites to fetch.
     */
    orderBy?: Enumerable<CapaciteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Capacites.
     */
    cursor?: CapaciteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Capacites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Capacites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Capacites.
     */
    distinct?: Enumerable<CapaciteScalarFieldEnum>
  }


  /**
   * Capacite findMany
   */
  export type CapaciteFindManyArgs = {
    /**
     * Select specific fields to fetch from the Capacite
     */
    select?: CapaciteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CapaciteInclude | null
    /**
     * Filter, which Capacites to fetch.
     */
    where?: CapaciteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Capacites to fetch.
     */
    orderBy?: Enumerable<CapaciteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Capacites.
     */
    cursor?: CapaciteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Capacites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Capacites.
     */
    skip?: number
    distinct?: Enumerable<CapaciteScalarFieldEnum>
  }


  /**
   * Capacite create
   */
  export type CapaciteCreateArgs = {
    /**
     * Select specific fields to fetch from the Capacite
     */
    select?: CapaciteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CapaciteInclude | null
    /**
     * The data needed to create a Capacite.
     */
    data: XOR<CapaciteCreateInput, CapaciteUncheckedCreateInput>
  }


  /**
   * Capacite createMany
   */
  export type CapaciteCreateManyArgs = {
    /**
     * The data used to create many Capacites.
     */
    data: Enumerable<CapaciteCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Capacite update
   */
  export type CapaciteUpdateArgs = {
    /**
     * Select specific fields to fetch from the Capacite
     */
    select?: CapaciteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CapaciteInclude | null
    /**
     * The data needed to update a Capacite.
     */
    data: XOR<CapaciteUpdateInput, CapaciteUncheckedUpdateInput>
    /**
     * Choose, which Capacite to update.
     */
    where: CapaciteWhereUniqueInput
  }


  /**
   * Capacite updateMany
   */
  export type CapaciteUpdateManyArgs = {
    /**
     * The data used to update Capacites.
     */
    data: XOR<CapaciteUpdateManyMutationInput, CapaciteUncheckedUpdateManyInput>
    /**
     * Filter which Capacites to update
     */
    where?: CapaciteWhereInput
  }


  /**
   * Capacite upsert
   */
  export type CapaciteUpsertArgs = {
    /**
     * Select specific fields to fetch from the Capacite
     */
    select?: CapaciteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CapaciteInclude | null
    /**
     * The filter to search for the Capacite to update in case it exists.
     */
    where: CapaciteWhereUniqueInput
    /**
     * In case the Capacite found by the `where` argument doesn't exist, create a new Capacite with this data.
     */
    create: XOR<CapaciteCreateInput, CapaciteUncheckedCreateInput>
    /**
     * In case the Capacite was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CapaciteUpdateInput, CapaciteUncheckedUpdateInput>
  }


  /**
   * Capacite delete
   */
  export type CapaciteDeleteArgs = {
    /**
     * Select specific fields to fetch from the Capacite
     */
    select?: CapaciteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CapaciteInclude | null
    /**
     * Filter which Capacite to delete.
     */
    where: CapaciteWhereUniqueInput
  }


  /**
   * Capacite deleteMany
   */
  export type CapaciteDeleteManyArgs = {
    /**
     * Filter which Capacites to delete
     */
    where?: CapaciteWhereInput
  }


  /**
   * Capacite without action
   */
  export type CapaciteArgs = {
    /**
     * Select specific fields to fetch from the Capacite
     */
    select?: CapaciteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CapaciteInclude | null
  }



  /**
   * Model Competence
   */


  export type AggregateCompetence = {
    _count: CompetenceCountAggregateOutputType | null
    _avg: CompetenceAvgAggregateOutputType | null
    _sum: CompetenceSumAggregateOutputType | null
    _min: CompetenceMinAggregateOutputType | null
    _max: CompetenceMaxAggregateOutputType | null
  }

  export type CompetenceAvgAggregateOutputType = {
    id: number | null
  }

  export type CompetenceSumAggregateOutputType = {
    id: number | null
  }

  export type CompetenceMinAggregateOutputType = {
    id: number | null
    name: string | null
    type: string | null
    description: string | null
  }

  export type CompetenceMaxAggregateOutputType = {
    id: number | null
    name: string | null
    type: string | null
    description: string | null
  }

  export type CompetenceCountAggregateOutputType = {
    id: number
    name: number
    type: number
    description: number
    _all: number
  }


  export type CompetenceAvgAggregateInputType = {
    id?: true
  }

  export type CompetenceSumAggregateInputType = {
    id?: true
  }

  export type CompetenceMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    description?: true
  }

  export type CompetenceMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    description?: true
  }

  export type CompetenceCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    description?: true
    _all?: true
  }

  export type CompetenceAggregateArgs = {
    /**
     * Filter which Competence to aggregate.
     */
    where?: CompetenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Competences to fetch.
     */
    orderBy?: Enumerable<CompetenceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompetenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Competences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Competences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Competences
    **/
    _count?: true | CompetenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompetenceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompetenceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompetenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompetenceMaxAggregateInputType
  }

  export type GetCompetenceAggregateType<T extends CompetenceAggregateArgs> = {
        [P in keyof T & keyof AggregateCompetence]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompetence[P]>
      : GetScalarType<T[P], AggregateCompetence[P]>
  }




  export type CompetenceGroupByArgs = {
    where?: CompetenceWhereInput
    orderBy?: Enumerable<CompetenceOrderByWithAggregationInput>
    by: CompetenceScalarFieldEnum[]
    having?: CompetenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompetenceCountAggregateInputType | true
    _avg?: CompetenceAvgAggregateInputType
    _sum?: CompetenceSumAggregateInputType
    _min?: CompetenceMinAggregateInputType
    _max?: CompetenceMaxAggregateInputType
  }


  export type CompetenceGroupByOutputType = {
    id: number
    name: string
    type: string
    description: string
    _count: CompetenceCountAggregateOutputType | null
    _avg: CompetenceAvgAggregateOutputType | null
    _sum: CompetenceSumAggregateOutputType | null
    _min: CompetenceMinAggregateOutputType | null
    _max: CompetenceMaxAggregateOutputType | null
  }

  type GetCompetenceGroupByPayload<T extends CompetenceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CompetenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompetenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompetenceGroupByOutputType[P]>
            : GetScalarType<T[P], CompetenceGroupByOutputType[P]>
        }
      >
    >


  export type CompetenceSelect = {
    id?: boolean
    name?: boolean
    type?: boolean
    description?: boolean
    carte_passvie?: boolean | Competence$carte_passvieArgs
    carte_active?: boolean | Competence$carte_activeArgs
    _count?: boolean | CompetenceCountOutputTypeArgs
  }


  export type CompetenceInclude = {
    carte_passvie?: boolean | Competence$carte_passvieArgs
    carte_active?: boolean | Competence$carte_activeArgs
    _count?: boolean | CompetenceCountOutputTypeArgs
  }

  export type CompetenceGetPayload<S extends boolean | null | undefined | CompetenceArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Competence :
    S extends undefined ? never :
    S extends { include: any } & (CompetenceArgs | CompetenceFindManyArgs)
    ? Competence  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'carte_passvie' ? Array < CarteGetPayload<S['include'][P]>>  :
        P extends 'carte_active' ? Array < CartesCapacictesActiveGetPayload<S['include'][P]>>  :
        P extends '_count' ? CompetenceCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (CompetenceArgs | CompetenceFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'carte_passvie' ? Array < CarteGetPayload<S['select'][P]>>  :
        P extends 'carte_active' ? Array < CartesCapacictesActiveGetPayload<S['select'][P]>>  :
        P extends '_count' ? CompetenceCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Competence ? Competence[P] : never
  } 
      : Competence


  type CompetenceCountArgs = 
    Omit<CompetenceFindManyArgs, 'select' | 'include'> & {
      select?: CompetenceCountAggregateInputType | true
    }

  export interface CompetenceDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Competence that matches the filter.
     * @param {CompetenceFindUniqueArgs} args - Arguments to find a Competence
     * @example
     * // Get one Competence
     * const competence = await prisma.competence.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CompetenceFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CompetenceFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Competence'> extends True ? Prisma__CompetenceClient<CompetenceGetPayload<T>> : Prisma__CompetenceClient<CompetenceGetPayload<T> | null, null>

    /**
     * Find one Competence that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CompetenceFindUniqueOrThrowArgs} args - Arguments to find a Competence
     * @example
     * // Get one Competence
     * const competence = await prisma.competence.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CompetenceFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CompetenceFindUniqueOrThrowArgs>
    ): Prisma__CompetenceClient<CompetenceGetPayload<T>>

    /**
     * Find the first Competence that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetenceFindFirstArgs} args - Arguments to find a Competence
     * @example
     * // Get one Competence
     * const competence = await prisma.competence.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CompetenceFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CompetenceFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Competence'> extends True ? Prisma__CompetenceClient<CompetenceGetPayload<T>> : Prisma__CompetenceClient<CompetenceGetPayload<T> | null, null>

    /**
     * Find the first Competence that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetenceFindFirstOrThrowArgs} args - Arguments to find a Competence
     * @example
     * // Get one Competence
     * const competence = await prisma.competence.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CompetenceFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CompetenceFindFirstOrThrowArgs>
    ): Prisma__CompetenceClient<CompetenceGetPayload<T>>

    /**
     * Find zero or more Competences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetenceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Competences
     * const competences = await prisma.competence.findMany()
     * 
     * // Get first 10 Competences
     * const competences = await prisma.competence.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const competenceWithIdOnly = await prisma.competence.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CompetenceFindManyArgs>(
      args?: SelectSubset<T, CompetenceFindManyArgs>
    ): Prisma.PrismaPromise<Array<CompetenceGetPayload<T>>>

    /**
     * Create a Competence.
     * @param {CompetenceCreateArgs} args - Arguments to create a Competence.
     * @example
     * // Create one Competence
     * const Competence = await prisma.competence.create({
     *   data: {
     *     // ... data to create a Competence
     *   }
     * })
     * 
    **/
    create<T extends CompetenceCreateArgs>(
      args: SelectSubset<T, CompetenceCreateArgs>
    ): Prisma__CompetenceClient<CompetenceGetPayload<T>>

    /**
     * Create many Competences.
     *     @param {CompetenceCreateManyArgs} args - Arguments to create many Competences.
     *     @example
     *     // Create many Competences
     *     const competence = await prisma.competence.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CompetenceCreateManyArgs>(
      args?: SelectSubset<T, CompetenceCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Competence.
     * @param {CompetenceDeleteArgs} args - Arguments to delete one Competence.
     * @example
     * // Delete one Competence
     * const Competence = await prisma.competence.delete({
     *   where: {
     *     // ... filter to delete one Competence
     *   }
     * })
     * 
    **/
    delete<T extends CompetenceDeleteArgs>(
      args: SelectSubset<T, CompetenceDeleteArgs>
    ): Prisma__CompetenceClient<CompetenceGetPayload<T>>

    /**
     * Update one Competence.
     * @param {CompetenceUpdateArgs} args - Arguments to update one Competence.
     * @example
     * // Update one Competence
     * const competence = await prisma.competence.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CompetenceUpdateArgs>(
      args: SelectSubset<T, CompetenceUpdateArgs>
    ): Prisma__CompetenceClient<CompetenceGetPayload<T>>

    /**
     * Delete zero or more Competences.
     * @param {CompetenceDeleteManyArgs} args - Arguments to filter Competences to delete.
     * @example
     * // Delete a few Competences
     * const { count } = await prisma.competence.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CompetenceDeleteManyArgs>(
      args?: SelectSubset<T, CompetenceDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Competences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Competences
     * const competence = await prisma.competence.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CompetenceUpdateManyArgs>(
      args: SelectSubset<T, CompetenceUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Competence.
     * @param {CompetenceUpsertArgs} args - Arguments to update or create a Competence.
     * @example
     * // Update or create a Competence
     * const competence = await prisma.competence.upsert({
     *   create: {
     *     // ... data to create a Competence
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Competence we want to update
     *   }
     * })
    **/
    upsert<T extends CompetenceUpsertArgs>(
      args: SelectSubset<T, CompetenceUpsertArgs>
    ): Prisma__CompetenceClient<CompetenceGetPayload<T>>

    /**
     * Count the number of Competences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetenceCountArgs} args - Arguments to filter Competences to count.
     * @example
     * // Count the number of Competences
     * const count = await prisma.competence.count({
     *   where: {
     *     // ... the filter for the Competences we want to count
     *   }
     * })
    **/
    count<T extends CompetenceCountArgs>(
      args?: Subset<T, CompetenceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompetenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Competence.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompetenceAggregateArgs>(args: Subset<T, CompetenceAggregateArgs>): Prisma.PrismaPromise<GetCompetenceAggregateType<T>>

    /**
     * Group by Competence.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompetenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompetenceGroupByArgs['orderBy'] }
        : { orderBy?: CompetenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompetenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompetenceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Competence.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CompetenceClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    carte_passvie<T extends Competence$carte_passvieArgs= {}>(args?: Subset<T, Competence$carte_passvieArgs>): Prisma.PrismaPromise<Array<CarteGetPayload<T>>| Null>;

    carte_active<T extends Competence$carte_activeArgs= {}>(args?: Subset<T, Competence$carte_activeArgs>): Prisma.PrismaPromise<Array<CartesCapacictesActiveGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Competence base type for findUnique actions
   */
  export type CompetenceFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompetenceInclude | null
    /**
     * Filter, which Competence to fetch.
     */
    where: CompetenceWhereUniqueInput
  }

  /**
   * Competence findUnique
   */
  export interface CompetenceFindUniqueArgs extends CompetenceFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Competence findUniqueOrThrow
   */
  export type CompetenceFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompetenceInclude | null
    /**
     * Filter, which Competence to fetch.
     */
    where: CompetenceWhereUniqueInput
  }


  /**
   * Competence base type for findFirst actions
   */
  export type CompetenceFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompetenceInclude | null
    /**
     * Filter, which Competence to fetch.
     */
    where?: CompetenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Competences to fetch.
     */
    orderBy?: Enumerable<CompetenceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Competences.
     */
    cursor?: CompetenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Competences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Competences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Competences.
     */
    distinct?: Enumerable<CompetenceScalarFieldEnum>
  }

  /**
   * Competence findFirst
   */
  export interface CompetenceFindFirstArgs extends CompetenceFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Competence findFirstOrThrow
   */
  export type CompetenceFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompetenceInclude | null
    /**
     * Filter, which Competence to fetch.
     */
    where?: CompetenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Competences to fetch.
     */
    orderBy?: Enumerable<CompetenceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Competences.
     */
    cursor?: CompetenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Competences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Competences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Competences.
     */
    distinct?: Enumerable<CompetenceScalarFieldEnum>
  }


  /**
   * Competence findMany
   */
  export type CompetenceFindManyArgs = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompetenceInclude | null
    /**
     * Filter, which Competences to fetch.
     */
    where?: CompetenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Competences to fetch.
     */
    orderBy?: Enumerable<CompetenceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Competences.
     */
    cursor?: CompetenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Competences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Competences.
     */
    skip?: number
    distinct?: Enumerable<CompetenceScalarFieldEnum>
  }


  /**
   * Competence create
   */
  export type CompetenceCreateArgs = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompetenceInclude | null
    /**
     * The data needed to create a Competence.
     */
    data: XOR<CompetenceCreateInput, CompetenceUncheckedCreateInput>
  }


  /**
   * Competence createMany
   */
  export type CompetenceCreateManyArgs = {
    /**
     * The data used to create many Competences.
     */
    data: Enumerable<CompetenceCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Competence update
   */
  export type CompetenceUpdateArgs = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompetenceInclude | null
    /**
     * The data needed to update a Competence.
     */
    data: XOR<CompetenceUpdateInput, CompetenceUncheckedUpdateInput>
    /**
     * Choose, which Competence to update.
     */
    where: CompetenceWhereUniqueInput
  }


  /**
   * Competence updateMany
   */
  export type CompetenceUpdateManyArgs = {
    /**
     * The data used to update Competences.
     */
    data: XOR<CompetenceUpdateManyMutationInput, CompetenceUncheckedUpdateManyInput>
    /**
     * Filter which Competences to update
     */
    where?: CompetenceWhereInput
  }


  /**
   * Competence upsert
   */
  export type CompetenceUpsertArgs = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompetenceInclude | null
    /**
     * The filter to search for the Competence to update in case it exists.
     */
    where: CompetenceWhereUniqueInput
    /**
     * In case the Competence found by the `where` argument doesn't exist, create a new Competence with this data.
     */
    create: XOR<CompetenceCreateInput, CompetenceUncheckedCreateInput>
    /**
     * In case the Competence was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompetenceUpdateInput, CompetenceUncheckedUpdateInput>
  }


  /**
   * Competence delete
   */
  export type CompetenceDeleteArgs = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompetenceInclude | null
    /**
     * Filter which Competence to delete.
     */
    where: CompetenceWhereUniqueInput
  }


  /**
   * Competence deleteMany
   */
  export type CompetenceDeleteManyArgs = {
    /**
     * Filter which Competences to delete
     */
    where?: CompetenceWhereInput
  }


  /**
   * Competence.carte_passvie
   */
  export type Competence$carte_passvieArgs = {
    /**
     * Select specific fields to fetch from the Carte
     */
    select?: CarteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarteInclude | null
    where?: CarteWhereInput
    orderBy?: Enumerable<CarteOrderByWithRelationInput>
    cursor?: CarteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CarteScalarFieldEnum>
  }


  /**
   * Competence.carte_active
   */
  export type Competence$carte_activeArgs = {
    /**
     * Select specific fields to fetch from the CartesCapacictesActive
     */
    select?: CartesCapacictesActiveSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CartesCapacictesActiveInclude | null
    where?: CartesCapacictesActiveWhereInput
    orderBy?: Enumerable<CartesCapacictesActiveOrderByWithRelationInput>
    cursor?: CartesCapacictesActiveWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CartesCapacictesActiveScalarFieldEnum>
  }


  /**
   * Competence without action
   */
  export type CompetenceArgs = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompetenceInclude | null
  }



  /**
   * Model CartesCapacictesActive
   */


  export type AggregateCartesCapacictesActive = {
    _count: CartesCapacictesActiveCountAggregateOutputType | null
    _avg: CartesCapacictesActiveAvgAggregateOutputType | null
    _sum: CartesCapacictesActiveSumAggregateOutputType | null
    _min: CartesCapacictesActiveMinAggregateOutputType | null
    _max: CartesCapacictesActiveMaxAggregateOutputType | null
  }

  export type CartesCapacictesActiveAvgAggregateOutputType = {
    competenceId: number | null
    carteId: number | null
  }

  export type CartesCapacictesActiveSumAggregateOutputType = {
    competenceId: number | null
    carteId: number | null
  }

  export type CartesCapacictesActiveMinAggregateOutputType = {
    competenceId: number | null
    carteId: number | null
  }

  export type CartesCapacictesActiveMaxAggregateOutputType = {
    competenceId: number | null
    carteId: number | null
  }

  export type CartesCapacictesActiveCountAggregateOutputType = {
    competenceId: number
    carteId: number
    _all: number
  }


  export type CartesCapacictesActiveAvgAggregateInputType = {
    competenceId?: true
    carteId?: true
  }

  export type CartesCapacictesActiveSumAggregateInputType = {
    competenceId?: true
    carteId?: true
  }

  export type CartesCapacictesActiveMinAggregateInputType = {
    competenceId?: true
    carteId?: true
  }

  export type CartesCapacictesActiveMaxAggregateInputType = {
    competenceId?: true
    carteId?: true
  }

  export type CartesCapacictesActiveCountAggregateInputType = {
    competenceId?: true
    carteId?: true
    _all?: true
  }

  export type CartesCapacictesActiveAggregateArgs = {
    /**
     * Filter which CartesCapacictesActive to aggregate.
     */
    where?: CartesCapacictesActiveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CartesCapacictesActives to fetch.
     */
    orderBy?: Enumerable<CartesCapacictesActiveOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CartesCapacictesActiveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CartesCapacictesActives from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CartesCapacictesActives.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CartesCapacictesActives
    **/
    _count?: true | CartesCapacictesActiveCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CartesCapacictesActiveAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CartesCapacictesActiveSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CartesCapacictesActiveMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CartesCapacictesActiveMaxAggregateInputType
  }

  export type GetCartesCapacictesActiveAggregateType<T extends CartesCapacictesActiveAggregateArgs> = {
        [P in keyof T & keyof AggregateCartesCapacictesActive]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCartesCapacictesActive[P]>
      : GetScalarType<T[P], AggregateCartesCapacictesActive[P]>
  }




  export type CartesCapacictesActiveGroupByArgs = {
    where?: CartesCapacictesActiveWhereInput
    orderBy?: Enumerable<CartesCapacictesActiveOrderByWithAggregationInput>
    by: CartesCapacictesActiveScalarFieldEnum[]
    having?: CartesCapacictesActiveScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CartesCapacictesActiveCountAggregateInputType | true
    _avg?: CartesCapacictesActiveAvgAggregateInputType
    _sum?: CartesCapacictesActiveSumAggregateInputType
    _min?: CartesCapacictesActiveMinAggregateInputType
    _max?: CartesCapacictesActiveMaxAggregateInputType
  }


  export type CartesCapacictesActiveGroupByOutputType = {
    competenceId: number
    carteId: number
    _count: CartesCapacictesActiveCountAggregateOutputType | null
    _avg: CartesCapacictesActiveAvgAggregateOutputType | null
    _sum: CartesCapacictesActiveSumAggregateOutputType | null
    _min: CartesCapacictesActiveMinAggregateOutputType | null
    _max: CartesCapacictesActiveMaxAggregateOutputType | null
  }

  type GetCartesCapacictesActiveGroupByPayload<T extends CartesCapacictesActiveGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CartesCapacictesActiveGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CartesCapacictesActiveGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CartesCapacictesActiveGroupByOutputType[P]>
            : GetScalarType<T[P], CartesCapacictesActiveGroupByOutputType[P]>
        }
      >
    >


  export type CartesCapacictesActiveSelect = {
    competenceId?: boolean
    carteId?: boolean
    competence?: boolean | CompetenceArgs
    carte?: boolean | CarteArgs
  }


  export type CartesCapacictesActiveInclude = {
    competence?: boolean | CompetenceArgs
    carte?: boolean | CarteArgs
  }

  export type CartesCapacictesActiveGetPayload<S extends boolean | null | undefined | CartesCapacictesActiveArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? CartesCapacictesActive :
    S extends undefined ? never :
    S extends { include: any } & (CartesCapacictesActiveArgs | CartesCapacictesActiveFindManyArgs)
    ? CartesCapacictesActive  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'competence' ? CompetenceGetPayload<S['include'][P]> :
        P extends 'carte' ? CarteGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (CartesCapacictesActiveArgs | CartesCapacictesActiveFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'competence' ? CompetenceGetPayload<S['select'][P]> :
        P extends 'carte' ? CarteGetPayload<S['select'][P]> :  P extends keyof CartesCapacictesActive ? CartesCapacictesActive[P] : never
  } 
      : CartesCapacictesActive


  type CartesCapacictesActiveCountArgs = 
    Omit<CartesCapacictesActiveFindManyArgs, 'select' | 'include'> & {
      select?: CartesCapacictesActiveCountAggregateInputType | true
    }

  export interface CartesCapacictesActiveDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one CartesCapacictesActive that matches the filter.
     * @param {CartesCapacictesActiveFindUniqueArgs} args - Arguments to find a CartesCapacictesActive
     * @example
     * // Get one CartesCapacictesActive
     * const cartesCapacictesActive = await prisma.cartesCapacictesActive.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CartesCapacictesActiveFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CartesCapacictesActiveFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'CartesCapacictesActive'> extends True ? Prisma__CartesCapacictesActiveClient<CartesCapacictesActiveGetPayload<T>> : Prisma__CartesCapacictesActiveClient<CartesCapacictesActiveGetPayload<T> | null, null>

    /**
     * Find one CartesCapacictesActive that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CartesCapacictesActiveFindUniqueOrThrowArgs} args - Arguments to find a CartesCapacictesActive
     * @example
     * // Get one CartesCapacictesActive
     * const cartesCapacictesActive = await prisma.cartesCapacictesActive.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CartesCapacictesActiveFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CartesCapacictesActiveFindUniqueOrThrowArgs>
    ): Prisma__CartesCapacictesActiveClient<CartesCapacictesActiveGetPayload<T>>

    /**
     * Find the first CartesCapacictesActive that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartesCapacictesActiveFindFirstArgs} args - Arguments to find a CartesCapacictesActive
     * @example
     * // Get one CartesCapacictesActive
     * const cartesCapacictesActive = await prisma.cartesCapacictesActive.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CartesCapacictesActiveFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CartesCapacictesActiveFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'CartesCapacictesActive'> extends True ? Prisma__CartesCapacictesActiveClient<CartesCapacictesActiveGetPayload<T>> : Prisma__CartesCapacictesActiveClient<CartesCapacictesActiveGetPayload<T> | null, null>

    /**
     * Find the first CartesCapacictesActive that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartesCapacictesActiveFindFirstOrThrowArgs} args - Arguments to find a CartesCapacictesActive
     * @example
     * // Get one CartesCapacictesActive
     * const cartesCapacictesActive = await prisma.cartesCapacictesActive.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CartesCapacictesActiveFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CartesCapacictesActiveFindFirstOrThrowArgs>
    ): Prisma__CartesCapacictesActiveClient<CartesCapacictesActiveGetPayload<T>>

    /**
     * Find zero or more CartesCapacictesActives that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartesCapacictesActiveFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CartesCapacictesActives
     * const cartesCapacictesActives = await prisma.cartesCapacictesActive.findMany()
     * 
     * // Get first 10 CartesCapacictesActives
     * const cartesCapacictesActives = await prisma.cartesCapacictesActive.findMany({ take: 10 })
     * 
     * // Only select the `competenceId`
     * const cartesCapacictesActiveWithCompetenceIdOnly = await prisma.cartesCapacictesActive.findMany({ select: { competenceId: true } })
     * 
    **/
    findMany<T extends CartesCapacictesActiveFindManyArgs>(
      args?: SelectSubset<T, CartesCapacictesActiveFindManyArgs>
    ): Prisma.PrismaPromise<Array<CartesCapacictesActiveGetPayload<T>>>

    /**
     * Create a CartesCapacictesActive.
     * @param {CartesCapacictesActiveCreateArgs} args - Arguments to create a CartesCapacictesActive.
     * @example
     * // Create one CartesCapacictesActive
     * const CartesCapacictesActive = await prisma.cartesCapacictesActive.create({
     *   data: {
     *     // ... data to create a CartesCapacictesActive
     *   }
     * })
     * 
    **/
    create<T extends CartesCapacictesActiveCreateArgs>(
      args: SelectSubset<T, CartesCapacictesActiveCreateArgs>
    ): Prisma__CartesCapacictesActiveClient<CartesCapacictesActiveGetPayload<T>>

    /**
     * Create many CartesCapacictesActives.
     *     @param {CartesCapacictesActiveCreateManyArgs} args - Arguments to create many CartesCapacictesActives.
     *     @example
     *     // Create many CartesCapacictesActives
     *     const cartesCapacictesActive = await prisma.cartesCapacictesActive.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CartesCapacictesActiveCreateManyArgs>(
      args?: SelectSubset<T, CartesCapacictesActiveCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CartesCapacictesActive.
     * @param {CartesCapacictesActiveDeleteArgs} args - Arguments to delete one CartesCapacictesActive.
     * @example
     * // Delete one CartesCapacictesActive
     * const CartesCapacictesActive = await prisma.cartesCapacictesActive.delete({
     *   where: {
     *     // ... filter to delete one CartesCapacictesActive
     *   }
     * })
     * 
    **/
    delete<T extends CartesCapacictesActiveDeleteArgs>(
      args: SelectSubset<T, CartesCapacictesActiveDeleteArgs>
    ): Prisma__CartesCapacictesActiveClient<CartesCapacictesActiveGetPayload<T>>

    /**
     * Update one CartesCapacictesActive.
     * @param {CartesCapacictesActiveUpdateArgs} args - Arguments to update one CartesCapacictesActive.
     * @example
     * // Update one CartesCapacictesActive
     * const cartesCapacictesActive = await prisma.cartesCapacictesActive.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CartesCapacictesActiveUpdateArgs>(
      args: SelectSubset<T, CartesCapacictesActiveUpdateArgs>
    ): Prisma__CartesCapacictesActiveClient<CartesCapacictesActiveGetPayload<T>>

    /**
     * Delete zero or more CartesCapacictesActives.
     * @param {CartesCapacictesActiveDeleteManyArgs} args - Arguments to filter CartesCapacictesActives to delete.
     * @example
     * // Delete a few CartesCapacictesActives
     * const { count } = await prisma.cartesCapacictesActive.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CartesCapacictesActiveDeleteManyArgs>(
      args?: SelectSubset<T, CartesCapacictesActiveDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CartesCapacictesActives.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartesCapacictesActiveUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CartesCapacictesActives
     * const cartesCapacictesActive = await prisma.cartesCapacictesActive.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CartesCapacictesActiveUpdateManyArgs>(
      args: SelectSubset<T, CartesCapacictesActiveUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CartesCapacictesActive.
     * @param {CartesCapacictesActiveUpsertArgs} args - Arguments to update or create a CartesCapacictesActive.
     * @example
     * // Update or create a CartesCapacictesActive
     * const cartesCapacictesActive = await prisma.cartesCapacictesActive.upsert({
     *   create: {
     *     // ... data to create a CartesCapacictesActive
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CartesCapacictesActive we want to update
     *   }
     * })
    **/
    upsert<T extends CartesCapacictesActiveUpsertArgs>(
      args: SelectSubset<T, CartesCapacictesActiveUpsertArgs>
    ): Prisma__CartesCapacictesActiveClient<CartesCapacictesActiveGetPayload<T>>

    /**
     * Count the number of CartesCapacictesActives.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartesCapacictesActiveCountArgs} args - Arguments to filter CartesCapacictesActives to count.
     * @example
     * // Count the number of CartesCapacictesActives
     * const count = await prisma.cartesCapacictesActive.count({
     *   where: {
     *     // ... the filter for the CartesCapacictesActives we want to count
     *   }
     * })
    **/
    count<T extends CartesCapacictesActiveCountArgs>(
      args?: Subset<T, CartesCapacictesActiveCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CartesCapacictesActiveCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CartesCapacictesActive.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartesCapacictesActiveAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CartesCapacictesActiveAggregateArgs>(args: Subset<T, CartesCapacictesActiveAggregateArgs>): Prisma.PrismaPromise<GetCartesCapacictesActiveAggregateType<T>>

    /**
     * Group by CartesCapacictesActive.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartesCapacictesActiveGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CartesCapacictesActiveGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CartesCapacictesActiveGroupByArgs['orderBy'] }
        : { orderBy?: CartesCapacictesActiveGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CartesCapacictesActiveGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCartesCapacictesActiveGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for CartesCapacictesActive.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CartesCapacictesActiveClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    competence<T extends CompetenceArgs= {}>(args?: Subset<T, CompetenceArgs>): Prisma__CompetenceClient<CompetenceGetPayload<T> | Null>;

    carte<T extends CarteArgs= {}>(args?: Subset<T, CarteArgs>): Prisma__CarteClient<CarteGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * CartesCapacictesActive base type for findUnique actions
   */
  export type CartesCapacictesActiveFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the CartesCapacictesActive
     */
    select?: CartesCapacictesActiveSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CartesCapacictesActiveInclude | null
    /**
     * Filter, which CartesCapacictesActive to fetch.
     */
    where: CartesCapacictesActiveWhereUniqueInput
  }

  /**
   * CartesCapacictesActive findUnique
   */
  export interface CartesCapacictesActiveFindUniqueArgs extends CartesCapacictesActiveFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * CartesCapacictesActive findUniqueOrThrow
   */
  export type CartesCapacictesActiveFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the CartesCapacictesActive
     */
    select?: CartesCapacictesActiveSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CartesCapacictesActiveInclude | null
    /**
     * Filter, which CartesCapacictesActive to fetch.
     */
    where: CartesCapacictesActiveWhereUniqueInput
  }


  /**
   * CartesCapacictesActive base type for findFirst actions
   */
  export type CartesCapacictesActiveFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the CartesCapacictesActive
     */
    select?: CartesCapacictesActiveSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CartesCapacictesActiveInclude | null
    /**
     * Filter, which CartesCapacictesActive to fetch.
     */
    where?: CartesCapacictesActiveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CartesCapacictesActives to fetch.
     */
    orderBy?: Enumerable<CartesCapacictesActiveOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CartesCapacictesActives.
     */
    cursor?: CartesCapacictesActiveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CartesCapacictesActives from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CartesCapacictesActives.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CartesCapacictesActives.
     */
    distinct?: Enumerable<CartesCapacictesActiveScalarFieldEnum>
  }

  /**
   * CartesCapacictesActive findFirst
   */
  export interface CartesCapacictesActiveFindFirstArgs extends CartesCapacictesActiveFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * CartesCapacictesActive findFirstOrThrow
   */
  export type CartesCapacictesActiveFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the CartesCapacictesActive
     */
    select?: CartesCapacictesActiveSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CartesCapacictesActiveInclude | null
    /**
     * Filter, which CartesCapacictesActive to fetch.
     */
    where?: CartesCapacictesActiveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CartesCapacictesActives to fetch.
     */
    orderBy?: Enumerable<CartesCapacictesActiveOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CartesCapacictesActives.
     */
    cursor?: CartesCapacictesActiveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CartesCapacictesActives from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CartesCapacictesActives.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CartesCapacictesActives.
     */
    distinct?: Enumerable<CartesCapacictesActiveScalarFieldEnum>
  }


  /**
   * CartesCapacictesActive findMany
   */
  export type CartesCapacictesActiveFindManyArgs = {
    /**
     * Select specific fields to fetch from the CartesCapacictesActive
     */
    select?: CartesCapacictesActiveSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CartesCapacictesActiveInclude | null
    /**
     * Filter, which CartesCapacictesActives to fetch.
     */
    where?: CartesCapacictesActiveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CartesCapacictesActives to fetch.
     */
    orderBy?: Enumerable<CartesCapacictesActiveOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CartesCapacictesActives.
     */
    cursor?: CartesCapacictesActiveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CartesCapacictesActives from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CartesCapacictesActives.
     */
    skip?: number
    distinct?: Enumerable<CartesCapacictesActiveScalarFieldEnum>
  }


  /**
   * CartesCapacictesActive create
   */
  export type CartesCapacictesActiveCreateArgs = {
    /**
     * Select specific fields to fetch from the CartesCapacictesActive
     */
    select?: CartesCapacictesActiveSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CartesCapacictesActiveInclude | null
    /**
     * The data needed to create a CartesCapacictesActive.
     */
    data: XOR<CartesCapacictesActiveCreateInput, CartesCapacictesActiveUncheckedCreateInput>
  }


  /**
   * CartesCapacictesActive createMany
   */
  export type CartesCapacictesActiveCreateManyArgs = {
    /**
     * The data used to create many CartesCapacictesActives.
     */
    data: Enumerable<CartesCapacictesActiveCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * CartesCapacictesActive update
   */
  export type CartesCapacictesActiveUpdateArgs = {
    /**
     * Select specific fields to fetch from the CartesCapacictesActive
     */
    select?: CartesCapacictesActiveSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CartesCapacictesActiveInclude | null
    /**
     * The data needed to update a CartesCapacictesActive.
     */
    data: XOR<CartesCapacictesActiveUpdateInput, CartesCapacictesActiveUncheckedUpdateInput>
    /**
     * Choose, which CartesCapacictesActive to update.
     */
    where: CartesCapacictesActiveWhereUniqueInput
  }


  /**
   * CartesCapacictesActive updateMany
   */
  export type CartesCapacictesActiveUpdateManyArgs = {
    /**
     * The data used to update CartesCapacictesActives.
     */
    data: XOR<CartesCapacictesActiveUpdateManyMutationInput, CartesCapacictesActiveUncheckedUpdateManyInput>
    /**
     * Filter which CartesCapacictesActives to update
     */
    where?: CartesCapacictesActiveWhereInput
  }


  /**
   * CartesCapacictesActive upsert
   */
  export type CartesCapacictesActiveUpsertArgs = {
    /**
     * Select specific fields to fetch from the CartesCapacictesActive
     */
    select?: CartesCapacictesActiveSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CartesCapacictesActiveInclude | null
    /**
     * The filter to search for the CartesCapacictesActive to update in case it exists.
     */
    where: CartesCapacictesActiveWhereUniqueInput
    /**
     * In case the CartesCapacictesActive found by the `where` argument doesn't exist, create a new CartesCapacictesActive with this data.
     */
    create: XOR<CartesCapacictesActiveCreateInput, CartesCapacictesActiveUncheckedCreateInput>
    /**
     * In case the CartesCapacictesActive was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CartesCapacictesActiveUpdateInput, CartesCapacictesActiveUncheckedUpdateInput>
  }


  /**
   * CartesCapacictesActive delete
   */
  export type CartesCapacictesActiveDeleteArgs = {
    /**
     * Select specific fields to fetch from the CartesCapacictesActive
     */
    select?: CartesCapacictesActiveSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CartesCapacictesActiveInclude | null
    /**
     * Filter which CartesCapacictesActive to delete.
     */
    where: CartesCapacictesActiveWhereUniqueInput
  }


  /**
   * CartesCapacictesActive deleteMany
   */
  export type CartesCapacictesActiveDeleteManyArgs = {
    /**
     * Filter which CartesCapacictesActives to delete
     */
    where?: CartesCapacictesActiveWhereInput
  }


  /**
   * CartesCapacictesActive without action
   */
  export type CartesCapacictesActiveArgs = {
    /**
     * Select specific fields to fetch from the CartesCapacictesActive
     */
    select?: CartesCapacictesActiveSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CartesCapacictesActiveInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const CapaciteScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    carteId: 'carteId'
  };

  export type CapaciteScalarFieldEnum = (typeof CapaciteScalarFieldEnum)[keyof typeof CapaciteScalarFieldEnum]


  export const CarteScalarFieldEnum: {
    id: 'id',
    name: 'name',
    illustration: 'illustration',
    typeId: 'typeId',
    classeId: 'classeId',
    power: 'power',
    competenceId: 'competenceId',
    cost: 'cost',
    color: 'color',
    description: 'description'
  };

  export type CarteScalarFieldEnum = (typeof CarteScalarFieldEnum)[keyof typeof CarteScalarFieldEnum]


  export const CartesCapacictesActiveScalarFieldEnum: {
    competenceId: 'competenceId',
    carteId: 'carteId'
  };

  export type CartesCapacictesActiveScalarFieldEnum = (typeof CartesCapacictesActiveScalarFieldEnum)[keyof typeof CartesCapacictesActiveScalarFieldEnum]


  export const ClasseScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type ClasseScalarFieldEnum = (typeof ClasseScalarFieldEnum)[keyof typeof ClasseScalarFieldEnum]


  export const CompetenceScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    description: 'description'
  };

  export type CompetenceScalarFieldEnum = (typeof CompetenceScalarFieldEnum)[keyof typeof CompetenceScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const TypeScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type TypeScalarFieldEnum = (typeof TypeScalarFieldEnum)[keyof typeof TypeScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type CarteWhereInput = {
    AND?: Enumerable<CarteWhereInput>
    OR?: Enumerable<CarteWhereInput>
    NOT?: Enumerable<CarteWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    illustration?: StringFilter | string
    typeId?: IntNullableFilter | number | null
    classeId?: IntNullableFilter | number | null
    power?: IntFilter | number
    competenceId?: IntFilter | number
    cost?: StringFilter | string
    color?: StringFilter | string
    description?: StringFilter | string
    type?: XOR<TypeRelationFilter, TypeWhereInput> | null
    classe?: XOR<ClasseRelationFilter, ClasseWhereInput> | null
    Capacite?: CapaciteListRelationFilter
    competence_passive?: XOR<CompetenceRelationFilter, CompetenceWhereInput> | null
    competences_active?: CartesCapacictesActiveListRelationFilter
  }

  export type CarteOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    illustration?: SortOrder
    typeId?: SortOrder
    classeId?: SortOrder
    power?: SortOrder
    competenceId?: SortOrder
    cost?: SortOrder
    color?: SortOrder
    description?: SortOrder
    type?: TypeOrderByWithRelationInput
    classe?: ClasseOrderByWithRelationInput
    Capacite?: CapaciteOrderByRelationAggregateInput
    competence_passive?: CompetenceOrderByWithRelationInput
    competences_active?: CartesCapacictesActiveOrderByRelationAggregateInput
  }

  export type CarteWhereUniqueInput = {
    id?: number
  }

  export type CarteOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    illustration?: SortOrder
    typeId?: SortOrder
    classeId?: SortOrder
    power?: SortOrder
    competenceId?: SortOrder
    cost?: SortOrder
    color?: SortOrder
    description?: SortOrder
    _count?: CarteCountOrderByAggregateInput
    _avg?: CarteAvgOrderByAggregateInput
    _max?: CarteMaxOrderByAggregateInput
    _min?: CarteMinOrderByAggregateInput
    _sum?: CarteSumOrderByAggregateInput
  }

  export type CarteScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CarteScalarWhereWithAggregatesInput>
    OR?: Enumerable<CarteScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CarteScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    illustration?: StringWithAggregatesFilter | string
    typeId?: IntNullableWithAggregatesFilter | number | null
    classeId?: IntNullableWithAggregatesFilter | number | null
    power?: IntWithAggregatesFilter | number
    competenceId?: IntWithAggregatesFilter | number
    cost?: StringWithAggregatesFilter | string
    color?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
  }

  export type TypeWhereInput = {
    AND?: Enumerable<TypeWhereInput>
    OR?: Enumerable<TypeWhereInput>
    NOT?: Enumerable<TypeWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    Carte?: CarteListRelationFilter
  }

  export type TypeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    Carte?: CarteOrderByRelationAggregateInput
  }

  export type TypeWhereUniqueInput = {
    id?: number
  }

  export type TypeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: TypeCountOrderByAggregateInput
    _avg?: TypeAvgOrderByAggregateInput
    _max?: TypeMaxOrderByAggregateInput
    _min?: TypeMinOrderByAggregateInput
    _sum?: TypeSumOrderByAggregateInput
  }

  export type TypeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TypeScalarWhereWithAggregatesInput>
    OR?: Enumerable<TypeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TypeScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
  }

  export type ClasseWhereInput = {
    AND?: Enumerable<ClasseWhereInput>
    OR?: Enumerable<ClasseWhereInput>
    NOT?: Enumerable<ClasseWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    Carte?: CarteListRelationFilter
  }

  export type ClasseOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    Carte?: CarteOrderByRelationAggregateInput
  }

  export type ClasseWhereUniqueInput = {
    id?: number
  }

  export type ClasseOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: ClasseCountOrderByAggregateInput
    _avg?: ClasseAvgOrderByAggregateInput
    _max?: ClasseMaxOrderByAggregateInput
    _min?: ClasseMinOrderByAggregateInput
    _sum?: ClasseSumOrderByAggregateInput
  }

  export type ClasseScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ClasseScalarWhereWithAggregatesInput>
    OR?: Enumerable<ClasseScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ClasseScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
  }

  export type CapaciteWhereInput = {
    AND?: Enumerable<CapaciteWhereInput>
    OR?: Enumerable<CapaciteWhereInput>
    NOT?: Enumerable<CapaciteWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    description?: StringFilter | string
    carteId?: IntNullableFilter | number | null
    Carte?: XOR<CarteRelationFilter, CarteWhereInput> | null
  }

  export type CapaciteOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    carteId?: SortOrder
    Carte?: CarteOrderByWithRelationInput
  }

  export type CapaciteWhereUniqueInput = {
    id?: number
  }

  export type CapaciteOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    carteId?: SortOrder
    _count?: CapaciteCountOrderByAggregateInput
    _avg?: CapaciteAvgOrderByAggregateInput
    _max?: CapaciteMaxOrderByAggregateInput
    _min?: CapaciteMinOrderByAggregateInput
    _sum?: CapaciteSumOrderByAggregateInput
  }

  export type CapaciteScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CapaciteScalarWhereWithAggregatesInput>
    OR?: Enumerable<CapaciteScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CapaciteScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    carteId?: IntNullableWithAggregatesFilter | number | null
  }

  export type CompetenceWhereInput = {
    AND?: Enumerable<CompetenceWhereInput>
    OR?: Enumerable<CompetenceWhereInput>
    NOT?: Enumerable<CompetenceWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    type?: StringFilter | string
    description?: StringFilter | string
    carte_passvie?: CarteListRelationFilter
    carte_active?: CartesCapacictesActiveListRelationFilter
  }

  export type CompetenceOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    description?: SortOrder
    carte_passvie?: CarteOrderByRelationAggregateInput
    carte_active?: CartesCapacictesActiveOrderByRelationAggregateInput
  }

  export type CompetenceWhereUniqueInput = {
    id?: number
  }

  export type CompetenceOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    description?: SortOrder
    _count?: CompetenceCountOrderByAggregateInput
    _avg?: CompetenceAvgOrderByAggregateInput
    _max?: CompetenceMaxOrderByAggregateInput
    _min?: CompetenceMinOrderByAggregateInput
    _sum?: CompetenceSumOrderByAggregateInput
  }

  export type CompetenceScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CompetenceScalarWhereWithAggregatesInput>
    OR?: Enumerable<CompetenceScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CompetenceScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    type?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
  }

  export type CartesCapacictesActiveWhereInput = {
    AND?: Enumerable<CartesCapacictesActiveWhereInput>
    OR?: Enumerable<CartesCapacictesActiveWhereInput>
    NOT?: Enumerable<CartesCapacictesActiveWhereInput>
    competenceId?: IntFilter | number
    carteId?: IntFilter | number
    competence?: XOR<CompetenceRelationFilter, CompetenceWhereInput>
    carte?: XOR<CarteRelationFilter, CarteWhereInput>
  }

  export type CartesCapacictesActiveOrderByWithRelationInput = {
    competenceId?: SortOrder
    carteId?: SortOrder
    competence?: CompetenceOrderByWithRelationInput
    carte?: CarteOrderByWithRelationInput
  }

  export type CartesCapacictesActiveWhereUniqueInput = {
    competenceId_carteId?: CartesCapacictesActiveCompetenceIdCarteIdCompoundUniqueInput
  }

  export type CartesCapacictesActiveOrderByWithAggregationInput = {
    competenceId?: SortOrder
    carteId?: SortOrder
    _count?: CartesCapacictesActiveCountOrderByAggregateInput
    _avg?: CartesCapacictesActiveAvgOrderByAggregateInput
    _max?: CartesCapacictesActiveMaxOrderByAggregateInput
    _min?: CartesCapacictesActiveMinOrderByAggregateInput
    _sum?: CartesCapacictesActiveSumOrderByAggregateInput
  }

  export type CartesCapacictesActiveScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CartesCapacictesActiveScalarWhereWithAggregatesInput>
    OR?: Enumerable<CartesCapacictesActiveScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CartesCapacictesActiveScalarWhereWithAggregatesInput>
    competenceId?: IntWithAggregatesFilter | number
    carteId?: IntWithAggregatesFilter | number
  }

  export type CarteCreateInput = {
    name: string
    illustration: string
    power: number
    cost: string
    color: string
    description: string
    type?: TypeCreateNestedOneWithoutCarteInput
    classe?: ClasseCreateNestedOneWithoutCarteInput
    Capacite?: CapaciteCreateNestedManyWithoutCarteInput
    competence_passive?: CompetenceCreateNestedOneWithoutCarte_passvieInput
    competences_active?: CartesCapacictesActiveCreateNestedManyWithoutCarteInput
  }

  export type CarteUncheckedCreateInput = {
    id?: number
    name: string
    illustration: string
    typeId?: number | null
    classeId?: number | null
    power: number
    competenceId: number
    cost: string
    color: string
    description: string
    Capacite?: CapaciteUncheckedCreateNestedManyWithoutCarteInput
    competences_active?: CartesCapacictesActiveUncheckedCreateNestedManyWithoutCarteInput
  }

  export type CarteUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    illustration?: StringFieldUpdateOperationsInput | string
    power?: IntFieldUpdateOperationsInput | number
    cost?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: TypeUpdateOneWithoutCarteNestedInput
    classe?: ClasseUpdateOneWithoutCarteNestedInput
    Capacite?: CapaciteUpdateManyWithoutCarteNestedInput
    competence_passive?: CompetenceUpdateOneWithoutCarte_passvieNestedInput
    competences_active?: CartesCapacictesActiveUpdateManyWithoutCarteNestedInput
  }

  export type CarteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    illustration?: StringFieldUpdateOperationsInput | string
    typeId?: NullableIntFieldUpdateOperationsInput | number | null
    classeId?: NullableIntFieldUpdateOperationsInput | number | null
    power?: IntFieldUpdateOperationsInput | number
    competenceId?: IntFieldUpdateOperationsInput | number
    cost?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    Capacite?: CapaciteUncheckedUpdateManyWithoutCarteNestedInput
    competences_active?: CartesCapacictesActiveUncheckedUpdateManyWithoutCarteNestedInput
  }

  export type CarteCreateManyInput = {
    id?: number
    name: string
    illustration: string
    typeId?: number | null
    classeId?: number | null
    power: number
    competenceId: number
    cost: string
    color: string
    description: string
  }

  export type CarteUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    illustration?: StringFieldUpdateOperationsInput | string
    power?: IntFieldUpdateOperationsInput | number
    cost?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type CarteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    illustration?: StringFieldUpdateOperationsInput | string
    typeId?: NullableIntFieldUpdateOperationsInput | number | null
    classeId?: NullableIntFieldUpdateOperationsInput | number | null
    power?: IntFieldUpdateOperationsInput | number
    competenceId?: IntFieldUpdateOperationsInput | number
    cost?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type TypeCreateInput = {
    name: string
    Carte?: CarteCreateNestedManyWithoutTypeInput
  }

  export type TypeUncheckedCreateInput = {
    id?: number
    name: string
    Carte?: CarteUncheckedCreateNestedManyWithoutTypeInput
  }

  export type TypeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    Carte?: CarteUpdateManyWithoutTypeNestedInput
  }

  export type TypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    Carte?: CarteUncheckedUpdateManyWithoutTypeNestedInput
  }

  export type TypeCreateManyInput = {
    id?: number
    name: string
  }

  export type TypeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ClasseCreateInput = {
    name: string
    Carte?: CarteCreateNestedManyWithoutClasseInput
  }

  export type ClasseUncheckedCreateInput = {
    id?: number
    name: string
    Carte?: CarteUncheckedCreateNestedManyWithoutClasseInput
  }

  export type ClasseUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    Carte?: CarteUpdateManyWithoutClasseNestedInput
  }

  export type ClasseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    Carte?: CarteUncheckedUpdateManyWithoutClasseNestedInput
  }

  export type ClasseCreateManyInput = {
    id?: number
    name: string
  }

  export type ClasseUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ClasseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CapaciteCreateInput = {
    name: string
    description: string
    Carte?: CarteCreateNestedOneWithoutCapaciteInput
  }

  export type CapaciteUncheckedCreateInput = {
    id?: number
    name: string
    description: string
    carteId?: number | null
  }

  export type CapaciteUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    Carte?: CarteUpdateOneWithoutCapaciteNestedInput
  }

  export type CapaciteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    carteId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CapaciteCreateManyInput = {
    id?: number
    name: string
    description: string
    carteId?: number | null
  }

  export type CapaciteUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type CapaciteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    carteId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CompetenceCreateInput = {
    name: string
    type: string
    description: string
    carte_passvie?: CarteCreateNestedManyWithoutCompetence_passiveInput
    carte_active?: CartesCapacictesActiveCreateNestedManyWithoutCompetenceInput
  }

  export type CompetenceUncheckedCreateInput = {
    id?: number
    name: string
    type: string
    description: string
    carte_passvie?: CarteUncheckedCreateNestedManyWithoutCompetence_passiveInput
    carte_active?: CartesCapacictesActiveUncheckedCreateNestedManyWithoutCompetenceInput
  }

  export type CompetenceUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    carte_passvie?: CarteUpdateManyWithoutCompetence_passiveNestedInput
    carte_active?: CartesCapacictesActiveUpdateManyWithoutCompetenceNestedInput
  }

  export type CompetenceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    carte_passvie?: CarteUncheckedUpdateManyWithoutCompetence_passiveNestedInput
    carte_active?: CartesCapacictesActiveUncheckedUpdateManyWithoutCompetenceNestedInput
  }

  export type CompetenceCreateManyInput = {
    id?: number
    name: string
    type: string
    description: string
  }

  export type CompetenceUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type CompetenceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type CartesCapacictesActiveCreateInput = {
    competence: CompetenceCreateNestedOneWithoutCarte_activeInput
    carte: CarteCreateNestedOneWithoutCompetences_activeInput
  }

  export type CartesCapacictesActiveUncheckedCreateInput = {
    competenceId: number
    carteId: number
  }

  export type CartesCapacictesActiveUpdateInput = {
    competence?: CompetenceUpdateOneRequiredWithoutCarte_activeNestedInput
    carte?: CarteUpdateOneRequiredWithoutCompetences_activeNestedInput
  }

  export type CartesCapacictesActiveUncheckedUpdateInput = {
    competenceId?: IntFieldUpdateOperationsInput | number
    carteId?: IntFieldUpdateOperationsInput | number
  }

  export type CartesCapacictesActiveCreateManyInput = {
    competenceId: number
    carteId: number
  }

  export type CartesCapacictesActiveUpdateManyMutationInput = {

  }

  export type CartesCapacictesActiveUncheckedUpdateManyInput = {
    competenceId?: IntFieldUpdateOperationsInput | number
    carteId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type TypeRelationFilter = {
    is?: TypeWhereInput | null
    isNot?: TypeWhereInput | null
  }

  export type ClasseRelationFilter = {
    is?: ClasseWhereInput | null
    isNot?: ClasseWhereInput | null
  }

  export type CapaciteListRelationFilter = {
    every?: CapaciteWhereInput
    some?: CapaciteWhereInput
    none?: CapaciteWhereInput
  }

  export type CompetenceRelationFilter = {
    is?: CompetenceWhereInput
    isNot?: CompetenceWhereInput
  }

  export type CartesCapacictesActiveListRelationFilter = {
    every?: CartesCapacictesActiveWhereInput
    some?: CartesCapacictesActiveWhereInput
    none?: CartesCapacictesActiveWhereInput
  }

  export type CapaciteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CartesCapacictesActiveOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CarteCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    illustration?: SortOrder
    typeId?: SortOrder
    classeId?: SortOrder
    power?: SortOrder
    competenceId?: SortOrder
    cost?: SortOrder
    color?: SortOrder
    description?: SortOrder
  }

  export type CarteAvgOrderByAggregateInput = {
    id?: SortOrder
    typeId?: SortOrder
    classeId?: SortOrder
    power?: SortOrder
    competenceId?: SortOrder
  }

  export type CarteMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    illustration?: SortOrder
    typeId?: SortOrder
    classeId?: SortOrder
    power?: SortOrder
    competenceId?: SortOrder
    cost?: SortOrder
    color?: SortOrder
    description?: SortOrder
  }

  export type CarteMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    illustration?: SortOrder
    typeId?: SortOrder
    classeId?: SortOrder
    power?: SortOrder
    competenceId?: SortOrder
    cost?: SortOrder
    color?: SortOrder
    description?: SortOrder
  }

  export type CarteSumOrderByAggregateInput = {
    id?: SortOrder
    typeId?: SortOrder
    classeId?: SortOrder
    power?: SortOrder
    competenceId?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type CarteListRelationFilter = {
    every?: CarteWhereInput
    some?: CarteWhereInput
    none?: CarteWhereInput
  }

  export type CarteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TypeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TypeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TypeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TypeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TypeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ClasseCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ClasseAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ClasseMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ClasseMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ClasseSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CarteRelationFilter = {
    is?: CarteWhereInput
    isNot?: CarteWhereInput
  }

  export type CapaciteCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    carteId?: SortOrder
  }

  export type CapaciteAvgOrderByAggregateInput = {
    id?: SortOrder
    carteId?: SortOrder
  }

  export type CapaciteMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    carteId?: SortOrder
  }

  export type CapaciteMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    carteId?: SortOrder
  }

  export type CapaciteSumOrderByAggregateInput = {
    id?: SortOrder
    carteId?: SortOrder
  }

  export type CompetenceCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    description?: SortOrder
  }

  export type CompetenceAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CompetenceMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    description?: SortOrder
  }

  export type CompetenceMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    description?: SortOrder
  }

  export type CompetenceSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CartesCapacictesActiveCompetenceIdCarteIdCompoundUniqueInput = {
    competenceId: number
    carteId: number
  }

  export type CartesCapacictesActiveCountOrderByAggregateInput = {
    competenceId?: SortOrder
    carteId?: SortOrder
  }

  export type CartesCapacictesActiveAvgOrderByAggregateInput = {
    competenceId?: SortOrder
    carteId?: SortOrder
  }

  export type CartesCapacictesActiveMaxOrderByAggregateInput = {
    competenceId?: SortOrder
    carteId?: SortOrder
  }

  export type CartesCapacictesActiveMinOrderByAggregateInput = {
    competenceId?: SortOrder
    carteId?: SortOrder
  }

  export type CartesCapacictesActiveSumOrderByAggregateInput = {
    competenceId?: SortOrder
    carteId?: SortOrder
  }

  export type TypeCreateNestedOneWithoutCarteInput = {
    create?: XOR<TypeCreateWithoutCarteInput, TypeUncheckedCreateWithoutCarteInput>
    connectOrCreate?: TypeCreateOrConnectWithoutCarteInput
    connect?: TypeWhereUniqueInput
  }

  export type ClasseCreateNestedOneWithoutCarteInput = {
    create?: XOR<ClasseCreateWithoutCarteInput, ClasseUncheckedCreateWithoutCarteInput>
    connectOrCreate?: ClasseCreateOrConnectWithoutCarteInput
    connect?: ClasseWhereUniqueInput
  }

  export type CapaciteCreateNestedManyWithoutCarteInput = {
    create?: XOR<Enumerable<CapaciteCreateWithoutCarteInput>, Enumerable<CapaciteUncheckedCreateWithoutCarteInput>>
    connectOrCreate?: Enumerable<CapaciteCreateOrConnectWithoutCarteInput>
    createMany?: CapaciteCreateManyCarteInputEnvelope
    connect?: Enumerable<CapaciteWhereUniqueInput>
  }

  export type CompetenceCreateNestedOneWithoutCarte_passvieInput = {
    create?: XOR<CompetenceCreateWithoutCarte_passvieInput, CompetenceUncheckedCreateWithoutCarte_passvieInput>
    connectOrCreate?: CompetenceCreateOrConnectWithoutCarte_passvieInput
    connect?: CompetenceWhereUniqueInput
  }

  export type CartesCapacictesActiveCreateNestedManyWithoutCarteInput = {
    create?: XOR<Enumerable<CartesCapacictesActiveCreateWithoutCarteInput>, Enumerable<CartesCapacictesActiveUncheckedCreateWithoutCarteInput>>
    connectOrCreate?: Enumerable<CartesCapacictesActiveCreateOrConnectWithoutCarteInput>
    createMany?: CartesCapacictesActiveCreateManyCarteInputEnvelope
    connect?: Enumerable<CartesCapacictesActiveWhereUniqueInput>
  }

  export type CapaciteUncheckedCreateNestedManyWithoutCarteInput = {
    create?: XOR<Enumerable<CapaciteCreateWithoutCarteInput>, Enumerable<CapaciteUncheckedCreateWithoutCarteInput>>
    connectOrCreate?: Enumerable<CapaciteCreateOrConnectWithoutCarteInput>
    createMany?: CapaciteCreateManyCarteInputEnvelope
    connect?: Enumerable<CapaciteWhereUniqueInput>
  }

  export type CartesCapacictesActiveUncheckedCreateNestedManyWithoutCarteInput = {
    create?: XOR<Enumerable<CartesCapacictesActiveCreateWithoutCarteInput>, Enumerable<CartesCapacictesActiveUncheckedCreateWithoutCarteInput>>
    connectOrCreate?: Enumerable<CartesCapacictesActiveCreateOrConnectWithoutCarteInput>
    createMany?: CartesCapacictesActiveCreateManyCarteInputEnvelope
    connect?: Enumerable<CartesCapacictesActiveWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TypeUpdateOneWithoutCarteNestedInput = {
    create?: XOR<TypeCreateWithoutCarteInput, TypeUncheckedCreateWithoutCarteInput>
    connectOrCreate?: TypeCreateOrConnectWithoutCarteInput
    upsert?: TypeUpsertWithoutCarteInput
    disconnect?: boolean
    delete?: boolean
    connect?: TypeWhereUniqueInput
    update?: XOR<TypeUpdateWithoutCarteInput, TypeUncheckedUpdateWithoutCarteInput>
  }

  export type ClasseUpdateOneWithoutCarteNestedInput = {
    create?: XOR<ClasseCreateWithoutCarteInput, ClasseUncheckedCreateWithoutCarteInput>
    connectOrCreate?: ClasseCreateOrConnectWithoutCarteInput
    upsert?: ClasseUpsertWithoutCarteInput
    disconnect?: boolean
    delete?: boolean
    connect?: ClasseWhereUniqueInput
    update?: XOR<ClasseUpdateWithoutCarteInput, ClasseUncheckedUpdateWithoutCarteInput>
  }

  export type CapaciteUpdateManyWithoutCarteNestedInput = {
    create?: XOR<Enumerable<CapaciteCreateWithoutCarteInput>, Enumerable<CapaciteUncheckedCreateWithoutCarteInput>>
    connectOrCreate?: Enumerable<CapaciteCreateOrConnectWithoutCarteInput>
    upsert?: Enumerable<CapaciteUpsertWithWhereUniqueWithoutCarteInput>
    createMany?: CapaciteCreateManyCarteInputEnvelope
    set?: Enumerable<CapaciteWhereUniqueInput>
    disconnect?: Enumerable<CapaciteWhereUniqueInput>
    delete?: Enumerable<CapaciteWhereUniqueInput>
    connect?: Enumerable<CapaciteWhereUniqueInput>
    update?: Enumerable<CapaciteUpdateWithWhereUniqueWithoutCarteInput>
    updateMany?: Enumerable<CapaciteUpdateManyWithWhereWithoutCarteInput>
    deleteMany?: Enumerable<CapaciteScalarWhereInput>
  }

  export type CompetenceUpdateOneWithoutCarte_passvieNestedInput = {
    create?: XOR<CompetenceCreateWithoutCarte_passvieInput, CompetenceUncheckedCreateWithoutCarte_passvieInput>
    connectOrCreate?: CompetenceCreateOrConnectWithoutCarte_passvieInput
    upsert?: CompetenceUpsertWithoutCarte_passvieInput
    disconnect?: boolean
    delete?: boolean
    connect?: CompetenceWhereUniqueInput
    update?: XOR<CompetenceUpdateWithoutCarte_passvieInput, CompetenceUncheckedUpdateWithoutCarte_passvieInput>
  }

  export type CartesCapacictesActiveUpdateManyWithoutCarteNestedInput = {
    create?: XOR<Enumerable<CartesCapacictesActiveCreateWithoutCarteInput>, Enumerable<CartesCapacictesActiveUncheckedCreateWithoutCarteInput>>
    connectOrCreate?: Enumerable<CartesCapacictesActiveCreateOrConnectWithoutCarteInput>
    upsert?: Enumerable<CartesCapacictesActiveUpsertWithWhereUniqueWithoutCarteInput>
    createMany?: CartesCapacictesActiveCreateManyCarteInputEnvelope
    set?: Enumerable<CartesCapacictesActiveWhereUniqueInput>
    disconnect?: Enumerable<CartesCapacictesActiveWhereUniqueInput>
    delete?: Enumerable<CartesCapacictesActiveWhereUniqueInput>
    connect?: Enumerable<CartesCapacictesActiveWhereUniqueInput>
    update?: Enumerable<CartesCapacictesActiveUpdateWithWhereUniqueWithoutCarteInput>
    updateMany?: Enumerable<CartesCapacictesActiveUpdateManyWithWhereWithoutCarteInput>
    deleteMany?: Enumerable<CartesCapacictesActiveScalarWhereInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CapaciteUncheckedUpdateManyWithoutCarteNestedInput = {
    create?: XOR<Enumerable<CapaciteCreateWithoutCarteInput>, Enumerable<CapaciteUncheckedCreateWithoutCarteInput>>
    connectOrCreate?: Enumerable<CapaciteCreateOrConnectWithoutCarteInput>
    upsert?: Enumerable<CapaciteUpsertWithWhereUniqueWithoutCarteInput>
    createMany?: CapaciteCreateManyCarteInputEnvelope
    set?: Enumerable<CapaciteWhereUniqueInput>
    disconnect?: Enumerable<CapaciteWhereUniqueInput>
    delete?: Enumerable<CapaciteWhereUniqueInput>
    connect?: Enumerable<CapaciteWhereUniqueInput>
    update?: Enumerable<CapaciteUpdateWithWhereUniqueWithoutCarteInput>
    updateMany?: Enumerable<CapaciteUpdateManyWithWhereWithoutCarteInput>
    deleteMany?: Enumerable<CapaciteScalarWhereInput>
  }

  export type CartesCapacictesActiveUncheckedUpdateManyWithoutCarteNestedInput = {
    create?: XOR<Enumerable<CartesCapacictesActiveCreateWithoutCarteInput>, Enumerable<CartesCapacictesActiveUncheckedCreateWithoutCarteInput>>
    connectOrCreate?: Enumerable<CartesCapacictesActiveCreateOrConnectWithoutCarteInput>
    upsert?: Enumerable<CartesCapacictesActiveUpsertWithWhereUniqueWithoutCarteInput>
    createMany?: CartesCapacictesActiveCreateManyCarteInputEnvelope
    set?: Enumerable<CartesCapacictesActiveWhereUniqueInput>
    disconnect?: Enumerable<CartesCapacictesActiveWhereUniqueInput>
    delete?: Enumerable<CartesCapacictesActiveWhereUniqueInput>
    connect?: Enumerable<CartesCapacictesActiveWhereUniqueInput>
    update?: Enumerable<CartesCapacictesActiveUpdateWithWhereUniqueWithoutCarteInput>
    updateMany?: Enumerable<CartesCapacictesActiveUpdateManyWithWhereWithoutCarteInput>
    deleteMany?: Enumerable<CartesCapacictesActiveScalarWhereInput>
  }

  export type CarteCreateNestedManyWithoutTypeInput = {
    create?: XOR<Enumerable<CarteCreateWithoutTypeInput>, Enumerable<CarteUncheckedCreateWithoutTypeInput>>
    connectOrCreate?: Enumerable<CarteCreateOrConnectWithoutTypeInput>
    createMany?: CarteCreateManyTypeInputEnvelope
    connect?: Enumerable<CarteWhereUniqueInput>
  }

  export type CarteUncheckedCreateNestedManyWithoutTypeInput = {
    create?: XOR<Enumerable<CarteCreateWithoutTypeInput>, Enumerable<CarteUncheckedCreateWithoutTypeInput>>
    connectOrCreate?: Enumerable<CarteCreateOrConnectWithoutTypeInput>
    createMany?: CarteCreateManyTypeInputEnvelope
    connect?: Enumerable<CarteWhereUniqueInput>
  }

  export type CarteUpdateManyWithoutTypeNestedInput = {
    create?: XOR<Enumerable<CarteCreateWithoutTypeInput>, Enumerable<CarteUncheckedCreateWithoutTypeInput>>
    connectOrCreate?: Enumerable<CarteCreateOrConnectWithoutTypeInput>
    upsert?: Enumerable<CarteUpsertWithWhereUniqueWithoutTypeInput>
    createMany?: CarteCreateManyTypeInputEnvelope
    set?: Enumerable<CarteWhereUniqueInput>
    disconnect?: Enumerable<CarteWhereUniqueInput>
    delete?: Enumerable<CarteWhereUniqueInput>
    connect?: Enumerable<CarteWhereUniqueInput>
    update?: Enumerable<CarteUpdateWithWhereUniqueWithoutTypeInput>
    updateMany?: Enumerable<CarteUpdateManyWithWhereWithoutTypeInput>
    deleteMany?: Enumerable<CarteScalarWhereInput>
  }

  export type CarteUncheckedUpdateManyWithoutTypeNestedInput = {
    create?: XOR<Enumerable<CarteCreateWithoutTypeInput>, Enumerable<CarteUncheckedCreateWithoutTypeInput>>
    connectOrCreate?: Enumerable<CarteCreateOrConnectWithoutTypeInput>
    upsert?: Enumerable<CarteUpsertWithWhereUniqueWithoutTypeInput>
    createMany?: CarteCreateManyTypeInputEnvelope
    set?: Enumerable<CarteWhereUniqueInput>
    disconnect?: Enumerable<CarteWhereUniqueInput>
    delete?: Enumerable<CarteWhereUniqueInput>
    connect?: Enumerable<CarteWhereUniqueInput>
    update?: Enumerable<CarteUpdateWithWhereUniqueWithoutTypeInput>
    updateMany?: Enumerable<CarteUpdateManyWithWhereWithoutTypeInput>
    deleteMany?: Enumerable<CarteScalarWhereInput>
  }

  export type CarteCreateNestedManyWithoutClasseInput = {
    create?: XOR<Enumerable<CarteCreateWithoutClasseInput>, Enumerable<CarteUncheckedCreateWithoutClasseInput>>
    connectOrCreate?: Enumerable<CarteCreateOrConnectWithoutClasseInput>
    createMany?: CarteCreateManyClasseInputEnvelope
    connect?: Enumerable<CarteWhereUniqueInput>
  }

  export type CarteUncheckedCreateNestedManyWithoutClasseInput = {
    create?: XOR<Enumerable<CarteCreateWithoutClasseInput>, Enumerable<CarteUncheckedCreateWithoutClasseInput>>
    connectOrCreate?: Enumerable<CarteCreateOrConnectWithoutClasseInput>
    createMany?: CarteCreateManyClasseInputEnvelope
    connect?: Enumerable<CarteWhereUniqueInput>
  }

  export type CarteUpdateManyWithoutClasseNestedInput = {
    create?: XOR<Enumerable<CarteCreateWithoutClasseInput>, Enumerable<CarteUncheckedCreateWithoutClasseInput>>
    connectOrCreate?: Enumerable<CarteCreateOrConnectWithoutClasseInput>
    upsert?: Enumerable<CarteUpsertWithWhereUniqueWithoutClasseInput>
    createMany?: CarteCreateManyClasseInputEnvelope
    set?: Enumerable<CarteWhereUniqueInput>
    disconnect?: Enumerable<CarteWhereUniqueInput>
    delete?: Enumerable<CarteWhereUniqueInput>
    connect?: Enumerable<CarteWhereUniqueInput>
    update?: Enumerable<CarteUpdateWithWhereUniqueWithoutClasseInput>
    updateMany?: Enumerable<CarteUpdateManyWithWhereWithoutClasseInput>
    deleteMany?: Enumerable<CarteScalarWhereInput>
  }

  export type CarteUncheckedUpdateManyWithoutClasseNestedInput = {
    create?: XOR<Enumerable<CarteCreateWithoutClasseInput>, Enumerable<CarteUncheckedCreateWithoutClasseInput>>
    connectOrCreate?: Enumerable<CarteCreateOrConnectWithoutClasseInput>
    upsert?: Enumerable<CarteUpsertWithWhereUniqueWithoutClasseInput>
    createMany?: CarteCreateManyClasseInputEnvelope
    set?: Enumerable<CarteWhereUniqueInput>
    disconnect?: Enumerable<CarteWhereUniqueInput>
    delete?: Enumerable<CarteWhereUniqueInput>
    connect?: Enumerable<CarteWhereUniqueInput>
    update?: Enumerable<CarteUpdateWithWhereUniqueWithoutClasseInput>
    updateMany?: Enumerable<CarteUpdateManyWithWhereWithoutClasseInput>
    deleteMany?: Enumerable<CarteScalarWhereInput>
  }

  export type CarteCreateNestedOneWithoutCapaciteInput = {
    create?: XOR<CarteCreateWithoutCapaciteInput, CarteUncheckedCreateWithoutCapaciteInput>
    connectOrCreate?: CarteCreateOrConnectWithoutCapaciteInput
    connect?: CarteWhereUniqueInput
  }

  export type CarteUpdateOneWithoutCapaciteNestedInput = {
    create?: XOR<CarteCreateWithoutCapaciteInput, CarteUncheckedCreateWithoutCapaciteInput>
    connectOrCreate?: CarteCreateOrConnectWithoutCapaciteInput
    upsert?: CarteUpsertWithoutCapaciteInput
    disconnect?: boolean
    delete?: boolean
    connect?: CarteWhereUniqueInput
    update?: XOR<CarteUpdateWithoutCapaciteInput, CarteUncheckedUpdateWithoutCapaciteInput>
  }

  export type CarteCreateNestedManyWithoutCompetence_passiveInput = {
    create?: XOR<Enumerable<CarteCreateWithoutCompetence_passiveInput>, Enumerable<CarteUncheckedCreateWithoutCompetence_passiveInput>>
    connectOrCreate?: Enumerable<CarteCreateOrConnectWithoutCompetence_passiveInput>
    createMany?: CarteCreateManyCompetence_passiveInputEnvelope
    connect?: Enumerable<CarteWhereUniqueInput>
  }

  export type CartesCapacictesActiveCreateNestedManyWithoutCompetenceInput = {
    create?: XOR<Enumerable<CartesCapacictesActiveCreateWithoutCompetenceInput>, Enumerable<CartesCapacictesActiveUncheckedCreateWithoutCompetenceInput>>
    connectOrCreate?: Enumerable<CartesCapacictesActiveCreateOrConnectWithoutCompetenceInput>
    createMany?: CartesCapacictesActiveCreateManyCompetenceInputEnvelope
    connect?: Enumerable<CartesCapacictesActiveWhereUniqueInput>
  }

  export type CarteUncheckedCreateNestedManyWithoutCompetence_passiveInput = {
    create?: XOR<Enumerable<CarteCreateWithoutCompetence_passiveInput>, Enumerable<CarteUncheckedCreateWithoutCompetence_passiveInput>>
    connectOrCreate?: Enumerable<CarteCreateOrConnectWithoutCompetence_passiveInput>
    createMany?: CarteCreateManyCompetence_passiveInputEnvelope
    connect?: Enumerable<CarteWhereUniqueInput>
  }

  export type CartesCapacictesActiveUncheckedCreateNestedManyWithoutCompetenceInput = {
    create?: XOR<Enumerable<CartesCapacictesActiveCreateWithoutCompetenceInput>, Enumerable<CartesCapacictesActiveUncheckedCreateWithoutCompetenceInput>>
    connectOrCreate?: Enumerable<CartesCapacictesActiveCreateOrConnectWithoutCompetenceInput>
    createMany?: CartesCapacictesActiveCreateManyCompetenceInputEnvelope
    connect?: Enumerable<CartesCapacictesActiveWhereUniqueInput>
  }

  export type CarteUpdateManyWithoutCompetence_passiveNestedInput = {
    create?: XOR<Enumerable<CarteCreateWithoutCompetence_passiveInput>, Enumerable<CarteUncheckedCreateWithoutCompetence_passiveInput>>
    connectOrCreate?: Enumerable<CarteCreateOrConnectWithoutCompetence_passiveInput>
    upsert?: Enumerable<CarteUpsertWithWhereUniqueWithoutCompetence_passiveInput>
    createMany?: CarteCreateManyCompetence_passiveInputEnvelope
    set?: Enumerable<CarteWhereUniqueInput>
    disconnect?: Enumerable<CarteWhereUniqueInput>
    delete?: Enumerable<CarteWhereUniqueInput>
    connect?: Enumerable<CarteWhereUniqueInput>
    update?: Enumerable<CarteUpdateWithWhereUniqueWithoutCompetence_passiveInput>
    updateMany?: Enumerable<CarteUpdateManyWithWhereWithoutCompetence_passiveInput>
    deleteMany?: Enumerable<CarteScalarWhereInput>
  }

  export type CartesCapacictesActiveUpdateManyWithoutCompetenceNestedInput = {
    create?: XOR<Enumerable<CartesCapacictesActiveCreateWithoutCompetenceInput>, Enumerable<CartesCapacictesActiveUncheckedCreateWithoutCompetenceInput>>
    connectOrCreate?: Enumerable<CartesCapacictesActiveCreateOrConnectWithoutCompetenceInput>
    upsert?: Enumerable<CartesCapacictesActiveUpsertWithWhereUniqueWithoutCompetenceInput>
    createMany?: CartesCapacictesActiveCreateManyCompetenceInputEnvelope
    set?: Enumerable<CartesCapacictesActiveWhereUniqueInput>
    disconnect?: Enumerable<CartesCapacictesActiveWhereUniqueInput>
    delete?: Enumerable<CartesCapacictesActiveWhereUniqueInput>
    connect?: Enumerable<CartesCapacictesActiveWhereUniqueInput>
    update?: Enumerable<CartesCapacictesActiveUpdateWithWhereUniqueWithoutCompetenceInput>
    updateMany?: Enumerable<CartesCapacictesActiveUpdateManyWithWhereWithoutCompetenceInput>
    deleteMany?: Enumerable<CartesCapacictesActiveScalarWhereInput>
  }

  export type CarteUncheckedUpdateManyWithoutCompetence_passiveNestedInput = {
    create?: XOR<Enumerable<CarteCreateWithoutCompetence_passiveInput>, Enumerable<CarteUncheckedCreateWithoutCompetence_passiveInput>>
    connectOrCreate?: Enumerable<CarteCreateOrConnectWithoutCompetence_passiveInput>
    upsert?: Enumerable<CarteUpsertWithWhereUniqueWithoutCompetence_passiveInput>
    createMany?: CarteCreateManyCompetence_passiveInputEnvelope
    set?: Enumerable<CarteWhereUniqueInput>
    disconnect?: Enumerable<CarteWhereUniqueInput>
    delete?: Enumerable<CarteWhereUniqueInput>
    connect?: Enumerable<CarteWhereUniqueInput>
    update?: Enumerable<CarteUpdateWithWhereUniqueWithoutCompetence_passiveInput>
    updateMany?: Enumerable<CarteUpdateManyWithWhereWithoutCompetence_passiveInput>
    deleteMany?: Enumerable<CarteScalarWhereInput>
  }

  export type CartesCapacictesActiveUncheckedUpdateManyWithoutCompetenceNestedInput = {
    create?: XOR<Enumerable<CartesCapacictesActiveCreateWithoutCompetenceInput>, Enumerable<CartesCapacictesActiveUncheckedCreateWithoutCompetenceInput>>
    connectOrCreate?: Enumerable<CartesCapacictesActiveCreateOrConnectWithoutCompetenceInput>
    upsert?: Enumerable<CartesCapacictesActiveUpsertWithWhereUniqueWithoutCompetenceInput>
    createMany?: CartesCapacictesActiveCreateManyCompetenceInputEnvelope
    set?: Enumerable<CartesCapacictesActiveWhereUniqueInput>
    disconnect?: Enumerable<CartesCapacictesActiveWhereUniqueInput>
    delete?: Enumerable<CartesCapacictesActiveWhereUniqueInput>
    connect?: Enumerable<CartesCapacictesActiveWhereUniqueInput>
    update?: Enumerable<CartesCapacictesActiveUpdateWithWhereUniqueWithoutCompetenceInput>
    updateMany?: Enumerable<CartesCapacictesActiveUpdateManyWithWhereWithoutCompetenceInput>
    deleteMany?: Enumerable<CartesCapacictesActiveScalarWhereInput>
  }

  export type CompetenceCreateNestedOneWithoutCarte_activeInput = {
    create?: XOR<CompetenceCreateWithoutCarte_activeInput, CompetenceUncheckedCreateWithoutCarte_activeInput>
    connectOrCreate?: CompetenceCreateOrConnectWithoutCarte_activeInput
    connect?: CompetenceWhereUniqueInput
  }

  export type CarteCreateNestedOneWithoutCompetences_activeInput = {
    create?: XOR<CarteCreateWithoutCompetences_activeInput, CarteUncheckedCreateWithoutCompetences_activeInput>
    connectOrCreate?: CarteCreateOrConnectWithoutCompetences_activeInput
    connect?: CarteWhereUniqueInput
  }

  export type CompetenceUpdateOneRequiredWithoutCarte_activeNestedInput = {
    create?: XOR<CompetenceCreateWithoutCarte_activeInput, CompetenceUncheckedCreateWithoutCarte_activeInput>
    connectOrCreate?: CompetenceCreateOrConnectWithoutCarte_activeInput
    upsert?: CompetenceUpsertWithoutCarte_activeInput
    connect?: CompetenceWhereUniqueInput
    update?: XOR<CompetenceUpdateWithoutCarte_activeInput, CompetenceUncheckedUpdateWithoutCarte_activeInput>
  }

  export type CarteUpdateOneRequiredWithoutCompetences_activeNestedInput = {
    create?: XOR<CarteCreateWithoutCompetences_activeInput, CarteUncheckedCreateWithoutCompetences_activeInput>
    connectOrCreate?: CarteCreateOrConnectWithoutCompetences_activeInput
    upsert?: CarteUpsertWithoutCompetences_activeInput
    connect?: CarteWhereUniqueInput
    update?: XOR<CarteUpdateWithoutCompetences_activeInput, CarteUncheckedUpdateWithoutCompetences_activeInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type TypeCreateWithoutCarteInput = {
    name: string
  }

  export type TypeUncheckedCreateWithoutCarteInput = {
    id?: number
    name: string
  }

  export type TypeCreateOrConnectWithoutCarteInput = {
    where: TypeWhereUniqueInput
    create: XOR<TypeCreateWithoutCarteInput, TypeUncheckedCreateWithoutCarteInput>
  }

  export type ClasseCreateWithoutCarteInput = {
    name: string
  }

  export type ClasseUncheckedCreateWithoutCarteInput = {
    id?: number
    name: string
  }

  export type ClasseCreateOrConnectWithoutCarteInput = {
    where: ClasseWhereUniqueInput
    create: XOR<ClasseCreateWithoutCarteInput, ClasseUncheckedCreateWithoutCarteInput>
  }

  export type CapaciteCreateWithoutCarteInput = {
    name: string
    description: string
  }

  export type CapaciteUncheckedCreateWithoutCarteInput = {
    id?: number
    name: string
    description: string
  }

  export type CapaciteCreateOrConnectWithoutCarteInput = {
    where: CapaciteWhereUniqueInput
    create: XOR<CapaciteCreateWithoutCarteInput, CapaciteUncheckedCreateWithoutCarteInput>
  }

  export type CapaciteCreateManyCarteInputEnvelope = {
    data: Enumerable<CapaciteCreateManyCarteInput>
    skipDuplicates?: boolean
  }

  export type CompetenceCreateWithoutCarte_passvieInput = {
    name: string
    type: string
    description: string
    carte_active?: CartesCapacictesActiveCreateNestedManyWithoutCompetenceInput
  }

  export type CompetenceUncheckedCreateWithoutCarte_passvieInput = {
    id?: number
    name: string
    type: string
    description: string
    carte_active?: CartesCapacictesActiveUncheckedCreateNestedManyWithoutCompetenceInput
  }

  export type CompetenceCreateOrConnectWithoutCarte_passvieInput = {
    where: CompetenceWhereUniqueInput
    create: XOR<CompetenceCreateWithoutCarte_passvieInput, CompetenceUncheckedCreateWithoutCarte_passvieInput>
  }

  export type CartesCapacictesActiveCreateWithoutCarteInput = {
    competence: CompetenceCreateNestedOneWithoutCarte_activeInput
  }

  export type CartesCapacictesActiveUncheckedCreateWithoutCarteInput = {
    competenceId: number
  }

  export type CartesCapacictesActiveCreateOrConnectWithoutCarteInput = {
    where: CartesCapacictesActiveWhereUniqueInput
    create: XOR<CartesCapacictesActiveCreateWithoutCarteInput, CartesCapacictesActiveUncheckedCreateWithoutCarteInput>
  }

  export type CartesCapacictesActiveCreateManyCarteInputEnvelope = {
    data: Enumerable<CartesCapacictesActiveCreateManyCarteInput>
    skipDuplicates?: boolean
  }

  export type TypeUpsertWithoutCarteInput = {
    update: XOR<TypeUpdateWithoutCarteInput, TypeUncheckedUpdateWithoutCarteInput>
    create: XOR<TypeCreateWithoutCarteInput, TypeUncheckedCreateWithoutCarteInput>
  }

  export type TypeUpdateWithoutCarteInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TypeUncheckedUpdateWithoutCarteInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ClasseUpsertWithoutCarteInput = {
    update: XOR<ClasseUpdateWithoutCarteInput, ClasseUncheckedUpdateWithoutCarteInput>
    create: XOR<ClasseCreateWithoutCarteInput, ClasseUncheckedCreateWithoutCarteInput>
  }

  export type ClasseUpdateWithoutCarteInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ClasseUncheckedUpdateWithoutCarteInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CapaciteUpsertWithWhereUniqueWithoutCarteInput = {
    where: CapaciteWhereUniqueInput
    update: XOR<CapaciteUpdateWithoutCarteInput, CapaciteUncheckedUpdateWithoutCarteInput>
    create: XOR<CapaciteCreateWithoutCarteInput, CapaciteUncheckedCreateWithoutCarteInput>
  }

  export type CapaciteUpdateWithWhereUniqueWithoutCarteInput = {
    where: CapaciteWhereUniqueInput
    data: XOR<CapaciteUpdateWithoutCarteInput, CapaciteUncheckedUpdateWithoutCarteInput>
  }

  export type CapaciteUpdateManyWithWhereWithoutCarteInput = {
    where: CapaciteScalarWhereInput
    data: XOR<CapaciteUpdateManyMutationInput, CapaciteUncheckedUpdateManyWithoutCapaciteInput>
  }

  export type CapaciteScalarWhereInput = {
    AND?: Enumerable<CapaciteScalarWhereInput>
    OR?: Enumerable<CapaciteScalarWhereInput>
    NOT?: Enumerable<CapaciteScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    description?: StringFilter | string
    carteId?: IntNullableFilter | number | null
  }

  export type CompetenceUpsertWithoutCarte_passvieInput = {
    update: XOR<CompetenceUpdateWithoutCarte_passvieInput, CompetenceUncheckedUpdateWithoutCarte_passvieInput>
    create: XOR<CompetenceCreateWithoutCarte_passvieInput, CompetenceUncheckedCreateWithoutCarte_passvieInput>
  }

  export type CompetenceUpdateWithoutCarte_passvieInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    carte_active?: CartesCapacictesActiveUpdateManyWithoutCompetenceNestedInput
  }

  export type CompetenceUncheckedUpdateWithoutCarte_passvieInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    carte_active?: CartesCapacictesActiveUncheckedUpdateManyWithoutCompetenceNestedInput
  }

  export type CartesCapacictesActiveUpsertWithWhereUniqueWithoutCarteInput = {
    where: CartesCapacictesActiveWhereUniqueInput
    update: XOR<CartesCapacictesActiveUpdateWithoutCarteInput, CartesCapacictesActiveUncheckedUpdateWithoutCarteInput>
    create: XOR<CartesCapacictesActiveCreateWithoutCarteInput, CartesCapacictesActiveUncheckedCreateWithoutCarteInput>
  }

  export type CartesCapacictesActiveUpdateWithWhereUniqueWithoutCarteInput = {
    where: CartesCapacictesActiveWhereUniqueInput
    data: XOR<CartesCapacictesActiveUpdateWithoutCarteInput, CartesCapacictesActiveUncheckedUpdateWithoutCarteInput>
  }

  export type CartesCapacictesActiveUpdateManyWithWhereWithoutCarteInput = {
    where: CartesCapacictesActiveScalarWhereInput
    data: XOR<CartesCapacictesActiveUpdateManyMutationInput, CartesCapacictesActiveUncheckedUpdateManyWithoutCompetences_activeInput>
  }

  export type CartesCapacictesActiveScalarWhereInput = {
    AND?: Enumerable<CartesCapacictesActiveScalarWhereInput>
    OR?: Enumerable<CartesCapacictesActiveScalarWhereInput>
    NOT?: Enumerable<CartesCapacictesActiveScalarWhereInput>
    competenceId?: IntFilter | number
    carteId?: IntFilter | number
  }

  export type CarteCreateWithoutTypeInput = {
    name: string
    illustration: string
    power: number
    cost: string
    color: string
    description: string
    classe?: ClasseCreateNestedOneWithoutCarteInput
    Capacite?: CapaciteCreateNestedManyWithoutCarteInput
    competence_passive?: CompetenceCreateNestedOneWithoutCarte_passvieInput
    competences_active?: CartesCapacictesActiveCreateNestedManyWithoutCarteInput
  }

  export type CarteUncheckedCreateWithoutTypeInput = {
    id?: number
    name: string
    illustration: string
    classeId?: number | null
    power: number
    competenceId: number
    cost: string
    color: string
    description: string
    Capacite?: CapaciteUncheckedCreateNestedManyWithoutCarteInput
    competences_active?: CartesCapacictesActiveUncheckedCreateNestedManyWithoutCarteInput
  }

  export type CarteCreateOrConnectWithoutTypeInput = {
    where: CarteWhereUniqueInput
    create: XOR<CarteCreateWithoutTypeInput, CarteUncheckedCreateWithoutTypeInput>
  }

  export type CarteCreateManyTypeInputEnvelope = {
    data: Enumerable<CarteCreateManyTypeInput>
    skipDuplicates?: boolean
  }

  export type CarteUpsertWithWhereUniqueWithoutTypeInput = {
    where: CarteWhereUniqueInput
    update: XOR<CarteUpdateWithoutTypeInput, CarteUncheckedUpdateWithoutTypeInput>
    create: XOR<CarteCreateWithoutTypeInput, CarteUncheckedCreateWithoutTypeInput>
  }

  export type CarteUpdateWithWhereUniqueWithoutTypeInput = {
    where: CarteWhereUniqueInput
    data: XOR<CarteUpdateWithoutTypeInput, CarteUncheckedUpdateWithoutTypeInput>
  }

  export type CarteUpdateManyWithWhereWithoutTypeInput = {
    where: CarteScalarWhereInput
    data: XOR<CarteUpdateManyMutationInput, CarteUncheckedUpdateManyWithoutCarteInput>
  }

  export type CarteScalarWhereInput = {
    AND?: Enumerable<CarteScalarWhereInput>
    OR?: Enumerable<CarteScalarWhereInput>
    NOT?: Enumerable<CarteScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    illustration?: StringFilter | string
    typeId?: IntNullableFilter | number | null
    classeId?: IntNullableFilter | number | null
    power?: IntFilter | number
    competenceId?: IntFilter | number
    cost?: StringFilter | string
    color?: StringFilter | string
    description?: StringFilter | string
  }

  export type CarteCreateWithoutClasseInput = {
    name: string
    illustration: string
    power: number
    cost: string
    color: string
    description: string
    type?: TypeCreateNestedOneWithoutCarteInput
    Capacite?: CapaciteCreateNestedManyWithoutCarteInput
    competence_passive?: CompetenceCreateNestedOneWithoutCarte_passvieInput
    competences_active?: CartesCapacictesActiveCreateNestedManyWithoutCarteInput
  }

  export type CarteUncheckedCreateWithoutClasseInput = {
    id?: number
    name: string
    illustration: string
    typeId?: number | null
    power: number
    competenceId: number
    cost: string
    color: string
    description: string
    Capacite?: CapaciteUncheckedCreateNestedManyWithoutCarteInput
    competences_active?: CartesCapacictesActiveUncheckedCreateNestedManyWithoutCarteInput
  }

  export type CarteCreateOrConnectWithoutClasseInput = {
    where: CarteWhereUniqueInput
    create: XOR<CarteCreateWithoutClasseInput, CarteUncheckedCreateWithoutClasseInput>
  }

  export type CarteCreateManyClasseInputEnvelope = {
    data: Enumerable<CarteCreateManyClasseInput>
    skipDuplicates?: boolean
  }

  export type CarteUpsertWithWhereUniqueWithoutClasseInput = {
    where: CarteWhereUniqueInput
    update: XOR<CarteUpdateWithoutClasseInput, CarteUncheckedUpdateWithoutClasseInput>
    create: XOR<CarteCreateWithoutClasseInput, CarteUncheckedCreateWithoutClasseInput>
  }

  export type CarteUpdateWithWhereUniqueWithoutClasseInput = {
    where: CarteWhereUniqueInput
    data: XOR<CarteUpdateWithoutClasseInput, CarteUncheckedUpdateWithoutClasseInput>
  }

  export type CarteUpdateManyWithWhereWithoutClasseInput = {
    where: CarteScalarWhereInput
    data: XOR<CarteUpdateManyMutationInput, CarteUncheckedUpdateManyWithoutCarteInput>
  }

  export type CarteCreateWithoutCapaciteInput = {
    name: string
    illustration: string
    power: number
    cost: string
    color: string
    description: string
    type?: TypeCreateNestedOneWithoutCarteInput
    classe?: ClasseCreateNestedOneWithoutCarteInput
    competence_passive?: CompetenceCreateNestedOneWithoutCarte_passvieInput
    competences_active?: CartesCapacictesActiveCreateNestedManyWithoutCarteInput
  }

  export type CarteUncheckedCreateWithoutCapaciteInput = {
    id?: number
    name: string
    illustration: string
    typeId?: number | null
    classeId?: number | null
    power: number
    competenceId: number
    cost: string
    color: string
    description: string
    competences_active?: CartesCapacictesActiveUncheckedCreateNestedManyWithoutCarteInput
  }

  export type CarteCreateOrConnectWithoutCapaciteInput = {
    where: CarteWhereUniqueInput
    create: XOR<CarteCreateWithoutCapaciteInput, CarteUncheckedCreateWithoutCapaciteInput>
  }

  export type CarteUpsertWithoutCapaciteInput = {
    update: XOR<CarteUpdateWithoutCapaciteInput, CarteUncheckedUpdateWithoutCapaciteInput>
    create: XOR<CarteCreateWithoutCapaciteInput, CarteUncheckedCreateWithoutCapaciteInput>
  }

  export type CarteUpdateWithoutCapaciteInput = {
    name?: StringFieldUpdateOperationsInput | string
    illustration?: StringFieldUpdateOperationsInput | string
    power?: IntFieldUpdateOperationsInput | number
    cost?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: TypeUpdateOneWithoutCarteNestedInput
    classe?: ClasseUpdateOneWithoutCarteNestedInput
    competence_passive?: CompetenceUpdateOneWithoutCarte_passvieNestedInput
    competences_active?: CartesCapacictesActiveUpdateManyWithoutCarteNestedInput
  }

  export type CarteUncheckedUpdateWithoutCapaciteInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    illustration?: StringFieldUpdateOperationsInput | string
    typeId?: NullableIntFieldUpdateOperationsInput | number | null
    classeId?: NullableIntFieldUpdateOperationsInput | number | null
    power?: IntFieldUpdateOperationsInput | number
    competenceId?: IntFieldUpdateOperationsInput | number
    cost?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    competences_active?: CartesCapacictesActiveUncheckedUpdateManyWithoutCarteNestedInput
  }

  export type CarteCreateWithoutCompetence_passiveInput = {
    name: string
    illustration: string
    power: number
    cost: string
    color: string
    description: string
    type?: TypeCreateNestedOneWithoutCarteInput
    classe?: ClasseCreateNestedOneWithoutCarteInput
    Capacite?: CapaciteCreateNestedManyWithoutCarteInput
    competences_active?: CartesCapacictesActiveCreateNestedManyWithoutCarteInput
  }

  export type CarteUncheckedCreateWithoutCompetence_passiveInput = {
    id?: number
    name: string
    illustration: string
    typeId?: number | null
    classeId?: number | null
    power: number
    cost: string
    color: string
    description: string
    Capacite?: CapaciteUncheckedCreateNestedManyWithoutCarteInput
    competences_active?: CartesCapacictesActiveUncheckedCreateNestedManyWithoutCarteInput
  }

  export type CarteCreateOrConnectWithoutCompetence_passiveInput = {
    where: CarteWhereUniqueInput
    create: XOR<CarteCreateWithoutCompetence_passiveInput, CarteUncheckedCreateWithoutCompetence_passiveInput>
  }

  export type CarteCreateManyCompetence_passiveInputEnvelope = {
    data: Enumerable<CarteCreateManyCompetence_passiveInput>
    skipDuplicates?: boolean
  }

  export type CartesCapacictesActiveCreateWithoutCompetenceInput = {
    carte: CarteCreateNestedOneWithoutCompetences_activeInput
  }

  export type CartesCapacictesActiveUncheckedCreateWithoutCompetenceInput = {
    carteId: number
  }

  export type CartesCapacictesActiveCreateOrConnectWithoutCompetenceInput = {
    where: CartesCapacictesActiveWhereUniqueInput
    create: XOR<CartesCapacictesActiveCreateWithoutCompetenceInput, CartesCapacictesActiveUncheckedCreateWithoutCompetenceInput>
  }

  export type CartesCapacictesActiveCreateManyCompetenceInputEnvelope = {
    data: Enumerable<CartesCapacictesActiveCreateManyCompetenceInput>
    skipDuplicates?: boolean
  }

  export type CarteUpsertWithWhereUniqueWithoutCompetence_passiveInput = {
    where: CarteWhereUniqueInput
    update: XOR<CarteUpdateWithoutCompetence_passiveInput, CarteUncheckedUpdateWithoutCompetence_passiveInput>
    create: XOR<CarteCreateWithoutCompetence_passiveInput, CarteUncheckedCreateWithoutCompetence_passiveInput>
  }

  export type CarteUpdateWithWhereUniqueWithoutCompetence_passiveInput = {
    where: CarteWhereUniqueInput
    data: XOR<CarteUpdateWithoutCompetence_passiveInput, CarteUncheckedUpdateWithoutCompetence_passiveInput>
  }

  export type CarteUpdateManyWithWhereWithoutCompetence_passiveInput = {
    where: CarteScalarWhereInput
    data: XOR<CarteUpdateManyMutationInput, CarteUncheckedUpdateManyWithoutCarte_passvieInput>
  }

  export type CartesCapacictesActiveUpsertWithWhereUniqueWithoutCompetenceInput = {
    where: CartesCapacictesActiveWhereUniqueInput
    update: XOR<CartesCapacictesActiveUpdateWithoutCompetenceInput, CartesCapacictesActiveUncheckedUpdateWithoutCompetenceInput>
    create: XOR<CartesCapacictesActiveCreateWithoutCompetenceInput, CartesCapacictesActiveUncheckedCreateWithoutCompetenceInput>
  }

  export type CartesCapacictesActiveUpdateWithWhereUniqueWithoutCompetenceInput = {
    where: CartesCapacictesActiveWhereUniqueInput
    data: XOR<CartesCapacictesActiveUpdateWithoutCompetenceInput, CartesCapacictesActiveUncheckedUpdateWithoutCompetenceInput>
  }

  export type CartesCapacictesActiveUpdateManyWithWhereWithoutCompetenceInput = {
    where: CartesCapacictesActiveScalarWhereInput
    data: XOR<CartesCapacictesActiveUpdateManyMutationInput, CartesCapacictesActiveUncheckedUpdateManyWithoutCarte_activeInput>
  }

  export type CompetenceCreateWithoutCarte_activeInput = {
    name: string
    type: string
    description: string
    carte_passvie?: CarteCreateNestedManyWithoutCompetence_passiveInput
  }

  export type CompetenceUncheckedCreateWithoutCarte_activeInput = {
    id?: number
    name: string
    type: string
    description: string
    carte_passvie?: CarteUncheckedCreateNestedManyWithoutCompetence_passiveInput
  }

  export type CompetenceCreateOrConnectWithoutCarte_activeInput = {
    where: CompetenceWhereUniqueInput
    create: XOR<CompetenceCreateWithoutCarte_activeInput, CompetenceUncheckedCreateWithoutCarte_activeInput>
  }

  export type CarteCreateWithoutCompetences_activeInput = {
    name: string
    illustration: string
    power: number
    cost: string
    color: string
    description: string
    type?: TypeCreateNestedOneWithoutCarteInput
    classe?: ClasseCreateNestedOneWithoutCarteInput
    Capacite?: CapaciteCreateNestedManyWithoutCarteInput
    competence_passive?: CompetenceCreateNestedOneWithoutCarte_passvieInput
  }

  export type CarteUncheckedCreateWithoutCompetences_activeInput = {
    id?: number
    name: string
    illustration: string
    typeId?: number | null
    classeId?: number | null
    power: number
    competenceId: number
    cost: string
    color: string
    description: string
    Capacite?: CapaciteUncheckedCreateNestedManyWithoutCarteInput
  }

  export type CarteCreateOrConnectWithoutCompetences_activeInput = {
    where: CarteWhereUniqueInput
    create: XOR<CarteCreateWithoutCompetences_activeInput, CarteUncheckedCreateWithoutCompetences_activeInput>
  }

  export type CompetenceUpsertWithoutCarte_activeInput = {
    update: XOR<CompetenceUpdateWithoutCarte_activeInput, CompetenceUncheckedUpdateWithoutCarte_activeInput>
    create: XOR<CompetenceCreateWithoutCarte_activeInput, CompetenceUncheckedCreateWithoutCarte_activeInput>
  }

  export type CompetenceUpdateWithoutCarte_activeInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    carte_passvie?: CarteUpdateManyWithoutCompetence_passiveNestedInput
  }

  export type CompetenceUncheckedUpdateWithoutCarte_activeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    carte_passvie?: CarteUncheckedUpdateManyWithoutCompetence_passiveNestedInput
  }

  export type CarteUpsertWithoutCompetences_activeInput = {
    update: XOR<CarteUpdateWithoutCompetences_activeInput, CarteUncheckedUpdateWithoutCompetences_activeInput>
    create: XOR<CarteCreateWithoutCompetences_activeInput, CarteUncheckedCreateWithoutCompetences_activeInput>
  }

  export type CarteUpdateWithoutCompetences_activeInput = {
    name?: StringFieldUpdateOperationsInput | string
    illustration?: StringFieldUpdateOperationsInput | string
    power?: IntFieldUpdateOperationsInput | number
    cost?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: TypeUpdateOneWithoutCarteNestedInput
    classe?: ClasseUpdateOneWithoutCarteNestedInput
    Capacite?: CapaciteUpdateManyWithoutCarteNestedInput
    competence_passive?: CompetenceUpdateOneWithoutCarte_passvieNestedInput
  }

  export type CarteUncheckedUpdateWithoutCompetences_activeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    illustration?: StringFieldUpdateOperationsInput | string
    typeId?: NullableIntFieldUpdateOperationsInput | number | null
    classeId?: NullableIntFieldUpdateOperationsInput | number | null
    power?: IntFieldUpdateOperationsInput | number
    competenceId?: IntFieldUpdateOperationsInput | number
    cost?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    Capacite?: CapaciteUncheckedUpdateManyWithoutCarteNestedInput
  }

  export type CapaciteCreateManyCarteInput = {
    id?: number
    name: string
    description: string
  }

  export type CartesCapacictesActiveCreateManyCarteInput = {
    competenceId: number
  }

  export type CapaciteUpdateWithoutCarteInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type CapaciteUncheckedUpdateWithoutCarteInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type CapaciteUncheckedUpdateManyWithoutCapaciteInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type CartesCapacictesActiveUpdateWithoutCarteInput = {
    competence?: CompetenceUpdateOneRequiredWithoutCarte_activeNestedInput
  }

  export type CartesCapacictesActiveUncheckedUpdateWithoutCarteInput = {
    competenceId?: IntFieldUpdateOperationsInput | number
  }

  export type CartesCapacictesActiveUncheckedUpdateManyWithoutCompetences_activeInput = {
    competenceId?: IntFieldUpdateOperationsInput | number
  }

  export type CarteCreateManyTypeInput = {
    id?: number
    name: string
    illustration: string
    classeId?: number | null
    power: number
    competenceId: number
    cost: string
    color: string
    description: string
  }

  export type CarteUpdateWithoutTypeInput = {
    name?: StringFieldUpdateOperationsInput | string
    illustration?: StringFieldUpdateOperationsInput | string
    power?: IntFieldUpdateOperationsInput | number
    cost?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    classe?: ClasseUpdateOneWithoutCarteNestedInput
    Capacite?: CapaciteUpdateManyWithoutCarteNestedInput
    competence_passive?: CompetenceUpdateOneWithoutCarte_passvieNestedInput
    competences_active?: CartesCapacictesActiveUpdateManyWithoutCarteNestedInput
  }

  export type CarteUncheckedUpdateWithoutTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    illustration?: StringFieldUpdateOperationsInput | string
    classeId?: NullableIntFieldUpdateOperationsInput | number | null
    power?: IntFieldUpdateOperationsInput | number
    competenceId?: IntFieldUpdateOperationsInput | number
    cost?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    Capacite?: CapaciteUncheckedUpdateManyWithoutCarteNestedInput
    competences_active?: CartesCapacictesActiveUncheckedUpdateManyWithoutCarteNestedInput
  }

  export type CarteUncheckedUpdateManyWithoutCarteInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    illustration?: StringFieldUpdateOperationsInput | string
    classeId?: NullableIntFieldUpdateOperationsInput | number | null
    power?: IntFieldUpdateOperationsInput | number
    competenceId?: IntFieldUpdateOperationsInput | number
    cost?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type CarteCreateManyClasseInput = {
    id?: number
    name: string
    illustration: string
    typeId?: number | null
    power: number
    competenceId: number
    cost: string
    color: string
    description: string
  }

  export type CarteUpdateWithoutClasseInput = {
    name?: StringFieldUpdateOperationsInput | string
    illustration?: StringFieldUpdateOperationsInput | string
    power?: IntFieldUpdateOperationsInput | number
    cost?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: TypeUpdateOneWithoutCarteNestedInput
    Capacite?: CapaciteUpdateManyWithoutCarteNestedInput
    competence_passive?: CompetenceUpdateOneWithoutCarte_passvieNestedInput
    competences_active?: CartesCapacictesActiveUpdateManyWithoutCarteNestedInput
  }

  export type CarteUncheckedUpdateWithoutClasseInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    illustration?: StringFieldUpdateOperationsInput | string
    typeId?: NullableIntFieldUpdateOperationsInput | number | null
    power?: IntFieldUpdateOperationsInput | number
    competenceId?: IntFieldUpdateOperationsInput | number
    cost?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    Capacite?: CapaciteUncheckedUpdateManyWithoutCarteNestedInput
    competences_active?: CartesCapacictesActiveUncheckedUpdateManyWithoutCarteNestedInput
  }

  export type CarteCreateManyCompetence_passiveInput = {
    id?: number
    name: string
    illustration: string
    typeId?: number | null
    classeId?: number | null
    power: number
    cost: string
    color: string
    description: string
  }

  export type CartesCapacictesActiveCreateManyCompetenceInput = {
    carteId: number
  }

  export type CarteUpdateWithoutCompetence_passiveInput = {
    name?: StringFieldUpdateOperationsInput | string
    illustration?: StringFieldUpdateOperationsInput | string
    power?: IntFieldUpdateOperationsInput | number
    cost?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: TypeUpdateOneWithoutCarteNestedInput
    classe?: ClasseUpdateOneWithoutCarteNestedInput
    Capacite?: CapaciteUpdateManyWithoutCarteNestedInput
    competences_active?: CartesCapacictesActiveUpdateManyWithoutCarteNestedInput
  }

  export type CarteUncheckedUpdateWithoutCompetence_passiveInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    illustration?: StringFieldUpdateOperationsInput | string
    typeId?: NullableIntFieldUpdateOperationsInput | number | null
    classeId?: NullableIntFieldUpdateOperationsInput | number | null
    power?: IntFieldUpdateOperationsInput | number
    cost?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    Capacite?: CapaciteUncheckedUpdateManyWithoutCarteNestedInput
    competences_active?: CartesCapacictesActiveUncheckedUpdateManyWithoutCarteNestedInput
  }

  export type CarteUncheckedUpdateManyWithoutCarte_passvieInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    illustration?: StringFieldUpdateOperationsInput | string
    typeId?: NullableIntFieldUpdateOperationsInput | number | null
    classeId?: NullableIntFieldUpdateOperationsInput | number | null
    power?: IntFieldUpdateOperationsInput | number
    cost?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type CartesCapacictesActiveUpdateWithoutCompetenceInput = {
    carte?: CarteUpdateOneRequiredWithoutCompetences_activeNestedInput
  }

  export type CartesCapacictesActiveUncheckedUpdateWithoutCompetenceInput = {
    carteId?: IntFieldUpdateOperationsInput | number
  }

  export type CartesCapacictesActiveUncheckedUpdateManyWithoutCarte_activeInput = {
    carteId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}